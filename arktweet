HSLLD/HV1/MT//alimt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//alimt1.cha
HSLLD/HV1/MT//davmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'supper', 22, 28]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'supper', 11, 17]
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 19, 23]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
broccoli
broccoli broccoli 30
[('want', 'VB'), ('some', 'DT'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'lemon', 6, 11]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'juice', 17, 22]
juice
juice juice 52
[('watch', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
2
fish
fish fish 305
[('didn', 'NN'), ('t', 'NN'), ('we', 'PRP'), ('play', 'VBP'), ('fish', 'JJ')]
['fish']
('food -> ', [])
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
fish
fish fish 305
[('and', 'CC'), ('we', 'PRP'), ('played', 'VBD'), ('fish', 'NN')]
['fish']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
fish
fish fish 305
[('we', 'PRP'), ('did', 'VBD'), ('we', 'PRP'), ('played', 'VBD'), ('fish', 'NN')]
['fish']
('food -> ', [])
candidates to check:
3
fish
fish fish 305
[('and', 'CC'), ('we', 'PRP'), ('played', 'VBD'), ('another', 'DT'), ('fish', 'NN'), ('right', 'NN')]
['fish']
('food -> ', [])
candidates to check:
2
fish
fish fish 305
[('did', 'VBD'), ('we', 'PRP'), ('play', 'VB'), ('fish', 'JJ'), ('twice', 'NN')]
['fish']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'sandwich', 32, 40]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'chicken', 25, 32]
chicken
chicken chicken 234
[('wan', 'NN'), ('na', 'TO'), ('try', 'VB'), ('some', 'DT'), ('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'chicken', 24, 31]
chicken
chicken chicken 234
[('that', 'IN'), ('that', 'DT'), ('was', 'VBD'), ('chicken', 'VBN')]
['chicken']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'sandwich', 10, 18]
candidates to check:
2
descended from food: [['N'], 'food', 21, 25]
candidates to check:
6
candidates to check:
3
descended from food: [['N'], 'chicken', 61, 68]
chicken
chicken chicken 234
[('that', 'DT'), ('was', 'VBD'), ('a', 'DT'), ('couple', 'JJ'), ('o', 'JJ'), ('f', 'NN'), ('weeks', 'NNS'), ('ago', 'IN'), ('that', 'IN'), ('you', 'PRP'), ('ate', 'VBP'), ('that', 'IN'), ('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 74, 78]
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'meal', 41, 45]
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'sandwich', 11, 19]
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 141, 145]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'juice', 31, 36]
juice
juice juice 52
[('why', 'WRB'), ('don', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('drink', 'VBP'), ('your', 'PRP$'), ('juice', 'NN'), ('at', 'IN'), ('least', 'JJS')]
['juice']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
water
water water 18
[('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
water
water water 18
[('that', 'DT'), ('s', 'VBZ'), ('not', 'RB'), ('even', 'RB'), ('water', 'NN'), ('is', 'VBZ'), ('it', 'PRP')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
7
candidates to check:
1
candidates to check:
6
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'supper', 30, 36]
candidates to check:
4
descended from food: [['N'], 'salad', 30, 35]
egg
egg egg 357
[('had', 'VBD'), ('a', 'DT'), ('hankering', 'NN'), ('for', 'IN'), ('egg', 'NN'), ('salad', 'NN'), ('did', 'VBD'), ('you', 'PRP'), ('laughs', 'VB')]
['egg']
('food -> ', [])
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'sandwiches', 72, 82]
egg
egg egg 357
[('it', 'PRP'), ('looks', 'VBZ'), ('so', 'RB'), ('good', 'JJ'), ('all', 'PDT'), ('the', 'DT'), ('egg', 'NN'), ('salad', 'NN'), ('s', 'VBD'), ('popping', 'VBG'), ('out', 'IN'), ('of', 'IN'), ('the', 'DT'), ('sandwiches', 'NNS')]
['egg']
('food -> ', [])
candidates to check:
7
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'breakfast', 31, 40]
candidates to check:
2
descended from food: [['N'], 'lunch', 31, 36]
candidates to check:
2
descended from food: [['N'], 'supper', 29, 35]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
shake
shake shake 148
[('and', 'CC'), ('someone', 'NN'), ('and', 'CC'), ('someone', 'NN'), ('can', 'MD'), ('shake', 'VB'), ('his', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
shake
shake shake 148
[('you', 'PRP'), ('can', 'MD'), ('shake', 'VB'), ('his', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
6
descended from food: [['N'], 'dinner', 97, 103]
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 63, 67]
candidates to check:
2
descended from food: [['N'], 'food', 58, 62]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'juice', 40, 45]
juice
juice juice 52
[('here', 'RB'), ('dip', 'VBZ'), ('dip', 'NN'), ('it', 'PRP'), ('in', 'IN'), ('your', 'PRP$'), ('juice', 'NN'), ('and', 'CC'), ('see', 'VB'), ('what', 'WP'), ('it', 'PRP'), ('tastes', 'VBZ'), ('like', 'IN')]
['juice']
('food -> ', [])
dip
dip dip 119
[('here', 'RB'), ('dip', 'VBZ'), ('dip', 'NN'), ('it', 'PRP'), ('in', 'IN'), ('your', 'PRP$'), ('juice', 'NN'), ('and', 'CC'), ('see', 'VB'), ('what', 'WP'), ('it', 'PRP'), ('tastes', 'VBZ'), ('like', 'IN')]
['dip']
('food -> ', [['dip', 'Soups, Sauces, and Gravies']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'breakfast', 43, 52]
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
4
descended from food: [['N'], 'food', 13, 17]
descended from food: [['N'], 'food', 13, 17]
candidates to check:
1
broccoli
broccoli broccoli 30
[('hey', 'NN'), ('don', 'NN'), ('t', 'NN'), ('cover', 'VB'), ('up', 'RP'), ('the', 'DT'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
2
broccoli
broccoli broccoli 30
[('you', 'PRP'), ('want', 'VBP'), ('more', 'JJR'), ('broccoli', 'NNS')]
['broccoli']
('food -> ', [])
candidates to check:
1
broccoli
broccoli broccoli 30
[('i', 'NN'), ('ll', 'VBP'), ('bring', 'NN'), ('you', 'PRP'), ('some', 'DT'), ('broccoli', 'NNS')]
['broccoli']
('food -> ', [])
candidates to check:
2
candidates to check:
2
broccoli
broccoli broccoli 30
[('chi', 'NN'), ('wants', 'VBZ'), ('to', 'TO'), ('try', 'VB'), ('a', 'DT'), ('little', 'JJ'), ('tree', 'NN'), ('of', 'IN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'food', 73, 77]
candidates to check:
3
descended from food: [['N'], 'salad', 43, 48]
descended from food: [['N'], 'peas', 74, 78]
peas
peas peas 116
[('you', 'PRP'), ('always', 'RB'), ('tell', 'VB'), ('me', 'PRP'), ('that', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('your', 'PRP$'), ('salad', 'NN'), ('and', 'CC'), ('your', 'PRP$'), ('carrots', 'NNS'), ('and', 'CC'), ('peas', 'NNS')]
['peas']
('food -> ', [])
carrots
carrots carrots 35
[('you', 'PRP'), ('always', 'RB'), ('tell', 'VB'), ('me', 'PRP'), ('that', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('your', 'PRP$'), ('salad', 'NN'), ('and', 'CC'), ('your', 'PRP$'), ('carrots', 'NNS'), ('and', 'CC'), ('peas', 'NNS')]
['carrots']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
broccoli
broccoli broccoli 30
[('go', 'VB'), ('on', 'IN'), ('in', 'IN'), ('there', 'EX'), ('i', 'JJ'), ('ll', 'VBP'), ('bring', 'VBG'), ('you', 'PRP'), ('a', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('it', 'PRP'), ('broccoli', 'VB')]
['broccoli']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
broccoli
broccoli broccoli 30
[('a', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
1
candidates to check:
1
broccoli
broccoli broccoli 30
[('why', 'WRB'), ('don', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('sit', 'VBP'), ('down', 'RP'), ('and', 'CC'), ('try', 'VB'), ('that', 'DT'), ('broccoli', 'NN'), ('now', 'RB')]
['broccoli']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'dinner', 17, 23]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'candy', 17, 22]
candidates to check:
1
descended from food: [['N'], 'candy', 6, 11]
candidates to check:
5
candidates to check:
2
descended from food: [['N'], 'lollipops', 21, 30]
descended from food: [['N'], 'chocolate', 61, 70]
chocolate
chocolate chocolate 598
[('you', 'PRP'), ('know', 'VBP'), ('those', 'DT'), ('lollipops', 'NNS'), ('that', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('and', 'CC'), ('then', 'RB'), ('there', 'EX'), ('s', 'JJ'), ('chocolate', 'NN'), ('inside', 'IN')]
['chocolate']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'chocolate', 10, 19]
chocolate
chocolate chocolate 598
[('but', 'CC'), ('chocolate', 'NN'), ('gives', 'VBZ'), ('me', 'PRP'), ('a', 'DT'), ('tummy', 'NN'), ('ache', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'chocolate', 6, 15]
chocolate
chocolate chocolate 598
[('chocolate', 'NN'), ('gives', 'VBZ'), ('him', 'PRP'), ('a', 'DT'), ('tummy', 'NN'), ('ache', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'chocolate', 19, 28]
chocolate
chocolate chocolate 598
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('chocolate', 'NN'), ('xxx', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'chocolate', 27, 36]
broccoli
broccoli broccoli 30
[('you', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('chocolate', 'NN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
chocolate
chocolate chocolate 598
[('you', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('chocolate', 'NN'), ('broccoli', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
4
descended from food: [['N'], 'chocolate', 13, 22]
chocolate cake
chocolate cake chocolate cake 371
[('i', 'NNS'), ('like', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['chocolate', 'cake']
('food -> ', [['chocolate cake', 'Baked Products']])
chocolate
chocolate chocolate 598
[('i', 'NNS'), ('like', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['chocolate']
('food -> ', [['chocolate cake', 'Baked Products']])
cake
cake cake 412
[('i', 'NNS'), ('like', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['cake']
('food -> ', [['chocolate cake', 'Baked Products'], ['cake', 'Baked Products']])
candidates to check:
4
descended from food: [['N'], 'chocolate', 20, 29]
chocolate cake
chocolate cake chocolate cake 371
[('you', 'PRP'), ('only', 'RB'), ('want', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['chocolate', 'cake']
('food -> ', [['chocolate cake', 'Baked Products']])
chocolate
chocolate chocolate 598
[('you', 'PRP'), ('only', 'RB'), ('want', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['chocolate']
('food -> ', [['chocolate cake', 'Baked Products']])
cake
cake cake 412
[('you', 'PRP'), ('only', 'RB'), ('want', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['cake']
('food -> ', [['chocolate cake', 'Baked Products'], ['cake', 'Baked Products']])
candidates to check:
4
descended from food: [['N'], 'chocolate', 22, 31]
chocolate cake
chocolate cake chocolate cake 371
[('well', 'RB'), ('it', 'PRP'), ('has', 'VBZ'), ('got', 'VBN'), ('chocolate', 'JJ'), ('cake', 'NN'), ('sprinkled', 'VBD'), ('inside', 'IN'), ('it', 'PRP')]
['chocolate', 'cake']
('food -> ', [['chocolate cake', 'Baked Products']])
chocolate
chocolate chocolate 598
[('well', 'RB'), ('it', 'PRP'), ('has', 'VBZ'), ('got', 'VBN'), ('chocolate', 'JJ'), ('cake', 'NN'), ('sprinkled', 'VBD'), ('inside', 'IN'), ('it', 'PRP')]
['chocolate']
('food -> ', [['chocolate cake', 'Baked Products']])
cake
cake cake 412
[('well', 'RB'), ('it', 'PRP'), ('has', 'VBZ'), ('got', 'VBN'), ('chocolate', 'JJ'), ('cake', 'NN'), ('sprinkled', 'VBD'), ('inside', 'IN'), ('it', 'PRP')]
['cake']
('food -> ', [['chocolate cake', 'Baked Products'], ['cake', 'Baked Products']])
candidates to check:
2
descended from food: [['N'], 'chocolate', 19, 28]
chocolate
chocolate chocolate 598
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'food', 120, 124]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
broccoli
broccoli broccoli 30
[('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('that', 'DT'), ('delicious', 'JJ'), ('broccoli', 'NN'), ('huh', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
5
descended from food: [['N'], 'supper', 36, 42]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
loading solution set
calculating
set([(189, (51, 61)), (2278, (6, 11)), (2339, (27, 45)), (1253, (26, 35)), (2304, (10, 19)), (1868, (43, 51)), (657, (61, 68)), (103, (38, 48)), (231, (6, 11)), (634, (10, 18)), (2048, (17, 25)), (1262, (36, 45)), (324, (36, 44)), (1904, (44, 52)), (2541, (48, 56)), (1887, (26, 34)), (1936, (62, 69)), (1012, (6, 11)), (2347, (13, 27)), (2350, (20, 34)), (221, (16, 24)), (2288, (21, 29)), (958, (41, 51)), (1876, (20, 28)), (565, (32, 40)), (1852, (38, 48)), (2270, (17, 22)), (1536, (40, 45)), (2354, (22, 36)), (845, (25, 35)), (2319, (6, 15)), (1936, (43, 48)), (2556, (29, 39)), (585, (25, 32)), (2285, (17, 29)), (321, (18, 26)), (609, (24, 31)), (1936, (74, 78)), (1209, (39, 49)), (2359, (19, 28)), (2006, (53, 61)), (2326, (19, 28)), (830, (11, 19)), (1528, (29, 39)), (2288, (61, 70)), (973, (31, 36)), (1019, (22, 27)), (968, (17, 27)), (2084, (42, 50)), (289, (17, 22))])
[((103, (38, 48)), "*MOT:\tsave some and don't eat all the cantaloupe .\n"), ((189, (51, 61)), '*MOT:\twell if it hurts that much (.) just eat your cantaloupe .\n'), ((221, (16, 24)), '*MOT:\twant some broccoli ?\n'), ((231, (6, 11)), '*MOT:\tlemon [<] !\n'), ((289, (17, 22)), '*FAT:\twatch your juice [>] .\n'), ((321, (18, 26)), '*FAT:\tthat was my ice cube .\n'), ((324, (36, 44)), '*FAT:\tthat little (.) squeal was my ice cube .\n'), ((565, (32, 40)), '*FAT:\t<here have> [<] some more sandwich .\n'), ((585, (25, 32)), '*MOT:\twanna [<] try some chicken ?\n'), ((609, (24, 31)), '*CHI:\tthat [/] that was chicken .\n'), ((634, (10, 18)), '*FAT:\t+, <sandwich then Chi> [<] .\n'), ((657, (61, 68)), '*MOT:\tthat was a couple o(f) weeks [!] ago that you ate that chicken .\n'), ((830, (11, 19)), '*FAT:\tgood sandwich though huh ?\n'), ((845, (25, 35)), "*FAT:\tdon't you want any cantaloupe ?\n"), ((958, (41, 51)), "*MOT:\tdon't you even want your delicious cantaloupe ?\n"), ((968, (17, 27)), '*MOT:\tnice juicy cantaloupe ?\n'), ((973, (31, 36)), "*MOT:\twhy don't you drink your juice at least ?\n"), ((1012, (6, 11)), '*CHI:\twater [!] ?\n'), ((1019, (22, 27)), "*MOT:\tthat's not even water is it ?\n"), ((1209, (39, 49)), "*MOT:\tmaybe it'll eat the rest of your cantaloupe .\n"), ((1253, (26, 35)), '*MOT:\thad a hankering for egg salad did you &=laughs ?\n'), ((1262, (36, 45)), "*FAT:\t<it looks so good (.) all the egg salad's> [<] popping out of the sandwiches .\n"), ((1528, (29, 39)), '*MOT:\tare you gonna eat your cantaloupe ?\n'), ((1536, (40, 45)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1852, (38, 48)), '*FAT:\there you want some more of this cantaloupe Chi ?\n'), ((1868, (43, 51)), "*CHI:\they [!] <don't cover> [<] up (.) the broccoli !\n"), ((1876, (20, 28)), '*MOT:\tyou want more broccoli ?\n'), ((1887, (26, 34)), "*MOT:\tI'll bring you some broccoli .\n"), ((1904, (44, 52)), '*MOT:\tChi wants to try a little (.) tree of broccoli .\n'), ((1936, (43, 48)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (62, 69)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (74, 78)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((2006, (53, 61)), "*FAT:\tgo on in there I'll bring you a piece of it [= broccoli] .\n"), ((2048, (17, 25)), '*FAT:\ta piece of broccoli .\n'), ((2084, (42, 50)), "*MOT:\twhy don't you sit down and try that broccoli now ?\n"), ((2270, (17, 22)), '*MOT:\tit has got candy inside .\n'), ((2278, (6, 11)), '*CHI:\tcandy inside ?\n'), ((2285, (17, 29)), '*FAT:\tyeah chewy Tootsie Roll .\n'), ((2288, (21, 29)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2288, (61, 70)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2304, (10, 19)), '*CHI:\tbut chocolate <gives me a tummy+ache> [>] .\n'), ((2319, (6, 15)), '*FAT:\tchocolate gives him a tummy+ache ?\n'), ((2326, (19, 28)), "*CHI:\tI don't like chocolate xxx [>] .\n"), ((2339, (27, 45)), "*MOT:\t<you don't like> [<] chocolate broccoli ?\n"), ((2347, (13, 27)), '*CHI:\tI like chocolate cake .\n'), ((2350, (20, 34)), '*MOT:\tyou only want chocolate cake ?\n'), ((2354, (22, 36)), '*MOT:\twell it has got chocolate cake sprinkled inside it .\n'), ((2359, (19, 28)), "*CHI:\tI don't like chocolate [?] .\n"), ((2541, (48, 56)), "*FAT:\tyou don't want any more of that delicious broccoli huh ?\n"), ((2556, (29, 39)), "*MOT:\tyou [<] don't any more cantaloupe ?\n")]
set([(2347, (13, 27)), (528, (30, 34)), (1289, (31, 40)), (643, (21, 25)), (2429, (120, 124)), (369, (21, 25)), (802, (41, 45)), (2304, (10, 19)), (1868, (43, 51)), (2252, (17, 23)), (1238, (30, 36)), (657, (61, 68)), (1536, (25, 28)), (231, (6, 11)), (1536, (12, 15)), (2278, (6, 11)), (634, (10, 18)), (181, (19, 23)), (1400, (14, 19)), (2048, (17, 25)), (2006, (53, 61)), (2339, (37, 45)), (1518, (58, 62)), (1536, (40, 45)), (2354, (22, 36)), (1887, (26, 34)), (1936, (62, 69)), (1262, (72, 82)), (541, (18, 22)), (534, (38, 42)), (1925, (73, 77)), (2350, (20, 34)), (2270, (17, 22)), (1293, (31, 36)), (565, (32, 40)), (767, (74, 78)), (2326, (19, 28)), (1012, (6, 11)), (868, (141, 145)), (1296, (29, 35)), (2319, (6, 15)), (1936, (43, 48)), (1397, (46, 51)), (1503, (63, 67)), (585, (25, 32)), (1876, (20, 28)), (1862, (13, 17)), (2541, (48, 56)), (609, (24, 31)), (1253, (30, 35)), (221, (16, 24)), (2359, (19, 28)), (2288, (21, 30)), (2566, (36, 42)), (1253, (26, 29)), (1904, (44, 52)), (64, (22, 28)), (435, (20, 24)), (1725, (43, 52)), (2084, (42, 50)), (2339, (27, 36)), (830, (11, 19)), (2288, (61, 70)), (973, (31, 36)), (1019, (22, 27)), (159, (11, 17)), (1936, (74, 78)), (1262, (36, 39)), (1447, (97, 103)), (289, (17, 22))])
[((64, (22, 28)), "*MOT:\t(..) how's your supper ?\n"), ((159, (11, 17)), '*FAT:\tgood supper huh ?\n'), ((181, (19, 23)), '*FAT:\tchew up your food really good (.) okay ?\n'), ((221, (16, 24)), '*MOT:\twant some broccoli ?\n'), ((231, (6, 11)), '*MOT:\tlemon [<] !\n'), ((289, (17, 22)), '*FAT:\twatch your juice [>] .\n'), ((369, (21, 25)), "*MOT:\tdidn't we play Fish ?\n"), ((435, (20, 24)), '*CHI:\tand we played Fish .\n'), ((528, (30, 34)), '*CHI:\t<we did> [//] we played Fish !\n'), ((534, (38, 42)), '*CHI:\t<and we> [>] (.) played another Fish right ?\n'), ((541, (18, 22)), '*MOT:\tdid we play Fish twice ?\n'), ((565, (32, 40)), '*FAT:\t<here have> [<] some more sandwich .\n'), ((585, (25, 32)), '*MOT:\twanna [<] try some chicken ?\n'), ((609, (24, 31)), '*CHI:\tthat [/] that was chicken .\n'), ((634, (10, 18)), '*FAT:\t+, <sandwich then Chi> [<] .\n'), ((643, (21, 25)), '*FAT:\thave some more food you [/] you might +//.\n'), ((657, (61, 68)), '*MOT:\tthat was a couple o(f) weeks [!] ago that you ate that chicken .\n'), ((767, (74, 78)), "*MOT:\t<it's really [!]> [<] hard to understand you (.) when you talk with food in your mouth though okay ?\n"), ((802, (41, 45)), "*FAT:\t<it'll cool &o> [/] it'll cool our meal off too quickly [>] .\n"), ((830, (11, 19)), '*FAT:\tgood sandwich though huh ?\n'), ((868, (141, 145)), "*FAT:\t<(be)cause you haven't> [<] eaten (.) and so that's why your tummy's probably (.) doesn't feel very good (be)cause <you don't have any food> [>] .\n"), ((973, (31, 36)), "*MOT:\twhy don't you drink your juice at least ?\n"), ((1012, (6, 11)), '*CHI:\twater [!] ?\n'), ((1019, (22, 27)), "*MOT:\tthat's not even water is it ?\n"), ((1238, (30, 36)), '*CHI:\tyou can help me with my supper .\n'), ((1253, (26, 29)), '*MOT:\thad a hankering for egg salad did you &=laughs ?\n'), ((1253, (30, 35)), '*MOT:\thad a hankering for egg salad did you &=laughs ?\n'), ((1262, (36, 39)), "*FAT:\t<it looks so good (.) all the egg salad's> [<] popping out of the sandwiches .\n"), ((1262, (72, 82)), "*FAT:\t<it looks so good (.) all the egg salad's> [<] popping out of the sandwiches .\n"), ((1289, (31, 40)), '*MOT:\thad about three bites of breakfast .\n'), ((1293, (31, 36)), '*MOT:\thad about two bites o(f) lunch .\n'), ((1296, (29, 35)), '*MOT:\tand <two bites> [>] of supper .\n'), ((1397, (46, 51)), '*CHI:\t<<and someone> [/] and> [<] someone can shake his hand .\n'), ((1400, (14, 19)), '*CHI:\tyou can shake his hand .\n'), ((1447, (97, 103)), "*MOT:\tbecause I don't think it's funny and I don't think it's the correct thing to do (.) at the dinner table or at your mother .\n"), ((1503, (63, 67)), "*MOT:\tokay well look don't eat anymore with your mouth full of food (be)cause it's hard to understand .\n"), ((1518, (58, 62)), "*MOT:\tdon't talk anymore with your mouth &=laughs full of food okay ?\n"), ((1536, (12, 15)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1536, (25, 28)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1536, (40, 45)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1725, (43, 52)), '*MOT:\tand we pretended that we were having breakfast in the cafeteria at school [!] huh ?\n'), ((1862, (13, 17)), '*MOT:\torange food is almost as good as green food to eat .\n'), ((1868, (43, 51)), "*CHI:\they [!] <don't cover> [<] up (.) the broccoli !\n"), ((1876, (20, 28)), '*MOT:\tyou want more broccoli ?\n'), ((1887, (26, 34)), "*MOT:\tI'll bring you some broccoli .\n"), ((1904, (44, 52)), '*MOT:\tChi wants to try a little (.) tree of broccoli .\n'), ((1925, (73, 77)), '*MOT:\t<(be)cause at> [<] school they told me that you always [!] try new food .\n'), ((1936, (43, 48)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (62, 69)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (74, 78)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((2006, (53, 61)), "*FAT:\tgo on in there I'll bring you a piece of it [= broccoli] .\n"), ((2048, (17, 25)), '*FAT:\ta piece of broccoli .\n'), ((2084, (42, 50)), "*MOT:\twhy don't you sit down and try that broccoli now ?\n"), ((2252, (17, 23)), '*MOT:\tnot at the dinner table .\n'), ((2270, (17, 22)), '*MOT:\tit has got candy inside .\n'), ((2278, (6, 11)), '*CHI:\tcandy inside ?\n'), ((2288, (21, 30)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2288, (61, 70)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2304, (10, 19)), '*CHI:\tbut chocolate <gives me a tummy+ache> [>] .\n'), ((2319, (6, 15)), '*FAT:\tchocolate gives him a tummy+ache ?\n'), ((2326, (19, 28)), "*CHI:\tI don't like chocolate xxx [>] .\n"), ((2339, (27, 36)), "*MOT:\t<you don't like> [<] chocolate broccoli ?\n"), ((2339, (37, 45)), "*MOT:\t<you don't like> [<] chocolate broccoli ?\n"), ((2347, (13, 27)), '*CHI:\tI like chocolate cake .\n'), ((2350, (20, 34)), '*MOT:\tyou only want chocolate cake ?\n'), ((2354, (22, 36)), '*MOT:\twell it has got chocolate cake sprinkled inside it .\n'), ((2359, (19, 28)), "*CHI:\tI don't like chocolate [?] .\n"), ((2429, (120, 124)), '*MOT:\tand your muscles (.) the only way they can develop and get bigger is for you to (.) <give it> [//] give them some food .\n'), ((2541, (48, 56)), "*FAT:\tyou don't want any more of that delicious broccoli huh ?\n"), ((2566, (36, 42)), '*FAT:\tthanks Mommy that was a great supper !\n')]
calculating accuracy and recall
correct labels:
set(['cantaloupe', 'sandwich', 'lemon', 'salad', 'tootsie roll', 'carrots', 'egg salad', 'candy', 'peas', 'water', 'juice', 'lollipop', 'chocolate broccoli', 'ice cube', 'chocolate cake', 'chicken', 'chocolate', 'broccoli'])
predicted labels:
set(['fish', 'carrots', 'juice', 'shake', 'breakfast', 'chicken', 'lemon', 'sandwiches', 'sandwich', 'lollipops', 'food', 'peas', 'chocolate', 'water', 'lunch', 'supper', 'chocolate cake', 'broccoli', 'salad', 'egg', 'candy', 'dinner', 'dip', 'meal'])
file:HSLLD/HV1/MT//davmt1.cha
precision: 0.5
recall: 0.666666666667
true positives:['broccoli', 'candy', 'carrots', 'chicken', 'chocolate', 'chocolate cake', 'juice', 'lemon', 'peas', 'salad', 'sandwich', 'water']
false positives: ['breakfast', 'dinner', 'dip', 'egg', 'fish', 'food', 'lollipops', 'lunch', 'meal', 'sandwiches', 'shake', 'supper']
false negatives: ['cantaloupe', 'chocolate broccoli', 'egg salad', 'ice cube', 'lollipop', 'tootsie roll']
# true pos: 12
# false pos: 12
# false neg: 6
HSLLD/HV1/MT//raumt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//raumt1.cha
HSLLD/HV1/MT//catmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//catmt1.cha
HSLLD/HV1/MT//admmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
3
candidates to check:
2
candidates to check:
6
descended from food: [['N'], 'peas', 34, 38]
peas
peas peas 116
[('kim', 'NNS'), ('got', 'VBD'), ('lots', 'NNS'), ('of', 'IN'), ('carrots', 'NNS'), ('and', 'CC'), ('peas', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('xxx', 'NN')]
['peas']
('food -> ', [])
carrots
carrots carrots 35
[('kim', 'NNS'), ('got', 'VBD'), ('lots', 'NNS'), ('of', 'IN'), ('carrots', 'NNS'), ('and', 'CC'), ('peas', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('xxx', 'NN')]
['carrots']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
3
beef stew
beef stew beef stew 99
[('adam', 'RB'), ('s', 'VBZ'), ('not', 'RB'), ('gon', 'VB'), ('na', 'TO'), ('eat', 'VB'), ('her', 'PRP$'), ('beef', 'NN'), ('stew', 'NN')]
['beef', 'stew']
('food -> ', [['beef stew', 'Meals, Entrees, and Side Dishes']])
stew
stew stew 32
[('adam', 'RB'), ('s', 'VBZ'), ('not', 'RB'), ('gon', 'VB'), ('na', 'TO'), ('eat', 'VB'), ('her', 'PRP$'), ('beef', 'NN'), ('stew', 'NN')]
['stew']
('food -> ', [['beef stew', 'Meals, Entrees, and Side Dishes'], ['stew', 'American Indian/Alaska Native Foods']])
beef
beef beef 310
[('adam', 'RB'), ('s', 'VBZ'), ('not', 'RB'), ('gon', 'VB'), ('na', 'TO'), ('eat', 'VB'), ('her', 'PRP$'), ('beef', 'NN'), ('stew', 'NN')]
['beef']
('food -> ', [['beef stew', 'Meals, Entrees, and Side Dishes'], ['stew', 'American Indian/Alaska Native Foods']])
candidates to check:
1
carrots
carrots carrots 35
[('see', 'VB'), ('the', 'DT'), ('carrots', 'NNS'), ('in', 'IN'), ('there', 'EX')]
['carrots']
('food -> ', [])
candidates to check:
3
carrots
carrots carrots 35
[('i', 'NN'), ('have', 'VBP'), ('my', 'PRP$'), ('xxx', 'JJ'), ('carrots', 'NNS')]
['carrots']
('food -> ', [])
candidates to check:
2
candidates to check:
1
carrots
carrots carrots 35
[('see', 'VB'), ('if', 'IN'), ('we', 'PRP'), ('can', 'MD'), ('find', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('the', 'DT'), ('carrots', 'NNS'), ('in', 'IN'), ('here', 'RB')]
['carrots']
('food -> ', [])
candidates to check:
1
candidates to check:
2
carrots
carrots carrots 35
[('here', 'RB'), ('you', 'PRP'), ('go', 'VBP'), ('here', 'RB'), ('s', 'RB'), ('some', 'DT'), ('of', 'IN'), ('the', 'DT'), ('carrots', 'NNS'), ('right', 'RB'), ('on', 'IN'), ('top', 'JJ')]
['carrots']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
carrot
carrot carrot 341
[('i', 'NNS'), ('have', 'VBP'), ('a', 'DT'), ('carrot', 'NN'), ('haha', 'NN'), ('x', 'VBD'), ('2', 'CD'), ('singing', 'NN')]
['carrot']
('food -> ', [])
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'butter', 25, 31]
descended from food: [['N'], 'bread', 32, 37]
bread
bread bread 186
[('adam', 'IN'), ('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('butter', 'NN'), ('bread', 'NN')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
butter
butter butter 499
[('adam', 'IN'), ('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('butter', 'NN'), ('bread', 'NN')]
['butter']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
descended from food: [['N'], 'honey', 38, 43]
honey
honey honey 304
[('there', 'EX'), ('s', 'VBZ'), ('no', 'DT'), ('kids', 'NNS'), ('out', 'RP'), ('there', 'RB'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
salt
salt salt 0
[('let', 'VB'), ('me', 'PRP'), ('see', 'VB'), ('the', 'DT'), ('salt', 'NN'), ('and', 'CC'), ('pepper', 'NN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
pepper
pepper pepper 27
[('let', 'VB'), ('me', 'PRP'), ('see', 'VB'), ('the', 'DT'), ('salt', 'NN'), ('and', 'CC'), ('pepper', 'NN')]
['pepper']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
2
descended from food: [['N'], 'butter', 30, 36]
descended from food: [['N'], 'bread', 41, 46]
bread
bread bread 186
[('sure', 'RB'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('butter', 'NN'), ('and', 'CC'), ('bread', 'NN'), ('adam', 'NN')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
butter
butter butter 499
[('sure', 'RB'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('butter', 'NN'), ('and', 'CC'), ('bread', 'NN'), ('adam', 'NN')]
['butter']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'butter', 15, 21]
descended from food: [['N'], 'bread', 22, 27]
bread
bread bread 186
[('you', 'PRP'), ('want', 'VBP'), ('butter', 'JJR'), ('bread', 'NN')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
butter
butter butter 499
[('you', 'PRP'), ('want', 'VBP'), ('butter', 'JJR'), ('bread', 'NN')]
['butter']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
2
descended from food: [['N'], 'bread', 20, 25]
descended from food: [['N'], 'butter', 30, 36]
bread
bread bread 186
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
butter
butter butter 499
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['butter']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
3
descended from food: [['N'], 'bread', 50, 55]
descended from food: [['N'], 'butter', 60, 66]
bread
bread bread 186
[('eat', 'VB'), ('some', 'DT'), ('carrots', 'NNS'), ('on', 'IN'), ('there', 'EX'), ('i', 'JJ'), ('ll', 'VBP'), ('give', 'VB'), ('you', 'PRP'), ('the', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
carrots
carrots carrots 35
[('eat', 'VB'), ('some', 'DT'), ('carrots', 'NNS'), ('on', 'IN'), ('there', 'EX'), ('i', 'JJ'), ('ll', 'VBP'), ('give', 'VB'), ('you', 'PRP'), ('the', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['carrots']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
butter
butter butter 499
[('eat', 'VB'), ('some', 'DT'), ('carrots', 'NNS'), ('on', 'IN'), ('there', 'EX'), ('i', 'JJ'), ('ll', 'VBP'), ('give', 'VB'), ('you', 'PRP'), ('the', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['butter']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'bread', 19, 24]
descended from food: [['N'], 'butter', 29, 35]
bread
bread bread 186
[('there', 'RB'), ('s', 'VB'), ('your', 'PRP$'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN'), ('right', 'RB'), ('there', 'RB')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
butter
butter butter 499
[('there', 'RB'), ('s', 'VB'), ('your', 'PRP$'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN'), ('right', 'RB'), ('there', 'RB')]
['butter']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'potato', 6, 12]
descended from food: [['N'], 'chips', 13, 18]
potato chips
potato chips potato chips 487
[('potato', 'NN'), ('chips', 'NNS'), ('and', 'CC'), ('coke', 'NN')]
['potato', 'chips']
('food -> ', [['potato chips', 'Snacks']])
potato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726b67f830>)
[('potato', 'NN'), ('chips', 'NNS'), ('and', 'CC'), ('coke', 'NN')]
['potato']
('food -> ', [['potato chips', 'Snacks']])
candidates to check:
3
descended from food: [['N'], 'cookie', 18, 24]
descended from food: [['N'], 'cookie', 18, 24]
cookie
cookie cookie 507
[('mommy', 'NN'), ('ate', 'VB'), ('a', 'DT'), ('cookie', 'NN'), ('and', 'CC'), ('i', 'JJ'), ('ate', 'VBP'), ('a', 'DT'), ('cookie', 'NN')]
['cookie']
('food -> ', [])
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'honey', 18, 23]
honey
honey honey 304
[('i', 'NN'), ('ll', 'VBP'), ('eat', 'NN'), ('it', 'PRP'), ('honey', 'VBD')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
descended from food: [['N'], 'bread', 55, 60]
bread
bread bread 186
[('yep', 'NN'), ('alright', 'RB'), ('well', 'RB'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('to', 'TO'), ('skitch', 'VB'), ('f', 'VB'), ('your', 'PRP$'), ('bread', 'NN'), ('in', 'IN'), ('it', 'PRP'), ('just', 'RB'), ('put', 'VBD'), ('it', 'PRP'), ('on', 'IN'), ('the', 'DT'), ('table', 'NN'), ('if', 'IN'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('it', 'PRP'), ('kim', 'VB')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
descended from food: [['N'], 'dinner', 36, 42]
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'chicken', 16, 23]
chicken
chicken chicken 234
[('i', 'NN'), ('have', 'VBP'), ('my', 'PRP$'), ('chicken', 'NN'), ('spices', 'NNS')]
['chicken']
('food -> ', [])
spices
spices spices 312
[('i', 'NN'), ('have', 'VBP'), ('my', 'PRP$'), ('chicken', 'NN'), ('spices', 'NNS')]
['spices']
('food -> ', [])
loading solution set
calculating
set([(196, (25, 37)), (79, (34, 38)), (651, (18, 24)), (869, (16, 23)), (644, (27, 31)), (308, (30, 36)), (115, (21, 28)), (284, (30, 36)), (329, (29, 35)), (121, (48, 55)), (155, (15, 21)), (644, (6, 18)), (79, (22, 29)), (284, (41, 46)), (276, (27, 31)), (810, (55, 60)), (314, (50, 55)), (134, (37, 44)), (276, (36, 42)), (329, (19, 24)), (634, (8, 15)), (314, (60, 66)), (308, (20, 25)), (99, (31, 40)), (651, (37, 43)), (631, (8, 15)), (104, (14, 21)), (305, (15, 27)), (314, (15, 22))])
[((79, (22, 29)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((79, (34, 38)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((99, (31, 40)), "*FAT:\tAdam's not gonna eat her beef stew .\n"), ((104, (14, 21)), '*MOT:\tsee the carrots in there ?\n'), ((115, (21, 28)), '*CHI:\t<I have my xxx carrots> [<] .\n'), ((121, (48, 55)), '*MOT:\tsee if we can <find some more of> [>] the carrots in here .\n'), ((134, (37, 44)), "*MOT:\there you go here's some of the carrots right on top !\n"), ((155, (15, 21)), '*CHI:\tI have a carrot haha [x 2] &=singing .\n'), ((196, (25, 37)), '*MOT:\tAdam you want some butter bread ?\n'), ((276, (27, 31)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((276, (36, 42)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((284, (30, 36)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((284, (41, 46)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((305, (15, 27)), '*MOT:\tyou want butter bread ?\n'), ((308, (20, 25)), '*MOT:\tyou want some bread and butter ?\n'), ((308, (30, 36)), '*MOT:\tyou want some bread and butter ?\n'), ((314, (15, 22)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (50, 55)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (60, 66)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((329, (19, 24)), "*MOT:\tthere's your bread and butter right there .\n"), ((329, (29, 35)), "*MOT:\tthere's your bread and butter right there .\n"), ((631, (8, 15)), '*CHI:\ta brownie .\n'), ((634, (8, 15)), '*CHI:\ta brownie .\n'), ((644, (6, 18)), '*CHI:\tpotato chips (.) and coke .\n'), ((644, (27, 31)), '*CHI:\tpotato chips (.) and coke .\n'), ((651, (18, 24)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((651, (37, 43)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((810, (55, 60)), "*FAT:\tyep alright well you don't have_to skitch@f your bread in it just put it on the table if you don't want it Kim .\n"), ((869, (16, 23)), '*SIS:\tI have my chicken Spices.\n')]
set([(253, (38, 43)), (79, (34, 38)), (651, (18, 24)), (79, (22, 29)), (869, (16, 23)), (308, (30, 36)), (115, (21, 28)), (196, (32, 37)), (284, (30, 36)), (305, (15, 21)), (196, (25, 31)), (329, (29, 35)), (121, (48, 55)), (155, (15, 21)), (644, (6, 18)), (305, (22, 27)), (284, (41, 46)), (276, (27, 31)), (810, (55, 60)), (314, (50, 55)), (134, (37, 44)), (276, (36, 42)), (806, (18, 23)), (329, (19, 24)), (314, (60, 66)), (308, (20, 25)), (99, (31, 40)), (651, (37, 43)), (104, (14, 21)), (314, (15, 22)), (853, (36, 42)), (869, (24, 30))])
[((79, (22, 29)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((79, (34, 38)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((99, (31, 40)), "*FAT:\tAdam's not gonna eat her beef stew .\n"), ((104, (14, 21)), '*MOT:\tsee the carrots in there ?\n'), ((115, (21, 28)), '*CHI:\t<I have my xxx carrots> [<] .\n'), ((121, (48, 55)), '*MOT:\tsee if we can <find some more of> [>] the carrots in here .\n'), ((134, (37, 44)), "*MOT:\there you go here's some of the carrots right on top !\n"), ((155, (15, 21)), '*CHI:\tI have a carrot haha [x 2] &=singing .\n'), ((196, (25, 31)), '*MOT:\tAdam you want some butter bread ?\n'), ((196, (32, 37)), '*MOT:\tAdam you want some butter bread ?\n'), ((253, (38, 43)), "*MOT:\t<there's no kids out> [<] there honey .\n"), ((276, (27, 31)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((276, (36, 42)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((284, (30, 36)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((284, (41, 46)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((305, (15, 21)), '*MOT:\tyou want butter bread ?\n'), ((305, (22, 27)), '*MOT:\tyou want butter bread ?\n'), ((308, (20, 25)), '*MOT:\tyou want some bread and butter ?\n'), ((308, (30, 36)), '*MOT:\tyou want some bread and butter ?\n'), ((314, (15, 22)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (50, 55)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (60, 66)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((329, (19, 24)), "*MOT:\tthere's your bread and butter right there .\n"), ((329, (29, 35)), "*MOT:\tthere's your bread and butter right there .\n"), ((644, (6, 18)), '*CHI:\tpotato chips (.) and coke .\n'), ((651, (18, 24)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((651, (37, 43)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((806, (18, 23)), "*FAT:\tI'll eat it honey .\n"), ((810, (55, 60)), "*FAT:\tyep alright well you don't have_to skitch@f your bread in it just put it on the table if you don't want it Kim .\n"), ((853, (36, 42)), "*MOT:\tAdam if you don't finish your dinner (.) you don't get anything else to eat tonight .\n"), ((869, (16, 23)), '*SIS:\tI have my chicken Spices.\n'), ((869, (24, 30)), '*SIS:\tI have my chicken Spices.\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'pepper', 'potato chips', 'coke', 'carrots', 'butter bread', 'peas', 'brownie', 'carrot', 'cookie', 'chicken', 'salt', 'beef stew', 'bread'])
predicted labels:
set(['butter', 'pepper', 'carrots', 'potato chips', 'peas', 'honey', 'dinner', 'carrot', 'cookie', 'chicken', 'spices', 'salt', 'beef stew', 'bread'])
file:HSLLD/HV1/MT//admmt1.cha
precision: 0.785714285714
recall: 0.785714285714
true positives:['beef stew', 'bread', 'butter', 'carrot', 'carrots', 'chicken', 'cookie', 'peas', 'pepper', 'potato chips', 'salt']
false positives: ['dinner', 'honey', 'spices']
false negatives: ['brownie', 'butter bread', 'coke']
# true pos: 11
# false pos: 3
# false neg: 3
HSLLD/HV1/MT//annmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
6
candidates to check:
6
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
3
sunshine
sunshine sunshine 416
[('you', 'PRP'), ('are', 'VBP'), ('my', 'PRP$'), ('sunshine', 'JJ'), ('my', 'PRP$'), ('only', 'JJ'), ('sunshine', 'NN')]
['sunshine']
('food -> ', [['sunshine', 'Baked Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'honey', 11, 16]
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'meatballs', 29, 38]
meatballs
meatballs meatballs 197
[('bob', 'NN'), ('you', 'PRP'), ('made', 'VBD'), ('good', 'JJ'), ('meatballs', 'NNS')]
['meatballs']
('food -> ', [['meatballs', 'Legumes and Legume Products']])
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'bread', 25, 30]
bread
bread bread 186
[('i', 'JJ'), ('m', 'VBP'), ('gettin', 'JJ'), ('g', 'NN'), ('more', 'RBR'), ('bread', 'NN')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
cherries
cherries cherries 83
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('more', 'JJR'), ('cherries', 'NNS')]
['cherries']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'honey', 11, 16]
descended from food: [['N'], 'supper', 38, 44]
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN'), ('xxx', 'NN'), ('anna', 'IN'), ('finish', 'JJ'), ('your', 'PRP$'), ('supper', 'JJ'), ('please', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'supper', 29, 35]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'honey', 11, 16]
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'tomato', 10, 16]
tomato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726b5228c0>)
[('xxx', 'NN'), ('tomato', 'NN')]
['tomato']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
descended from food: [['N'], 'tea', 25, 28]
tea
tea tea 2
[('who', 'WP'), ('else', 'VBP'), ('gives', 'VBZ'), ('you', 'PRP'), ('tea', 'JJ'), ('parties', 'NNS'), ('at', 'IN'), ('eleven', 'RB'), ('o', 'JJ'), ('clock', 'NN'), ('at', 'IN'), ('night', 'NN'), ('huh', 'NN')]
['tea']
('food -> ', [])
candidates to check:
2
candidates to check:
5
descended from food: [['N'], 'tea', 25, 28]
tea
tea tea 2
[('nana', 'JJ'), ('lets', 'NNS'), ('you', 'PRP'), ('have', 'VBP'), ('tea', 'VBN'), ('parties', 'NNS'), ('at', 'IN'), ('night', 'NN'), ('like', 'IN'), ('i', 'NN'), ('do', 'VBP')]
['tea']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'milk', 11, 15]
milk
milk milk 46
[('the', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 27, 31]
milk
milk milk 46
[('well', 'RB'), ('then', 'RB'), ('it', 'PRP'), ('s', 'VBZ'), ('gross', 'JJ'), ('milk', 'NN'), ('don', 'NN'), ('t', 'NN'), ('buy', 'VB'), ('it', 'PRP'), ('anymore', 'RB')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 19, 23]
milk
milk milk 46
[('no', 'DT'), ('it', 'PRP'), ('s', 'VBZ'), ('skim', 'JJ'), ('milk', 'NN'), ('it', 'PRP'), ('s', 'VBD'), ('good', 'JJ')]
['milk']
('food -> ', [])
candidates to check:
4
descended from food: [['N'], 'milk', 11, 15]
descended from food: [['N'], 'milk', 11, 15]
milk
milk milk 46
[('skim', 'JJ'), ('milk', 'NN'), ('i', 'NN'), ('know', 'VBP'), ('that', 'IN'), ('s', 'VBP'), ('what', 'WP'), ('skim', 'VBP'), ('milk', 'NN'), ('tastes', 'NNS'), ('like', 'IN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'food', 27, 31]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'dessert', 28, 35]
candidates to check:
1
descended from food: [['N'], 'pie', 52, 55]
pie
pie pie 290
[('you', 'PRP'), ('said', 'VBD'), ('you', 'PRP'), ('she', 'PRP'), ('could', 'MD'), ('help', 'VB'), ('you', 'PRP'), ('make', 'VB'), ('the', 'DT'), ('pie', 'NN')]
['pie']
('food -> ', [['pie', 'Baked Products']])
candidates to check:
1
descended from food: [['N'], 'dessert', 66, 73]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'honey', 6, 11]
honey
honey honey 304
[('honey', 'NN'), ('i', 'NN'), ('don', 'VBP'), ('t', 'NN'), ('know', 'VBP'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'WDT'), ('have', 'VBP'), ('the', 'DT'), ('time', 'NN'), ('you', 'PRP'), ('know', 'VBP')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
5
loading solution set
calculating
set([(183, (25, 30)), (226, (27, 35)), (655, (27, 31)), (640, (11, 15)), (734, (52, 55)), (166, (29, 38)), (667, (35, 44)), (384, (10, 16)), (662, (14, 23)), (667, (6, 15))])
[((166, (29, 38)), '*CHI:\t(..) Bob you made good meatballs .\n'), ((183, (25, 30)), "*CHI:\tI'm gettin(g) more bread .\n"), ((226, (27, 35)), '*CHI:\t(..) can I have more cherries ?\n'), ((384, (10, 16)), '*CHI:\txxx tomato .\n'), ((640, (11, 15)), '*MOT:\t<the milk> [<] ?\n'), ((655, (27, 31)), "*MA1:\twell then it's gross milk don't buy it anymore .\n"), ((662, (14, 23)), "*MOT:\tno it's skim milk it's good !\n"), ((667, (6, 15)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((667, (35, 44)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((734, (52, 55)), '*MA1:\tyou said you [//] she could help you make the pie .\n')]
set([(183, (25, 30)), (111, (40, 48)), (655, (27, 31)), (230, (11, 16)), (667, (40, 44)), (230, (38, 44)), (241, (29, 35)), (384, (10, 16)), (111, (18, 26)), (226, (27, 35)), (166, (29, 38)), (739, (66, 73)), (662, (19, 23)), (667, (11, 15)), (147, (11, 16)), (734, (52, 55)), (798, (6, 11)), (469, (25, 28)), (728, (28, 35)), (313, (11, 16)), (640, (11, 15)), (460, (25, 28)), (681, (27, 31))])
[((111, (18, 26)), '*CHI:\t<you are my sunshine my> [<] only sunshine .\n'), ((111, (40, 48)), '*CHI:\t<you are my sunshine my> [<] only sunshine .\n'), ((147, (11, 16)), '*FE1:\twhat honey ?\n'), ((166, (29, 38)), '*CHI:\t(..) Bob you made good meatballs .\n'), ((183, (25, 30)), "*CHI:\tI'm gettin(g) more bread .\n"), ((226, (27, 35)), '*CHI:\t(..) can I have more cherries ?\n'), ((230, (11, 16)), '*MOT:\twhat honey xxx Anna finish your supper please .\n'), ((230, (38, 44)), '*MOT:\twhat honey xxx Anna finish your supper please .\n'), ((241, (29, 35)), '*MOT:\tafter [!] you eat your supper .\n'), ((313, (11, 16)), '*FE1:\twhat honey ?\n'), ((384, (10, 16)), '*CHI:\txxx tomato .\n'), ((460, (25, 28)), "*MOT:\twho else gives you tea parties at eleven o'clock at night huh ?\n"), ((469, (25, 28)), '*MOT:\tNana lets you have tea parties at night like I do ?\n'), ((640, (11, 15)), '*MOT:\t<the milk> [<] ?\n'), ((655, (27, 31)), "*MA1:\twell then it's gross milk don't buy it anymore .\n"), ((662, (19, 23)), "*MOT:\tno it's skim milk it's good !\n"), ((667, (11, 15)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((667, (40, 44)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((681, (27, 31)), "*MOT:\tlike it's a <kind of food or somethin(g)> [>] .\n"), ((728, (28, 35)), '*CHI:\tyou said I could have dessert .\n'), ((734, (52, 55)), '*MA1:\tyou said you [//] she could help you make the pie .\n'), ((739, (66, 73)), "*MOT:\twell I didn't make it though did I so there obviously is no dessert then if I did not make it !\n"), ((798, (6, 11)), "*MOT:\thoney I don't know (.) I don't have the time you know ?\n")]
calculating accuracy and recall
correct labels:
set(['tomato', 'skim milk', 'meatballs', 'pie', 'cherries', 'milk', 'bread'])
predicted labels:
set(['tomato', 'food', 'tea', 'sunshine', 'meatballs', 'pie', 'honey', 'cherries', 'dessert', 'supper', 'milk', 'bread'])
file:HSLLD/HV1/MT//annmt1.cha
precision: 0.5
recall: 0.857142857143
true positives:['bread', 'cherries', 'meatballs', 'milk', 'pie', 'tomato']
false positives: ['dessert', 'food', 'honey', 'sunshine', 'supper', 'tea']
false negatives: ['skim milk']
# true pos: 6
# false pos: 6
# false neg: 1
HSLLD/HV1/MT//jammt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jammt1.cha
HSLLD/HV1/MT//vicmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//vicmt1.cha
HSLLD/HV1/MT//stnmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//stnmt1.cha
HSLLD/HV1/MT//jeamt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jeamt1.cha
HSLLD/HV1/MT//astmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//astmt1.cha
HSLLD/HV1/MT//casmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
5
descended from food: [['N'], 'milk', 25, 29]
descended from food: [['N'], 'pepsi', -1, 4]
descended from food: [['N'], 'milk', 25, 29]
milk
milk milk 46
[('xxx', 'NN'), ('when', 'WRB'), ('they', 'PRP'), ('need', 'VBP'), ('milk', 'NN'), ('they', 'PRP'), ('mix', 'VBP'), ('pepsi', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'pepsi', -1, 4]
descended from food: [['N'], 'milk', 23, 27]
milk
milk milk 46
[('xxx', 'JJ'), ('pepsi', 'NN'), ('in', 'IN'), ('the', 'DT'), ('milk', 'NN'), ('get', 'VB'), ('it', 'PRP')]
['milk']
('food -> ', [])
candidates to check:
3
candidates to check:
5
descended from food: [['N'], 'candy', 31, 36]
popcorn
popcorn popcorn 429
[('i', 'NN'), ('got', 'VBD'), ('popcorn', 'JJ'), ('and', 'CC'), ('cotton', 'NN'), ('candy', 'NN')]
['popcorn']
('food -> ', [['popcorn', 'Snacks']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
popcorn
popcorn popcorn 429
[('the', 'DT'), ('popcorn', 'NN'), ('was', 'VBD'), ('a', 'DT'), ('dollar', 'NN')]
['popcorn']
('food -> ', [['popcorn', 'Snacks']])
candidates to check:
4
descended from food: [['N'], 'candy', 21, 26]
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'candy', 39, 44]
candidates to check:
6
descended from food: [['N'], 'candy', 24, 29]
candidates to check:
4
descended from food: [['N'], 'candy', 20, 25]
candidates to check:
1
descended from food: [['N'], 'sugar', 21, 26]
sugar
sugar sugar 399
[('it', 'PRP'), ('s', 'VBZ'), ('all', 'DT'), ('sugar', 'NN'), ('it', 'PRP'), ('s', 'VBZ'), ('not', 'RB'), ('good', 'JJ'), ('for', 'IN'), ('you', 'PRP')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
7
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
water
water water 18
[('the', 'DT'), ('stuff', 'NN'), ('didn', 'NN'), ('t', 'NN'), ('come', 'VBP'), ('out', 'IN'), ('like', 'IN'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'tomatoes', 31, 39]
tomatoes
tomatoes tomatoes 213
[('hey', 'NN'), ('where', 'WRB'), ('s', 'NN'), ('my', 'PRP$'), ('xxx', 'NN'), ('tomatoes', 'NNS')]
['tomatoes']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'potatoes', 6, 14]
potatoes
potatoes potatoes 62
[('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'tomatoes', 32, 40]
tomatoes
tomatoes tomatoes 213
[('no', 'DT'), ('casey', 'NN'), ('there', 'RB'), ('wasn', 'JJ'), ('t', 'NN'), ('any', 'DT'), ('tomatoes', 'NNS'), ('left', 'VBD')]
['tomatoes']
('food -> ', [])
candidates to check:
5
descended from food: [['N'], 'honey', 21, 26]
descended from food: [['N'], 'salad', 36, 41]
honey
honey honey 304
[('there', 'EX'), ('was', 'VBD'), ('none', 'NN'), ('honey', 'NN'), ('for', 'IN'), ('the', 'DT'), ('salad', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
5
descended from food: [['N'], 'tomato', 53, 59]
tomato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726b40f710>)
[('i', 'NN'), ('ll', 'VBD'), ('go', 'VBP'), ('shopping', 'NN'), ('tomorrow', 'NN'), ('and', 'CC'), ('i', 'NN'), ('ll', 'VBP'), ('get', 'VB'), ('you', 'PRP'), ('one', 'CD'), ('tomato', 'NN'), ('okay', 'NN')]
['tomato']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'tomatoes', 54, 62]
tomatoes
tomatoes tomatoes 213
[('i', 'NN'), ('know', 'VBP'), ('that', 'IN'), ('s', 'VBP'), ('one', 'CD'), ('of', 'IN'), ('your', 'PRP$'), ('favorites', 'NNS'), ('right', 'RB'), ('casey', 'NN'), ('tomatoes', 'NNS')]
['tomatoes']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'fries', 13, 18]
candidates to check:
1
descended from food: [['N'], 'salad', 11, 16]
candidates to check:
1
descended from food: [['N'], 'vegetable', 8, 17]
vegetable
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726b421680>)
[('a', 'DT'), ('vegetable', 'JJ')]
['vegetable']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'croutons', 6, 14]
croutons
croutons croutons 465
[('croutons', 'NNS')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
1
descended from food: [['N'], 'croutons', 6, 14]
croutons
croutons croutons 465
[('croutons', 'NNS')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
1
descended from food: [['N'], 'vegetables', 18, 28]
vegetables
vegetables vegetables 37
[('they', 'PRP'), ('re', 'VBP'), ('not', 'RB'), ('vegetables', 'NNS')]
['vegetables']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'salads', 20, 26]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
doughnuts
doughnuts doughnuts 403
[('it', 'PRP'), ('was', 'VBD'), ('just', 'RB'), ('like', 'JJ'), ('doughnuts', 'NNS'), ('like', 'IN'), ('except', 'IN'), ('the', 'DT'), ('xxx', 'NNP'), ('really', 'RB'), ('taste', 'VBP'), ('like', 'IN'), ('doughnuts', 'NNS'), ('they', 'PRP'), ('were', 'VBD'), ('xxx', 'NNP'), ('they', 'PRP'), ('was', 'VBD'), ('and', 'CC'), ('the', 'DT'), ('light', 'NN'), ('was', 'VBD'), ('in', 'IN'), ('it', 'PRP')]
['doughnuts']
('food -> ', [['doughnuts', 'Baked Products']])
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
corn
corn corn 419
[('eat', 'VB'), ('your', 'PRP$'), ('corn', 'NN'), ('brian', 'NN')]
['corn']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'croutons', 33, 41]
croutons
croutons croutons 465
[('you', 'PRP'), ('re', 'VBP'), ('going', 'VBG'), ('to', 'TO'), ('get', 'VB'), ('in', 'IN'), ('the', 'DT'), ('croutons', 'NNS'), ('brian', 'VBP')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
2
corn
corn corn 419
[('the', 'DT'), ('corn', 'NN'), ('eat', 'VB'), ('your', 'PRP$'), ('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'croutons', 6, 14]
croutons
croutons croutons 465
[('croutons', 'NNS')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
1
descended from food: [['N'], 'croutons', 36, 44]
croutons
croutons croutons 465
[('brian', 'NN'), ('will', 'MD'), ('you', 'PRP'), ('give', 'VB'), ('the', 'DT'), ('croutons', 'NNS'), ('to', 'TO'), ('me', 'PRP')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'salad', 32, 37]
candidates to check:
3
descended from food: [['N'], 'salad', 46, 51]
candidates to check:
2
candidates to check:
1
corn
corn corn 419
[('eat', 'NN'), ('the', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
7
descended from food: [['N'], 'crackers', 39, 47]
descended from food: [['N'], 'crackers', 39, 47]
crackers
crackers crackers 453
[('the', 'DT'), ('fire', 'NN'), ('the', 'DT'), ('fire', 'NN'), ('crackers', 'VBZ'), ('the', 'DT'), ('fire', 'NN'), ('crackers', 'NNS'), ('were', 'VBD')]
['crackers']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
5
duck
duck duck 84
[('i', 'NN'), ('didn', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('to', 'TO'), ('duck', 'VB'), ('to', 'TO'), ('follow', 'VB'), ('rockets', 'NNS'), ('like', 'IN'), ('you', 'PRP'), ('guys', 'VBP')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
6
descended from food: [['N'], 'crackers', 48, 56]
crackers
crackers crackers 453
[('when', 'WRB'), ('you', 'PRP'), ('see', 'VBP'), ('when', 'WRB'), ('you', 'PRP'), ('see', 'VBP'), ('two', 'CD'), ('fire', 'NN'), ('crackers', 'NNS'), ('come', 'VBP'), ('out', 'IN'), ('of', 'IN'), ('these', 'DT'), ('kids', 'NNS'), ('hands', 'NNS')]
['crackers']
('food -> ', [])
candidates to check:
6
descended from food: [['N'], 'crackers', 16, 24]
crackers
crackers crackers 453
[('the', 'DT'), ('fire', 'NN'), ('crackers', 'VBZ'), ('the', 'DT'), ('firecrackers', 'NNS'), ('were', 'VBD'), ('going', 'VBG'), ('all', 'DT'), ('over', 'IN'), ('the', 'DT'), ('place', 'NN'), ('they', 'PRP'), ('were', 'VBD'), ('firing', 'VBG'), ('they', 'PRP'), ('were', 'VBD'), ('firing', 'VBG'), ('in', 'IN'), ('the', 'DT'), ('grass', 'NN')]
['crackers']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'beers', 35, 40]
descended from food: [['N'], 'beers', 35, 40]
descended from food: [['N'], 'beers', 35, 40]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'booze', 6, 11]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
loading solution set
calculating
set([(641, (33, 41)), (446, (20, 26)), (697, (14, 18)), (176, (37, 42)), (17, (25, 29)), (26, (10, 15)), (73, (10, 17)), (52, (12, 19)), (428, (6, 18)), (689, (46, 51)), (654, (6, 14)), (17, (52, 56)), (354, (6, 14)), (119, (13, 25)), (125, (21, 26)), (440, (6, 14)), (17, (39, 44)), (377, (21, 26)), (437, (6, 14)), (481, (71, 80)), (647, (30, 34)), (52, (24, 36)), (343, (31, 39)), (407, (54, 62)), (364, (32, 40)), (443, (18, 28)), (819, (35, 40)), (677, (36, 44)), (26, (23, 27)), (392, (53, 59)), (819, (49, 54)), (481, (23, 32)), (593, (15, 19))])
[((17, (25, 29)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (39, 44)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (52, 56)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((26, (10, 15)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((26, (23, 27)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((52, (12, 19)), '*BRI:\tI got popcorn and cotton candy .\n'), ((52, (24, 36)), '*BRI:\tI got popcorn and cotton candy .\n'), ((73, (10, 17)), '*BRI:\tthe popcorn was a dollar .\n'), ((119, (13, 25)), '*CHI:\tI love cotton candy .\n'), ((125, (21, 26)), "*MOT:\t<it's> [<] all sugar it's not good for you .\n"), ((176, (37, 42)), "*BRI:\tthe stuff didn't come out like water .\n"), ((343, (31, 39)), "*CHI:\t<hey where's> [<] my xxx tomatoes ?\n"), ((354, (6, 14)), '*CHI:\tpotatoes [>] ?\n'), ((364, (32, 40)), "*MOT:\tno Casey there wasn't any tomatoes left .\n"), ((377, (21, 26)), '*MOT:\tthere was none honey for <the salad> [>] .\n'), ((392, (53, 59)), "*MOT:\tI'll go shopping tomorrow and I'll get you one tomato okay ?\n"), ((407, (54, 62)), "*MOT:\tI know that's one of your favorites right Casey tomatoes ?\n"), ((428, (6, 18)), '*MOT:\tfrench fries .\n'), ((437, (6, 14)), '*BRI:\tcroutons [?] .\n'), ((440, (6, 14)), '*MOT:\tcroutons .\n'), ((443, (18, 28)), "*MOT:\tthey're not vegetables .\n"), ((446, (20, 26)), '*MOT:\tthey go on in salads then .\n'), ((481, (23, 32)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((481, (71, 80)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((593, (15, 19)), '*FAT:\teat your corn Brian .\n'), ((641, (33, 41)), "*FAT:\tyou're going to get in the croutons Brian .\n"), ((647, (30, 34)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((654, (6, 14)), '*FAT:\tcroutons .\n'), ((677, (36, 44)), '*CHI:\t<Brian> [<] will you give the croutons to me ?\n'), ((689, (46, 51)), "*FAT:\tyou know a whole bunch there that's the salad .\n"), ((697, (14, 18)), '*FAT:\teat the corn .\n'), ((819, (35, 40)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n'), ((819, (49, 54)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n')]
set([(641, (33, 41)), (446, (20, 26)), (697, (14, 18)), (176, (37, 42)), (109, (24, 29)), (17, (25, 29)), (727, (39, 47)), (727, (63, 71)), (52, (31, 36)), (677, (36, 44)), (103, (39, 44)), (52, (12, 19)), (689, (46, 51)), (654, (6, 14)), (17, (52, 56)), (354, (6, 14)), (73, (10, 17)), (751, (23, 27)), (481, (23, 32)), (647, (11, 15)), (17, (-1, 4)), (79, (21, 26)), (125, (21, 26)), (841, (6, 11)), (26, (-1, 4)), (377, (21, 26)), (775, (16, 24)), (431, (11, 16)), (428, (13, 18)), (593, (15, 19)), (647, (30, 34)), (685, (32, 37)), (407, (54, 62)), (119, (20, 25)), (343, (31, 39)), (377, (36, 41)), (364, (32, 40)), (443, (18, 28)), (819, (35, 40)), (440, (6, 14)), (437, (6, 14)), (26, (23, 27)), (392, (53, 59)), (434, (8, 17)), (770, (48, 56)), (481, (71, 80)), (775, (38, 46))])
[((17, (-1, 4)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (25, 29)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (52, 56)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((26, (-1, 4)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((26, (23, 27)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((52, (12, 19)), '*BRI:\tI got popcorn and cotton candy .\n'), ((52, (31, 36)), '*BRI:\tI got popcorn and cotton candy .\n'), ((73, (10, 17)), '*BRI:\tthe popcorn was a dollar .\n'), ((79, (21, 26)), '*BRI:\tand the cotton candy was a dollar .\n'), ((103, (39, 44)), "*MOT:\tyou think you'd be with all that candy .\n"), ((109, (24, 29)), '*CHI:\tI love [!] cotton candy when I go to the circus with the xxx act and everything .\n'), ((119, (20, 25)), '*CHI:\tI love cotton candy .\n'), ((125, (21, 26)), "*MOT:\t<it's> [<] all sugar it's not good for you .\n"), ((176, (37, 42)), "*BRI:\tthe stuff didn't come out like water .\n"), ((343, (31, 39)), "*CHI:\t<hey where's> [<] my xxx tomatoes ?\n"), ((354, (6, 14)), '*CHI:\tpotatoes [>] ?\n'), ((364, (32, 40)), "*MOT:\tno Casey there wasn't any tomatoes left .\n"), ((377, (21, 26)), '*MOT:\tthere was none honey for <the salad> [>] .\n'), ((377, (36, 41)), '*MOT:\tthere was none honey for <the salad> [>] .\n'), ((392, (53, 59)), "*MOT:\tI'll go shopping tomorrow and I'll get you one tomato okay ?\n"), ((407, (54, 62)), "*MOT:\tI know that's one of your favorites right Casey tomatoes ?\n"), ((428, (13, 18)), '*MOT:\tfrench fries .\n'), ((431, (11, 16)), '*MOT:\tin a salad ?\n'), ((434, (8, 17)), '*MOT:\ta vegetable ?\n'), ((437, (6, 14)), '*BRI:\tcroutons [?] .\n'), ((440, (6, 14)), '*MOT:\tcroutons .\n'), ((443, (18, 28)), "*MOT:\tthey're not vegetables .\n"), ((446, (20, 26)), '*MOT:\tthey go on in salads then .\n'), ((481, (23, 32)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((481, (71, 80)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((593, (15, 19)), '*FAT:\teat your corn Brian .\n'), ((641, (33, 41)), "*FAT:\tyou're going to get in the croutons Brian .\n"), ((647, (11, 15)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((647, (30, 34)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((654, (6, 14)), '*FAT:\tcroutons .\n'), ((677, (36, 44)), '*CHI:\t<Brian> [<] will you give the croutons to me ?\n'), ((685, (32, 37)), "*MOT:\tyou're the one who wanted salad .\n"), ((689, (46, 51)), "*FAT:\tyou know a whole bunch there that's the salad .\n"), ((697, (14, 18)), '*FAT:\teat the corn .\n'), ((727, (39, 47)), '*CHI:\t<the fire> [<][>] [//] <the fire crackers> [//] the fire crackers were [/] .\n'), ((727, (63, 71)), '*CHI:\t<the fire> [<][>] [//] <the fire crackers> [//] the fire crackers were [/] .\n'), ((751, (23, 27)), "*FAT:\tI didn't have_to duck to follow rockets [?] like you guys .\n"), ((770, (48, 56)), '*FAT:\t<when you see> [/] <when you see two fire crackers [?]> [>] come out of these kids hands [?] +...\n'), ((775, (16, 24)), '*CHI:\t<the fire crackers> [<] the firecrackers were going all over the place <they were firing> [/] they were firing <in the grass> [>] .\n'), ((775, (38, 46)), '*CHI:\t<the fire crackers> [<] the firecrackers were going all over the place <they were firing> [/] they were firing <in the grass> [>] .\n'), ((819, (35, 40)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n'), ((841, (6, 11)), '*FAT:\tbooze Brian (.) .\n')]
calculating accuracy and recall
correct labels:
set(['tomato', 'honey', 'salad', 'corn', 'potatoes', 'cotton candy', 'vegetables', 'doughnuts', 'french fries', 'sugar', 'water', 'croutons', 'beers', 'pepsi', 'popcorn', 'salads', 'milk', 'tomatoes'])
predicted labels:
set(['', 'doughnuts', 'honey', 'booze', 'duck', 'salads', 'milk', 'vegetables', 'sugar', 'vegetable', 'croutons', 'tomatoes', 'corn', 'water', 'beers', 'tomato', 'salad', 'potatoes', 'fries', 'candy', 'popcorn', 'crackers'])
file:HSLLD/HV1/MT//casmt1.cha
precision: 0.681818181818
recall: 0.833333333333
true positives:['beers', 'corn', 'croutons', 'doughnuts', 'honey', 'milk', 'popcorn', 'potatoes', 'salad', 'salads', 'sugar', 'tomato', 'tomatoes', 'vegetables', 'water']
false positives: ['', 'booze', 'candy', 'crackers', 'duck', 'fries', 'vegetable']
false negatives: ['cotton candy', 'french fries', 'pepsi']
# true pos: 15
# false pos: 7
# false neg: 3
HSLLD/HV1/MT//mitmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//mitmt1.cha
HSLLD/HV1/MT//devmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//devmt1.cha
HSLLD/HV1/MT//monmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//monmt1.cha
HSLLD/HV1/MT//jebmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jebmt1.cha
HSLLD/HV1/MT//jesmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jesmt1.cha
HSLLD/HV1/MT//megmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//megmt1.cha
HSLLD/HV1/MT//zenmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//zenmt1.cha
HSLLD/HV1/MT//bramt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'butter', 16, 22]
descended from food: [['N'], 'margarine', 26, 35]
margarine
margarine margarine 717
[('you', 'PRP'), ('want', 'VBP'), ('butter', 'NN'), ('or', 'CC'), ('margarine', 'NN')]
['margarine']
('food -> ', [])
butter
butter butter 499
[('you', 'PRP'), ('want', 'VBP'), ('butter', 'NN'), ('or', 'CC'), ('margarine', 'NN')]
['butter']
('food -> ', [])
candidates to check:
6
candidates to check:
1
descended from food: [['N'], 'butter', 6, 12]
butter
butter butter 499
[('butter', 'NN'), ('please', 'NN')]
['butter']
('food -> ', [])
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'butter', 7, 13]
butter
butter butter 499
[('butter', 'NN'), ('xxx', 'NN')]
['butter']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'butter', 51, 57]
butter
butter butter 499
[('oh', 'IN'), ('no', 'DT'), ('i', 'NN'), ('like', 'IN'), ('m', 'NN'), ('i', 'NN'), ('don', 'VBP'), ('t', 'NN'), ('like', 'IN'), ('my', 'PRP$'), ('butter', 'NN'), ('that', 'WDT'), ('has', 'VBZ'), ('been', 'VBN'), ('left', 'VBN'), ('open', 'JJ'), ('like', 'IN'), ('that', 'DT'), ('thank', 'NN'), ('you', 'PRP'), ('very', 'RB'), ('much', 'RB')]
['butter']
('food -> ', [])
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'catsup', 16, 22]
catsup
catsup catsup 101
[('you', 'PRP'), ('want', 'VBP'), ('catsup', 'NNS')]
['catsup']
('food -> ', [['catsup', 'Vegetables and Vegetable Products']])
candidates to check:
3
fish
fish fish 305
[('on', 'IN'), ('your', 'PRP$'), ('fish', 'JJ'), ('cakes', 'NNS')]
['fish']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'juice', 6, 11]
juice
juice juice 52
[('juice', 'NN'), ('me', 'PRP'), ('me', 'PRP')]
['juice']
('food -> ', [])
candidates to check:
1
bread
bread bread 186
[('um', 'IN'), ('the', 'DT'), ('brown', 'JJ'), ('bread', 'NN'), ('s', 'NN'), ('in', 'IN'), ('there', 'EX')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'supper', 15, 21]
candidates to check:
2
descended from food: [['N'], 'supper', 24, 30]
candidates to check:
2
descended from food: [['N'], 'lunch', 19, 24]
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'supper', 21, 27]
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
3
descended from food: [['N'], 'sauce', 46, 51]
tartar sauce
tartar sauce tartar sauce 211
[('brad', 'NN'), ('made', 'VBD'), ('helped', 'VBD'), ('make', 'VB'), ('the', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['tartar', 'sauce']
('food -> ', [['tartar sauce', 'Soups, Sauces, and Gravies']])
sauce
sauce sauce 29
[('brad', 'NN'), ('made', 'VBD'), ('helped', 'VBD'), ('make', 'VB'), ('the', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['sauce']
('food -> ', [['tartar sauce', 'Soups, Sauces, and Gravies']])
candidates to check:
2
descended from food: [['N'], 'mayonnaise', 14, 24]
mayonnaise
mayonnaise mayonnaise 231
[('all', 'PDT'), ('the', 'DT'), ('mayonnaise', 'NN'), ('in', 'IN'), ('the', 'DT'), ('jar', 'NN')]
['mayonnaise']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN'), ('first', 'RB')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 11, 16]
juice
juice juice 52
[('then', 'RB'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'butter', 20, 26]
butter
butter butter 499
[('perhaps', 'RB'), ('i', 'JJ'), ('ll', 'VBP'), ('butter', 'VB'), ('your', 'PRP$'), ('piece', 'NN')]
['butter']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'juice', 12, 17]
juice
juice juice 52
[('first', 'RB'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'beans', 20, 25]
beans
beans beans 105
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('beans', 'NNS')]
['beans']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 10, 15]
juice
juice juice 52
[('the', 'DT'), ('juice', 'NN'), ('first', 'RB')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'beans', 20, 25]
beans
beans beans 105
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('beans', 'NNS')]
['beans']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 6, 11]
juice
juice juice 52
[('juice', 'NN'), ('please', 'NN')]
['juice']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'juice', 14, 19]
juice
juice juice 52
[('enough', 'JJ'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
descended from food: [['N'], 'tomatoes', 6, 14]
tomatoes
tomatoes tomatoes 213
[('tomatoes', 'NNS')]
['tomatoes']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
descended from food: [['N'], 'sauce', 21, 26]
tartar sauce
tartar sauce tartar sauce 211
[('oh', 'UH'), ('this', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['tartar', 'sauce']
('food -> ', [['tartar sauce', 'Soups, Sauces, and Gravies']])
sauce
sauce sauce 29
[('oh', 'UH'), ('this', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['sauce']
('food -> ', [['tartar sauce', 'Soups, Sauces, and Gravies']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'candy', 18, 23]
candidates to check:
1
descended from food: [['N'], 'candy', 17, 22]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
fish
fish fish 305
[('you', 'PRP'), ('want', 'VBP'), ('me', 'PRP'), ('to', 'TO'), ('cut', 'VB'), ('your', 'PRP$'), ('fish', 'JJ'), ('cake', 'NN')]
['fish']
('food -> ', [])
cake
cake cake 412
[('you', 'PRP'), ('want', 'VBP'), ('me', 'PRP'), ('to', 'TO'), ('cut', 'VB'), ('your', 'PRP$'), ('fish', 'JJ'), ('cake', 'NN')]
['cake']
('food -> ', [['cake', 'Baked Products']])
candidates to check:
1
descended from food: [['N'], 'beans', 23, 28]
beans
beans beans 105
[('did', 'VBD'), ('you', 'PRP'), ('eat', 'VB'), ('some', 'DT'), ('beans', 'NNS')]
['beans']
('food -> ', [])
candidates to check:
3
candidates to check:
2
descended from food: [['N'], 'bread', 36, 41]
bread
bread bread 186
[('you', 'PRP'), ('want', 'VBP'), ('me', 'PRP'), ('to', 'TO'), ('cut', 'VB'), ('your', 'PRP$'), ('brown', 'JJ'), ('bread', 'NN')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
3
fish
fish fish 305
[('okay', 'NN'), ('i', 'NN'), ('cut', 'VBD'), ('one', 'CD'), ('fish', 'NN'), ('stick', 'NN'), ('xxx', 'NN')]
['fish']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
rolls
rolls rolls 276
[('a', 'DT'), ('couple', 'NN'), ('of', 'IN'), ('times', 'NNS'), ('he', 'PRP'), ('fell', 'VBD'), ('and', 'CC'), ('rolls', 'NNS')]
['rolls']
('food -> ', [['rolls', 'Baked Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
8
candidates to check:
2
descended from food: [['N'], 'grapes', 38, 44]
grapes
grapes grapes 76
[('looked', 'VBN'), ('like', 'IN'), ('a', 'DT'), ('bunch', 'NN'), ('of', 'IN'), ('concord', 'NN'), ('grapes', 'NNS')]
['grapes']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
fish
fish fish 305
[('i', 'NN'), ('want', 'VBP'), ('to', 'TO'), ('go', 'VB'), ('to', 'TO'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [])
candidates to check:
5
fish
fish fish 305
[('did', 'VBD'), ('you', 'PRP'), ('see', 'VB'), ('the', 'DT'), ('fish', 'JJ'), ('man', 'NN'), ('go', 'VBP'), ('home', 'NN')]
['fish']
('food -> ', [])
candidates to check:
3
fish
fish fish 305
[('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('to', 'TO'), ('go', 'VB'), ('to', 'TO'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
fish
fish fish 305
[('we', 'PRP'), ('can', 'MD'), ('we', 'PRP'), ('can', 'MD'), ('run', 'VB'), ('to', 'TO'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
bear
bear bear 130
[('brad', 'NN'), ('should', 'MD'), ('get', 'VB'), ('out', 'RP'), ('his', 'PRP$'), ('berenstein', 'NN'), ('bear', 'IN'), ('oh', 'JJ'), ('i', 'NN'), ('m', 'VBP'), ('going', 'VBG'), ('t', 'NN'), ('a', 'DT'), ('have', 'VBP'), ('to', 'TO'), ('let', 'VB'), ('ma', 'PRP'), ('read', 'VB'), ('it', 'PRP'), ('and', 'CC'), ('that', 'IN'), ('ll', 'NN'), ('tell', 'VB'), ('her', 'PRP$'), ('what', 'WP'), ('thunder', 'NN'), ('is', 'VBZ'), ('huh', 'JJ')]
['bear']
('food -> ', [['bear', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
6
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'milk', 52, 56]
milk
milk milk 46
[('i', 'JJ'), ('m', 'VBP'), ('all', 'DT'), ('i', 'JJ'), ('m', 'VBP'), ('all', 'DT'), ('done', 'VBN'), ('though', 'IN'), ('i', 'NN'), ('want', 'VBP'), ('some', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'milk', 18, 22]
milk
milk milk 46
[('here', 'RB'), ('s', 'VB'), ('your', 'PRP$'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
honey
honey honey 304
[('well', 'RB'), ('honey', 'NN'), ('i', 'NN'), ('don', 'VBP'), ('t', 'JJ'), ('think', 'VBP'), ('we', 'PRP'), ('should', 'MD'), ('go', 'VB')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
3
fish
fish fish 305
[('yyy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [])
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'dinner', 62, 68]
descended from food: [['N'], 'candy', 98, 103]
candidates to check:
5
descended from food: [['N'], 'candy', 21, 26]
candidates to check:
5
cream
cream cream 72
[('mommy', 'NN'), ('i', 'NN'), ('m', 'VBP'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('mommy', 'NN'), ('i', 'NN'), ('m', 'VBP'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
7
cream
cream cream 72
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN'), ('bar', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream bar
ice cream bar ice cream bar 303
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN'), ('bar', 'NN')]
['ice', 'cream', 'bar']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN'), ('bar', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
2
candidates to check:
3
cream
cream cream 72
[('want', 'VB'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('too', 'RB')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('want', 'VB'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('too', 'RB')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
3
cream
cream cream 72
[('ice', 'NN'), ('cream', 'NN'), ('is', 'VBZ'), ('better', 'RBR')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('ice', 'NN'), ('cream', 'NN'), ('is', 'VBZ'), ('better', 'RBR')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
4
cream
cream cream 72
[('ma', 'NN'), ('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('ma', 'NN'), ('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
1
descended from food: [['N'], 'candy', 14, 19]
candidates to check:
1
descended from food: [['N'], 'candy', 18, 23]
candidates to check:
6
cream
cream cream 72
[('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('fish', 'JJ'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
fish
fish fish 305
[('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('fish', 'JJ'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['fish']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('fish', 'JJ'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
1
descended from food: [['N'], 'candy', 9, 14]
candidates to check:
1
candidates to check:
4
fish
fish fish 305
[('ma', 'NN'), ('you', 'PRP'), ('wan', 'VBP'), ('t', 'RB'), ('go', 'VBP'), ('to', 'TO'), ('the', 'DT'), ('fish', 'JJ'), ('store', 'NN'), ('with', 'IN'), ('me', 'PRP'), ('and', 'CC'), ('my', 'PRP$'), ('mama', 'NN')]
['fish']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
7
water
water water 18
[('um', 'JJ'), ('mommy', 'NN'), ('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('bring', 'NN'), ('my', 'PRP$'), ('new', 'JJ'), ('water', 'NN'), ('gun', 'NN'), ('to', 'TO'), ('the', 'DT'), ('preschool', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'honey', -1, 4]
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
6
descended from food: [['N'], 'candy', 57, 62]
cream
cream cream 72
[('do', 'VB'), ('you', 'PRP'), ('wan', 'VB'), ('t', 'JJ'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('i', 'JJ'), ('won', 'VBD'), ('t', 'JJ'), ('get', 'NN'), ('candy', 'NN'), ('and', 'CC'), ('i', 'NN'), ('ll', 'VBP'), ('get', 'VB'), ('just', 'RB'), ('ice', 'JJ'), ('cream', 'NN'), ('or', 'CC'), ('cake', 'VB')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('do', 'VB'), ('you', 'PRP'), ('wan', 'VB'), ('t', 'JJ'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('i', 'JJ'), ('won', 'VBD'), ('t', 'JJ'), ('get', 'NN'), ('candy', 'NN'), ('and', 'CC'), ('i', 'NN'), ('ll', 'VBP'), ('get', 'VB'), ('just', 'RB'), ('ice', 'JJ'), ('cream', 'NN'), ('or', 'CC'), ('cake', 'VB')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
cake
cake cake 412
[('do', 'VB'), ('you', 'PRP'), ('wan', 'VB'), ('t', 'JJ'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('i', 'JJ'), ('won', 'VBD'), ('t', 'JJ'), ('get', 'NN'), ('candy', 'NN'), ('and', 'CC'), ('i', 'NN'), ('ll', 'VBP'), ('get', 'VB'), ('just', 'RB'), ('ice', 'JJ'), ('cream', 'NN'), ('or', 'CC'), ('cake', 'VB')]
['cake']
('food -> ', [['cream', 'Dairy and Egg Products'], ['cake', 'Baked Products']])
candidates to check:
1
descended from food: [['N'], 'milk', 34, 38]
milk
milk milk 46
[('come', 'VB'), ('up', 'RP'), ('here', 'RB'), ('and', 'CC'), ('drink', 'VB'), ('your', 'PRP$'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'supper', 31, 37]
candidates to check:
2
candidates to check:
2
candidates to check:
9
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
7
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
7
cream
cream cream 72
[('kind', 'NN'), ('of', 'IN'), ('ice', 'NN'), ('cream', 'NN'), ('you', 'PRP'), ('going', 'VBG'), ('t', 'VB'), ('a', 'DT'), ('get', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
fish
fish fish 305
[('kind', 'NN'), ('of', 'IN'), ('ice', 'NN'), ('cream', 'NN'), ('you', 'PRP'), ('going', 'VBG'), ('t', 'VB'), ('a', 'DT'), ('get', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('kind', 'NN'), ('of', 'IN'), ('ice', 'NN'), ('cream', 'NN'), ('you', 'PRP'), ('going', 'VBG'), ('t', 'VB'), ('a', 'DT'), ('get', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
loading solution set
calculating
set([(454, (20, 25)), (220, (16, 22)), (1537, (20, 33)), (433, (11, 16)), (1413, (52, 56)), (471, (6, 11)), (2121, (14, 23)), (457, (10, 15)), (181, (7, 13)), (725, (17, 22)), (1585, (54, 63)), (477, (14, 19)), (1726, (34, 38)), (271, (15, 26)), (1519, (98, 103)), (159, (16, 22)), (159, (26, 35)), (1713, (81, 90)), (249, (6, 11)), (1562, (15, 24)), (721, (18, 23)), (429, (6, 10)), (1713, (94, 98)), (1573, (53, 62)), (1579, (14, 19)), (461, (20, 25)), (451, (12, 17)), (228, (14, 24)), (830, (21, 31)), (1017, (30, 44)), (1469, (18, 22)), (1524, (21, 26)), (793, (23, 28)), (1713, (57, 62)), (513, (6, 14)), (1593, (9, 14)), (185, (51, 57)), (379, (14, 24)), (1528, (26, 35)), (675, (14, 26)), (1569, (6, 15)), (775, (30, 39)), (373, (39, 51)), (438, (20, 26)), (813, (30, 41)), (169, (6, 12)), (1582, (18, 23))])
[((159, (16, 22)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((159, (26, 35)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((169, (6, 12)), '*GMA:\tbutter please .\n'), ((181, (7, 13)), '*CHI:\t<butter xxx> [>] .\n'), ((185, (51, 57)), "*GMA:\t<oh no> [<] I like <&m> [//] I don't like my butter that has been left open like that thank <you very much> [>] .\n"), ((220, (16, 22)), '*MOT:\t<you want catsup> [<] ?\n'), ((228, (14, 24)), '*MOT:\ton your fish cakes ?\n'), ((249, (6, 11)), '*CHI:\tjuice me [!] me .\n'), ((271, (15, 26)), "*MOT:\t&-um the brown bread's in there .\n"), ((373, (39, 51)), '*MOT:\t<Brad made> [//] helped make the tartar sauce .\n'), ((379, (14, 24)), '*MOT:\tall the mayonnaise in the jar .\n'), ((429, (6, 10)), '*MOT:\tmilk first ?\n'), ((433, (11, 16)), '*MOT:\tthen juice ?\n'), ((438, (20, 26)), "*GMA:\tperhaps I'll <butter your piece> [>] ?\n"), ((451, (12, 17)), '*CHI:\tfirst juice .\n'), ((454, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((457, (10, 15)), '*MOT:\tthe juice first ?\n'), ((461, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((471, (6, 11)), '*CHI:\tjuice please [?] .\n'), ((477, (14, 19)), '*CHI:\t<enough juice> [>] .\n'), ((513, (6, 14)), '*GPA:\ttomatoes ?\n'), ((675, (14, 26)), '*MOT:\toh this tartar sauce (..) +...\n'), ((721, (18, 23)), '*CHI:\tyou gave me candy .\n'), ((725, (17, 22)), '*MOT:\tI gave you candy .\n'), ((775, (30, 39)), '*MOT:\tyou want me to cut your fish cake (.) ?\n'), ((793, (23, 28)), '*MOT:\tdid you eat some beans ?\n'), ((813, (30, 41)), '*MOT:\tyou want me to cut your brown bread ?\n'), ((830, (21, 31)), '*MOT:\tokay I cut one fish stick [?] xxx .\n'), ((1017, (30, 44)), '*GMA:\tlooked like a bunch of <Concord grapes> [>] .\n'), ((1413, (52, 56)), "*CHI:\t<I'm all> [/] I'm all done though I want some milk .\n"), ((1469, (18, 22)), "*MOT:\there's your milk .\n"), ((1519, (98, 103)), "*GMA:\tand <you really [!] shouldn't> [//] you didn't have any dinner you really [!] shouldn't eat candy .\n"), ((1524, (21, 26)), '*GMA:\tyou had enough candy today Lovey .\n'), ((1528, (26, 35)), "*CHI:\tMommy I'm gonna get ice cream .\n"), ((1537, (20, 33)), "*CHI:\tI'm gonna get ice cream bar[!] (.) .\n"), ((1562, (15, 24)), '*MOT:\t<want an ice cream too> [>] .\n'), ((1569, (6, 15)), '*GMA:\tice cream is better .\n'), ((1573, (53, 62)), '*CHI:\tMa I wan(t) (t)a go to the store and get <some ice cream> [>] .\n'), ((1579, (14, 19)), '*GMA:\t<but no candy> [<] .\n'), ((1582, (18, 23)), '*CHI:\tno just [?] candy .\n'), ((1585, (54, 63)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1593, (9, 14)), '*GMA:\tno candy .\n'), ((1713, (57, 62)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (81, 90)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (94, 98)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1726, (34, 38)), '*MOT:\tcome up here and drink your milk (.) .\n'), ((2121, (14, 23)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n')]
set([(454, (20, 25)), (1169, (30, 34)), (220, (16, 22)), (1537, (20, 33)), (1153, (28, 32)), (433, (11, 16)), (1413, (52, 56)), (471, (6, 11)), (830, (21, 25)), (1218, (37, 41)), (457, (10, 15)), (1506, (27, 31)), (181, (7, 13)), (1732, (31, 37)), (329, (21, 27)), (1639, (44, 49)), (1599, (30, 34)), (725, (17, 22)), (1524, (21, 26)), (1713, (94, 98)), (1585, (54, 63)), (477, (14, 19)), (1726, (34, 38)), (321, (19, 24)), (1519, (62, 68)), (1519, (98, 103)), (1017, (38, 44)), (159, (16, 22)), (159, (26, 35)), (1702, (-1, 4)), (1713, (57, 62)), (249, (6, 11)), (1562, (15, 24)), (721, (18, 23)), (429, (6, 10)), (304, (15, 21)), (1585, (30, 34)), (1573, (53, 62)), (1579, (14, 19)), (461, (20, 25)), (2121, (50, 54)), (451, (12, 17)), (775, (35, 39)), (813, (36, 41)), (1582, (18, 23)), (1164, (22, 26)), (1469, (18, 22)), (775, (30, 34)), (1263, (41, 45)), (793, (23, 28)), (228, (14, 18)), (513, (6, 14)), (1593, (9, 14)), (185, (51, 57)), (1702, (11, 16)), (379, (14, 24)), (1528, (26, 35)), (1500, (12, 17)), (859, (37, 42)), (675, (14, 26)), (1569, (6, 15)), (311, (24, 30)), (271, (21, 26)), (373, (39, 51)), (438, (20, 26)), (169, (6, 12)), (2121, (14, 23)), (1713, (81, 90))])
[((159, (16, 22)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((159, (26, 35)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((169, (6, 12)), '*GMA:\tbutter please .\n'), ((181, (7, 13)), '*CHI:\t<butter xxx> [>] .\n'), ((185, (51, 57)), "*GMA:\t<oh no> [<] I like <&m> [//] I don't like my butter that has been left open like that thank <you very much> [>] .\n"), ((220, (16, 22)), '*MOT:\t<you want catsup> [<] ?\n'), ((228, (14, 18)), '*MOT:\ton your fish cakes ?\n'), ((249, (6, 11)), '*CHI:\tjuice me [!] me .\n'), ((271, (21, 26)), "*MOT:\t&-um the brown bread's in there .\n"), ((304, (15, 21)), '*CHI:\ttime for supper .\n'), ((311, (24, 30)), '*GPA:\twhy should I have supper with you ?\n'), ((321, (19, 24)), '*CHI:\ttime [<] for lunch (.) !\n'), ((329, (21, 27)), '*GPA:\tI have_to have supper with you ?\n'), ((373, (39, 51)), '*MOT:\t<Brad made> [//] helped make the tartar sauce .\n'), ((379, (14, 24)), '*MOT:\tall the mayonnaise in the jar .\n'), ((429, (6, 10)), '*MOT:\tmilk first ?\n'), ((433, (11, 16)), '*MOT:\tthen juice ?\n'), ((438, (20, 26)), "*GMA:\tperhaps I'll <butter your piece> [>] ?\n"), ((451, (12, 17)), '*CHI:\tfirst juice .\n'), ((454, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((457, (10, 15)), '*MOT:\tthe juice first ?\n'), ((461, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((471, (6, 11)), '*CHI:\tjuice please [?] .\n'), ((477, (14, 19)), '*CHI:\t<enough juice> [>] .\n'), ((513, (6, 14)), '*GPA:\ttomatoes ?\n'), ((675, (14, 26)), '*MOT:\toh this tartar sauce (..) +...\n'), ((721, (18, 23)), '*CHI:\tyou gave me candy .\n'), ((725, (17, 22)), '*MOT:\tI gave you candy .\n'), ((775, (30, 34)), '*MOT:\tyou want me to cut your fish cake (.) ?\n'), ((775, (35, 39)), '*MOT:\tyou want me to cut your fish cake (.) ?\n'), ((793, (23, 28)), '*MOT:\tdid you eat some beans ?\n'), ((813, (36, 41)), '*MOT:\tyou want me to cut your brown bread ?\n'), ((830, (21, 25)), '*MOT:\tokay I cut one fish stick [?] xxx .\n'), ((859, (37, 42)), '*GMA:\t<a couple of times he fell and rolls> [>] +...\n'), ((1017, (38, 44)), '*GMA:\tlooked like a bunch of <Concord grapes> [>] .\n'), ((1153, (28, 32)), '*CHI:\tI want (to) go to the fish store .\n'), ((1164, (22, 26)), '*CHI:\tdid you see the fish man go home (.) ?\n'), ((1169, (30, 34)), '*CHI:\tI wan(t) (to) go to the fish store .\n'), ((1218, (37, 41)), '*CHI:\t<we can> [/] we can run to the fish store .\n'), ((1263, (41, 45)), "*MOT:\tBrad should get out his Berenstein Bear [?] [///] oh I'm going (t)a have_to let Ma read it and that'll tell her what thunder is huh ?\n"), ((1413, (52, 56)), "*CHI:\t<I'm all> [/] I'm all done though I want some milk .\n"), ((1469, (18, 22)), "*MOT:\there's your milk .\n"), ((1500, (12, 17)), "*MOT:\t<well Honey> [<] I don't think we should go .\n"), ((1506, (27, 31)), '*CHI:\tyyy I want go to the fish store .\n'), ((1519, (62, 68)), "*GMA:\tand <you really [!] shouldn't> [//] you didn't have any dinner you really [!] shouldn't eat candy .\n"), ((1519, (98, 103)), "*GMA:\tand <you really [!] shouldn't> [//] you didn't have any dinner you really [!] shouldn't eat candy .\n"), ((1524, (21, 26)), '*GMA:\tyou had enough candy today Lovey .\n'), ((1528, (26, 35)), "*CHI:\tMommy I'm gonna get ice cream .\n"), ((1537, (20, 33)), "*CHI:\tI'm gonna get ice cream bar[!] (.) .\n"), ((1562, (15, 24)), '*MOT:\t<want an ice cream too> [>] .\n'), ((1569, (6, 15)), '*GMA:\tice cream is better .\n'), ((1573, (53, 62)), '*CHI:\tMa I wan(t) (t)a go to the store and get <some ice cream> [>] .\n'), ((1579, (14, 19)), '*GMA:\t<but no candy> [<] .\n'), ((1582, (18, 23)), '*CHI:\tno just [?] candy .\n'), ((1585, (30, 34)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1585, (54, 63)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1593, (9, 14)), '*GMA:\tno candy .\n'), ((1599, (30, 34)), '*CHI:\tMa you wan(t) go to the fish store with me and my Mama ?\n'), ((1639, (44, 49)), '*CHI:\t&-um Mommy I wan(t) (t)a bring my new water gun to the preschool [>] .\n'), ((1702, (-1, 4)), '*MOT:\twhat Honey ?\n'), ((1702, (11, 16)), '*MOT:\twhat Honey ?\n'), ((1713, (57, 62)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (81, 90)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (94, 98)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1726, (34, 38)), '*MOT:\tcome up here and drink your milk (.) .\n'), ((1732, (31, 37)), "*GPA:\tyou're not gonna eat any supper at all ?\n"), ((2121, (14, 23)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n'), ((2121, (50, 54)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'fish cakes', 'brown bread', 'catsup', 'tartar sauce', 'cake', 'ice cream bar', 'candy', 'ice cream', 'juice', 'beans', 'concord grapes', 'fish cake', 'fish stick', 'margarine', 'mayonnaise', 'milk', 'tomatoes'])
predicted labels:
set(['', 'fish', 'honey', 'juice', 'margarine', 'rolls', 'ice cream', 'ice cream bar', 'milk', 'mayonnaise', 'tomatoes', 'catsup', 'bear', 'water', 'lunch', 'grapes', 'supper', 'bread', 'butter', 'tartar sauce', 'candy', 'dinner', 'beans', 'cake'])
file:HSLLD/HV1/MT//bramt1.cha
precision: 0.541666666667
recall: 0.722222222222
true positives:['beans', 'butter', 'cake', 'candy', 'catsup', 'ice cream', 'ice cream bar', 'juice', 'margarine', 'mayonnaise', 'milk', 'tartar sauce', 'tomatoes']
false positives: ['', 'bear', 'bread', 'dinner', 'fish', 'grapes', 'honey', 'lunch', 'rolls', 'supper', 'water']
false negatives: ['brown bread', 'concord grapes', 'fish cake', 'fish cakes', 'fish stick']
# true pos: 13
# false pos: 11
# false neg: 5
HSLLD/HV1/MT//kurmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//kurmt1.cha
HSLLD/HV1/MT//termt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//termt1.cha
HSLLD/HV1/MT//brnmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 40, 44]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 38, 42]
candidates to check:
1
candidates to check:
1
salt
salt salt 0
[('um', 'JJ'), ('i', 'NN'), ('m', 'VBP'), ('takin', 'NN'), ('g', 'NN'), ('the', 'DT'), ('salt', 'NN'), ('off', 'IN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
2
salt
salt salt 0
[('i', 'JJ'), ('hate', 'VBP'), ('salt', 'NN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 81, 85]
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'meat', 50, 54]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726b01be60>)
[('you', 'PRP'), ('know', 'VBP'), ('how', 'WRB'), ('to', 'TO'), ('eat', 'VB'), ('that', 'DT'), ('fat', 'JJ'), ('um', 'NN'), ('that', 'IN'), ('meat', 'NN'), ('brenda', 'NN'), ('xxx', 'NN')]
['meat']
('food -> ', [])
fat
fat fat 900
[('you', 'PRP'), ('know', 'VBP'), ('how', 'WRB'), ('to', 'TO'), ('eat', 'VB'), ('that', 'DT'), ('fat', 'JJ'), ('um', 'NN'), ('that', 'IN'), ('meat', 'NN'), ('brenda', 'NN'), ('xxx', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
fat
fat fat 900
[('and', 'CC'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('eat', 'NN'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
descended from food: [['N'], 'meat', 52, 56]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726b016950>)
[('you', 'PRP'), ('need', 'VBP'), ('fat', 'JJ'), ('bren', 'NNS'), ('so', 'IN'), ('you', 'PRP'), ('know', 'VBP'), ('how', 'WRB'), ('to', 'TO'), ('eat', 'VB'), ('that', 'DT'), ('meat', 'NN'), ('here', 'RB')]
['meat']
('food -> ', [])
fat
fat fat 900
[('you', 'PRP'), ('need', 'VBP'), ('fat', 'JJ'), ('bren', 'NNS'), ('so', 'IN'), ('you', 'PRP'), ('know', 'VBP'), ('how', 'WRB'), ('to', 'TO'), ('eat', 'VB'), ('that', 'DT'), ('meat', 'NN'), ('here', 'RB')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
fat
fat fat 900
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
2
fat
fat fat 900
[('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('don', 'NN'), ('t', 'NN'), ('worry', 'VBP'), ('about', 'IN'), ('fat', 'NN'), ('i', 'NN'), ('ain', 'VBP'), ('t', 'NN'), ('nothing', 'NN'), ('to', 'TO'), ('explain', 'VB'), ('it', 'PRP'), ('to', 'TO'), ('you', 'PRP'), ('be', 'VB'), ('cause', 'VBN'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('eat', 'NN'), ('it', 'PRP'), ('here', 'RB')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
fat
fat fat 900
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('eat', 'NN'), ('no', 'DT'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
fat
fat fat 900
[('xxx', 'JJ'), ('eat', 'NN'), ('no', 'DT'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
fat
fat fat 900
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('eat', 'NN'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
onions
onions onions 26
[('no', 'DT'), ('onions', 'NNS')]
['onions']
('food -> ', [])
candidates to check:
1
corn
corn corn 419
[('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
descended from food: [['N'], 'food', 30, 34]
candidates to check:
2
candidates to check:
3
candidates to check:
2
descended from food: [['N'], 'food', 47, 51]
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 20, 24]
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
6
descended from food: [['N'], 'food', 45, 49]
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
4
fish
fish fish 305
[('so', 'IN'), ('me', 'PRP'), ('and', 'CC'), ('carmen', 'NNS'), ('just', 'RB'), ('look', 'VBP'), ('out', 'RP'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'JJ'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('wat', 'NN'), ('er', 'NN'), ('and', 'CC'), ('guess', 'VB'), ('what', 'WP'), ('i', 'NN'), ('saw', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('in', 'IN'), ('the', 'DT'), ('water', 'NN')]
['fish']
('food -> ', [])
water
water water 18
[('so', 'IN'), ('me', 'PRP'), ('and', 'CC'), ('carmen', 'NNS'), ('just', 'RB'), ('look', 'VBP'), ('out', 'RP'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'JJ'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('wat', 'NN'), ('er', 'NN'), ('and', 'CC'), ('guess', 'VB'), ('what', 'WP'), ('i', 'NN'), ('saw', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('in', 'IN'), ('the', 'DT'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
duck
duck duck 84
[('so', 'IN'), ('me', 'PRP'), ('and', 'CC'), ('carmen', 'NNS'), ('just', 'RB'), ('look', 'VBP'), ('out', 'RP'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'JJ'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('wat', 'NN'), ('er', 'NN'), ('and', 'CC'), ('guess', 'VB'), ('what', 'WP'), ('i', 'NN'), ('saw', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('in', 'IN'), ('the', 'DT'), ('water', 'NN')]
['duck']
('food -> ', [['water', 'Beverages'], ['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
3
descended from food: [['N'], 'lobsters', 40, 48]
water
water water 18
[('that', 'DT'), ('water', 'NN'), ('is', 'VBZ'), ('deep', 'JJ'), ('and', 'CC'), ('it', 'PRP'), ('had', 'VBD'), ('lobsters', 'NNS'), ('in', 'IN'), ('it', 'PRP')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
descended from food: [['N'], 'lobsters', 14, 22]
candidates to check:
1
water
water water 18
[('be', 'VB'), ('cause', 'VBN'), ('the', 'DT'), ('water', 'NN'), ('was', 'VBD'), ('green', 'JJ')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
water
water water 18
[('green', 'JJ'), ('water', 'NN'), ('you', 'PRP'), ('can', 'MD'), ('t', 'VB'), ('see', 'VB')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 36, 40]
candidates to check:
1
descended from food: [['N'], 'food', 10, 14]
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
corn
corn corn 419
[('i', 'JJ'), ('hate', 'VBP'), ('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'rice', 20, 24]
rice
rice rice 147
[('i', 'JJ'), ('eat', 'VBP'), ('all', 'PDT'), ('the', 'DT'), ('rice', 'NN')]
['rice']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'rice', 23, 27]
rice
rice rice 147
[('look', 'NN'), ('at', 'IN'), ('all', 'PDT'), ('that', 'DT'), ('rice', 'NN')]
['rice']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'rice', 40, 44]
rice
rice rice 147
[('put', 'VB'), ('it', 'PRP'), ('over', 'IN'), ('here', 'RB'), ('and', 'CC'), ('you', 'PRP'), ('eat', 'VBP'), ('that', 'IN'), ('rice', 'NN'), ('and', 'CC'), ('corn', 'NN')]
['rice']
('food -> ', [])
corn
corn corn 419
[('put', 'VB'), ('it', 'PRP'), ('over', 'IN'), ('here', 'RB'), ('and', 'CC'), ('you', 'PRP'), ('eat', 'VBP'), ('that', 'IN'), ('rice', 'NN'), ('and', 'CC'), ('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'rice', 15, 19]
rice
rice rice 147
[('eat', 'VB'), ('your', 'PRP$'), ('rice', 'NN'), ('and', 'CC'), ('corn', 'NN'), ('then', 'RB')]
['rice']
('food -> ', [])
corn
corn corn 419
[('eat', 'VB'), ('your', 'PRP$'), ('rice', 'NN'), ('and', 'CC'), ('corn', 'NN'), ('then', 'RB')]
['corn']
('food -> ', [])
loading solution set
calculating
set([(1148, (13, 17)), (1151, (20, 24)), (1233, (24, 28)), (209, (30, 34)), (713, (10, 16)), (1215, (49, 53)), (637, (31, 34)), (719, (6, 10)), (1233, (15, 19)), (187, (13, 17)), (1169, (23, 27)), (184, (32, 36)), (190, (36, 40)), (1215, (40, 44))])
[((184, (32, 36)), "*SIS:\t(.) &-um I'm takin(g) the salt off .\n"), ((187, (13, 17)), '*SIS:\tI hate salt [>] .\n'), ((190, (36, 40)), '*CHI:\t<mommy I drink my> [<] [/] my soda ?\n'), ((209, (30, 34)), '*CHI:\twell Mom I drink all my soda .\n'), ((637, (31, 34)), '*MOT:\tyou know how to eat that fat [//] &-um that meat Brenda xxx .\n'), ((713, (10, 16)), '*MOT:\t<no onions> [<] ?\n'), ((719, (6, 10)), '*MOT:\tcorn .\n'), ((1148, (13, 17)), '*SIS:\tI hate corn .\n'), ((1151, (20, 24)), '*SIS:\tI eat all the rice .\n'), ((1169, (23, 27)), '*MOT:\tlook at all that rice .\n'), ((1215, (40, 44)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1215, (49, 53)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1233, (15, 19)), '*MOT:\teat your rice and corn then .\n'), ((1233, (24, 28)), '*MOT:\teat your rice and corn then .\n')]
set([(1233, (24, 28)), (645, (52, 56)), (915, (20, 25)), (713, (10, 16)), (255, (81, 85)), (645, (15, 18)), (1148, (13, 17)), (658, (40, 43)), (895, (118, 123)), (1151, (20, 24)), (122, (40, 44)), (187, (13, 17)), (1169, (23, 27)), (184, (32, 36)), (1045, (10, 14)), (653, (14, 17)), (668, (21, 24)), (1041, (36, 40)), (166, (38, 42)), (895, (106, 110)), (637, (31, 34)), (719, (6, 10)), (907, (40, 48)), (921, (12, 17)), (637, (50, 54)), (1215, (49, 53)), (852, (45, 49)), (907, (11, 16)), (761, (30, 34)), (1215, (40, 44)), (912, (14, 22)), (694, (18, 21)), (814, (20, 24)), (895, (56, 60)), (642, (28, 31)), (784, (47, 51)), (674, (17, 20)), (1233, (15, 19))])
[((122, (40, 44)), '*CHI:\t<(be)cause> [/] (.) (be)cause xxx food .\n'), ((166, (38, 42)), "*MOT:\tyou're supposed to eat all your food (.) .\n"), ((184, (32, 36)), "*SIS:\t(.) &-um I'm takin(g) the salt off .\n"), ((187, (13, 17)), '*SIS:\tI hate salt [>] .\n'), ((255, (81, 85)), "*SIS:\twe do that at the church <when it's a> [//] when [/] when God give us some food you supposed to do that .\n"), ((637, (31, 34)), '*MOT:\tyou know how to eat that fat [//] &-um that meat Brenda xxx .\n'), ((637, (50, 54)), '*MOT:\tyou know how to eat that fat [//] &-um that meat Brenda xxx .\n'), ((642, (28, 31)), "*MOT:\tand you [>] don't eat fat .\n"), ((645, (15, 18)), '*MOT:\tyou need fat Bren so you know how to eat that meat here .\n'), ((645, (52, 56)), '*MOT:\tyou need fat Bren so you know how to eat that meat here .\n'), ((653, (14, 17)), "*CHI:\tI don't fat .\n"), ((658, (40, 43)), "*MOT:\tyou <don't> [/] don't worry about fat I ain't nothing to explain it to you (be)cause you don't eat it here .\n"), ((668, (21, 24)), "*CHI:\tI don't eat no fat .\n"), ((674, (17, 20)), '*CHI:\txxx eat no fat .\n'), ((694, (18, 21)), "*CHI:\tI don't eat fat .\n"), ((713, (10, 16)), '*MOT:\t<no onions> [<] ?\n'), ((719, (6, 10)), '*MOT:\tcorn .\n'), ((761, (30, 34)), "*MOT:\tif you have no room for food you don't have no room &f for drink .\n"), ((784, (47, 51)), "*MOT:\tsee you don't need [//] have no room for food you xxx Shay .\n"), ((814, (20, 24)), '*MOT:\tspoon full of food ?\n'), ((852, (45, 49)), '*SIS:\tthis [//] that boat had a xxx a lot of food and a lot of chairs and tables .\n'), ((895, (56, 60)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((895, (106, 110)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((895, (118, 123)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((907, (11, 16)), '*SIS:\tthat water is deep [!] and it had lobsters in it .\n'), ((907, (40, 48)), '*SIS:\tthat water is deep [!] and it had lobsters in it .\n'), ((912, (14, 22)), '*MOT:\tyou saw lobsters ?\n'), ((915, (20, 25)), '*SIS:\t(be)cause the water was green .\n'), ((921, (12, 17)), "*SIS:\tgreen water you can't see .\n"), ((1041, (36, 40)), '*SIS:\tand he knows what the [/] the food is ?\n'), ((1045, (10, 14)), '*SIS:\tthe food called ?\n'), ((1148, (13, 17)), '*SIS:\tI hate corn .\n'), ((1151, (20, 24)), '*SIS:\tI eat all the rice .\n'), ((1169, (23, 27)), '*MOT:\tlook at all that rice .\n'), ((1215, (40, 44)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1215, (49, 53)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1233, (15, 19)), '*MOT:\teat your rice and corn then .\n'), ((1233, (24, 28)), '*MOT:\teat your rice and corn then .\n')]
calculating accuracy and recall
correct labels:
set(['salt', 'corn', 'fat', 'soda', 'rice', 'onions'])
predicted labels:
set(['lobsters', 'meat', 'food', 'salt', 'corn', 'fat', 'water', 'duck', 'rice', 'onions', 'fish'])
file:HSLLD/HV1/MT//brnmt1.cha
precision: 0.454545454545
recall: 0.833333333333
true positives:['corn', 'fat', 'onions', 'rice', 'salt']
false positives: ['duck', 'fish', 'food', 'lobsters', 'meat', 'water']
false negatives: ['soda']
# true pos: 5
# false pos: 6
# false neg: 1
HSLLD/HV1/MT//guymt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
descended from food: [['N'], 'food', 32, 36]
candidates to check:
1
descended from food: [['N'], 'rice', 27, 31]
rice
rice rice 147
[('okay', 'IN'), ('you', 'PRP'), ('d', 'VBP'), ('like', 'IN'), ('your', 'PRP$'), ('rice', 'NN')]
['rice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'meat', 28, 32]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726aca8488>)
[('oh', 'UH'), ('got', 'VBD'), ('ta', 'JJ'), ('look', 'NN'), ('for', 'IN'), ('the', 'DT'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'meat', 20, 24]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726aca8200>)
[('you', 'PRP'), ('like', 'IN'), ('your', 'PRP$'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'food', 57, 61]
candidates to check:
2
spinach
spinach spinach 34
[('popeye', 'NN'), ('eats', 'NNS'), ('spinach', 'VBP')]
['spinach']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
spinach
spinach spinach 34
[('his', 'PRP$'), ('his', 'PRP$'), ('spinach', 'NN')]
['spinach']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'food', 53, 57]
candidates to check:
1
descended from food: [['N'], 'lunch', 27, 32]
candidates to check:
1
descended from food: [['N'], 'lunch', 28, 33]
candidates to check:
5
descended from food: [['N'], 'lunch', 12, 17]
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 25, 29]
candidates to check:
1
descended from food: [['N'], 'food', 27, 31]
candidates to check:
2
descended from food: [['N'], 'ketchup', 22, 29]
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'juice', 17, 22]
juice
juice juice 52
[('drink', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 17, 22]
juice
juice juice 52
[('drink', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [])
loading solution set
calculating
set([(21, (27, 31)), (63, (18, 25)), (38, (20, 24)), (35, (28, 32)), (262, (17, 22)), (139, (36, 42)), (99, (18, 25)), (255, (17, 22))])
[((21, (27, 31)), "*MOT:\tokay you'd like your rice ?\n"), ((35, (28, 32)), '*CHI:\toh gotta look for the meat .\n'), ((38, (20, 24)), '*MOT:\tyou like your meat ?\n'), ((63, (18, 25)), '*CHI:\tPopeye eats spinach .\n'), ((99, (18, 25)), '*MOT:\this [/] his spinach ?\n'), ((139, (36, 42)), '*CHI:\tI had lunch (.) and I had 0an orange in my book bag .\n'), ((255, (17, 22)), '*MOT:\tdrink your juice .\n'), ((262, (17, 22)), '*MOT:\tdrink your juice .\n')]
set([(135, (28, 33)), (21, (27, 31)), (63, (18, 25)), (128, (27, 32)), (38, (20, 24)), (226, (27, 31)), (218, (25, 29)), (262, (17, 22)), (35, (28, 32)), (235, (22, 29)), (255, (17, 22)), (139, (12, 17)), (57, (57, 61)), (99, (18, 25)), (120, (53, 57)), (14, (32, 36))])
[((14, (32, 36)), '*MOT:\txxx sit down and eat your food .\n'), ((21, (27, 31)), "*MOT:\tokay you'd like your rice ?\n"), ((35, (28, 32)), '*CHI:\toh gotta look for the meat .\n'), ((38, (20, 24)), '*MOT:\tyou like your meat ?\n'), ((57, (57, 61)), "*MOT:\tyeah you're gonna be strong (.) so eat up all your food .\n"), ((63, (18, 25)), '*CHI:\tPopeye eats spinach .\n'), ((99, (18, 25)), '*MOT:\this [/] his spinach ?\n'), ((120, (53, 57)), '*CHI:\thm: (.) <I was eatin(g)> [/] I was eatin(g) my food up .\n'), ((128, (27, 32)), '*MOT:\tdid you eat all your lunch ?\n'), ((135, (28, 33)), '*MOT:\twhat did you have for lunch ?\n'), ((139, (12, 17)), '*CHI:\tI had lunch (.) and I had 0an orange in my book bag .\n'), ((218, (25, 29)), '*CHI:\tMommy I eat all my food .\n'), ((226, (27, 31)), "*MOT:\tdon't play with your food and eat it up Chi .\n"), ((235, (22, 29)), '*CHI:\tmommy I found a ketchup in it .\n'), ((255, (17, 22)), '*MOT:\tdrink your juice .\n'), ((262, (17, 22)), '*MOT:\tdrink your juice .\n')]
calculating accuracy and recall
correct labels:
set(['orange', 'juice', 'rice', 'meat', 'spinach'])
predicted labels:
set(['juice', 'meat', 'spinach', 'food', 'lunch', 'rice', 'ketchup'])
file:HSLLD/HV1/MT//guymt1.cha
precision: 0.571428571429
recall: 0.8
true positives:['juice', 'meat', 'rice', 'spinach']
false positives: ['food', 'ketchup', 'lunch']
false negatives: ['orange']
# true pos: 4
# false pos: 3
# false neg: 1
HSLLD/HV1/MT//maymt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//maymt1.cha
HSLLD/HV1/MT//mormt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//mormt1.cha
HSLLD/HV1/MT//geomt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
pumpkin
pumpkin pumpkin 15
[('pumpkin', 'NN')]
['pumpkin']
('food -> ', [])
candidates to check:
1
pumpkin
pumpkin pumpkin 15
[('pumpkin', 'NN')]
['pumpkin']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
descended from food: [['N'], 'sausage', 18, 25]
sausage
sausage sausage 324
[('is', 'VBZ'), ('that', 'DT'), ('sausage', 'NN')]
['sausage']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'meatballs', 25, 34]
meatballs
meatballs meatballs 197
[('no', 'DT'), ('that', 'WDT'), ('s', 'VBZ'), ('xxx', 'NNP'), ('meatballs', 'NNS')]
['meatballs']
('food -> ', [['meatballs', 'Legumes and Legume Products']])
candidates to check:
1
descended from food: [['N'], 'meat', 14, 18]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726ab92dd0>)
[('is', 'VBZ'), ('that', 'IN'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'meat', 17, 21]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726ab971b8>)
[('yes', 'NNS'), ('that', 'WDT'), ('s', 'VBP'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'meatballs', 21, 30]
meatballs
meatballs meatballs 197
[('is', 'VBZ'), ('this', 'DT'), ('m', 'NN'), ('meatballs', 'NNS')]
['meatballs']
('food -> ', [['meatballs', 'Legumes and Legume Products']])
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'hamburgers', 27, 37]
candidates to check:
1
descended from food: [['N'], 'food', 40, 44]
candidates to check:
1
candidates to check:
1
candidates to check:
5
descended from food: [['N'], 'bacon', 52, 57]
bacon
bacon bacon 309
[('with', 'IN'), ('with', 'IN'), ('the', 'DT'), ('t', 'NN'), ('toy', 'NN'), ('toy', 'NN'), ('bakin', 'NN'), ('g', 'NN'), ('bacon', 'NN')]
['bacon']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 23, 27]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 15, 19]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'supper', 15, 21]
candidates to check:
2
descended from food: [['N'], 'supper', 33, 39]
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
descended from food: [['N'], 'food', 61, 65]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'meatball', 22, 30]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
duck
duck duck 84
[('a', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
duck
duck duck 84
[('did', 'VBD'), ('he', 'PRP'), ('take', 'VB'), ('a', 'DT'), ('little', 'JJ'), ('bite', 'NN'), ('of', 'IN'), ('the', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
descended from food: [['N'], 'supper', 35, 41]
candidates to check:
1
candidates to check:
2
pepper
pepper pepper 27
[('and', 'CC'), ('put', 'VB'), ('pepper', 'NN'), ('on', 'IN'), ('her', 'PRP$')]
['pepper']
('food -> ', [])
candidates to check:
1
salt
salt salt 0
[('and', 'CC'), ('and', 'CC'), ('and', 'CC'), ('salt', 'NN'), ('on', 'IN'), ('her', 'PRP$')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
1
candidates to check:
1
duck
duck duck 84
[('you', 'PRP'), ('had', 'VBD'), ('better', 'JJR'), ('be', 'VB'), ('hungry', 'JJ'), ('to', 'TO'), ('eat', 'VB'), ('a', 'DT'), ('whole', 'JJ'), ('duck', 'NN'), ('huh', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
4
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 18, 22]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
egg
egg egg 357
[('egg', 'NN')]
['egg']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
duck
duck duck 84
[('he', 'PRP'), ('ate', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('alive', 'JJ')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
duck
duck duck 84
[('um', 'JJ'), ('um', 'IN'), ('the', 'DT'), ('wolf', 'NN'), ('ate', 'VBD'), ('the', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
shake
shake shake 148
[('yeah', 'NN'), ('but', 'CC'), ('he', 'PRP'), ('didn', 'VBZ'), ('t', 'JJ'), ('shake', 'VB'), ('my', 'PRP$'), ('hand', 'NN'), ('when', 'WRB'), ('when', 'WRB'), ('i', 'NN'), ('was', 'VBD'), ('when', 'WRB'), ('i', 'NN'), ('was', 'VBD'), ('up', 'RB'), ('the', 'DT'), ('hill', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
shake
shake shake 148
[('because', 'IN'), ('he', 'PRP'), ('didn', 'VBZ'), ('t', 'JJ'), ('shake', 'VB'), ('my', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
2
shake
shake shake 148
[('be', 'VB'), ('cause', 'NN'), ('he', 'PRP'), ('didn', 'VBZ'), ('t', 'CC'), ('come', 'VB'), ('up', 'RP'), ('the', 'DT'), ('hill', 'NN'), ('and', 'CC'), ('shake', 'VB'), ('my', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
shake
shake shake 148
[('then', 'RB'), ('i', 'VB'), ('shake', 'VB'), ('his', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
2
candidates to check:
2
candidates to check:
1
shake
shake shake 148
[('be', 'VB'), ('cause', 'NN'), ('you', 'PRP'), ('went', 'VBD'), ('up', 'RB'), ('to', 'TO'), ('him', 'PRP'), ('and', 'CC'), ('you', 'PRP'), ('asked', 'VBD'), ('him', 'PRP'), ('if', 'IN'), ('he', 'PRP'), ('would', 'MD'), ('shake', 'VB'), ('your', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'food', 32, 36]
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'food', 30, 34]
candidates to check:
2
descended from food: [['N'], 'cupcakes', 28, 36]
descended from food: [['N'], 'cookie', 58, 64]
cookie
cookie cookie 507
[('because', 'IN'), ('kenny', 'NN'), ('saw', 'VBD'), ('the', 'DT'), ('cupcakes', 'NNS'), ('and', 'CC'), ('he', 'PRP'), ('dropped', 'VBD'), ('a', 'DT'), ('cookie', 'NN')]
['cookie']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'cupcake', 21, 28]
descended from food: [['N'], 'cookie', 46, 52]
cookie
cookie cookie 507
[('he', 'PRP'), ('saw', 'VBD'), ('the', 'DT'), ('cupcake', 'NN'), ('and', 'CC'), ('he', 'PRP'), ('dropped', 'VBD'), ('a', 'DT'), ('cookie', 'NN')]
['cookie']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'cookie', 24, 30]
cookie
cookie cookie 507
[('why', 'WRB'), ('d', 'NN'), ('he', 'PRP'), ('drop', 'VBZ'), ('the', 'DT'), ('cookie', 'NN')]
['cookie']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'cupcakes', 36, 44]
candidates to check:
1
descended from food: [['N'], 'cupcake', 48, 55]
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'candy', 55, 60]
candidates to check:
1
descended from food: [['N'], 'gum', 21, 24]
candidates to check:
1
descended from food: [['N'], 'gum', 30, 33]
candidates to check:
1
descended from food: [['N'], 'gum', 25, 28]
candidates to check:
2
descended from food: [['N'], 'gums', 18, 22]
gums
gums gums 332
[('you', 'PRP'), ('got', 'VBD'), ('two', 'CD'), ('gums', 'NNS'), ('and', 'CC'), ('anything', 'NN'), ('else', 'RB')]
['gums']
('food -> ', [['gums', 'Sweets']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
turtle
turtle turtle 89
[('and', 'CC'), ('and', 'CC'), ('uh', 'JJ'), ('and', 'CC'), ('a', 'DT'), ('pretend', 'JJ'), ('turtle', 'NN'), ('couldn', 'NN'), ('t', 'NN'), ('get', 'VB'), ('me', 'PRP')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
1
turtle
turtle turtle 89
[('and', 'CC'), ('you', 'PRP'), ('held', 'VBP'), ('on', 'IN'), ('like', 'IN'), ('that', 'DT'), ('and', 'CC'), ('the', 'DT'), ('turtle', 'NN'), ('couldn', 'NN'), ('t', 'NN'), ('get', 'NN'), ('you', 'PRP')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
1
turtle
turtle turtle 89
[('where', 'WRB'), ('was', 'VBD'), ('the', 'DT'), ('turtle', 'NN')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
7
turtle
turtle turtle 89
[('a', 'DT'), ('nice', 'JJ'), ('turtle', 'NN'), ('turtle', 'JJ'), ('n', 'JJ'), ('nice', 'JJ'), ('turtle', 'NN'), ('toys', 'NNS')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
1
candidates to check:
4
turtle
turtle turtle 89
[('yeah', 'NN'), ('nice', 'JJ'), ('turtle', 'JJ'), ('things', 'NNS'), ('toys', 'NNS')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
turtle
turtle turtle 89
[('and', 'CC'), ('the', 'DT'), ('turtle', 'JJ'), ('turtle', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('bum', 'NN'), ('bum', 'NN')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'meatball', 8, 16]
candidates to check:
2
descended from food: [['N'], 'meatball', 46, 54]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
loading solution set
calculating
set([(98, (18, 25)), (1048, (52, 56)), (1343, (9, 12)), (944, (8, 12)), (2963, (46, 54)), (121, (21, 30)), (2419, (58, 64)), (951, (49, 53)), (25, (6, 13)), (111, (14, 18)), (102, (25, 34)), (142, (27, 37)), (2433, (24, 30)), (987, (28, 32)), (2441, (48, 55)), (1801, (37, 41)), (22, (6, 13)), (118, (17, 21)), (1523, (17, 21)), (2437, (36, 44)), (909, (22, 30)), (2428, (46, 52)), (2555, (18, 22)), (2934, (8, 16)), (984, (14, 20)), (182, (52, 57))])
[((22, (6, 13)), '*CHI:\tpumpkin .\n'), ((25, (6, 13)), '*MOT:\tpumpkin ?\n'), ((98, (18, 25)), '*CHI:\t(.) is that sausage ?\n'), ((102, (25, 34)), "*MOT:\tno that's xxx [//] meatballs .\n"), ((111, (14, 18)), '*CHI:\tis that meat ?\n'), ((118, (17, 21)), "*MOT:\tyes that's meat .\n"), ((121, (21, 30)), '*CHI:\tis this [!] &m meatballs ?\n'), ((142, (27, 37)), '*CHI:\tGrandma [?] can make hamburgers ?\n'), ((182, (52, 57)), '*CHI:\twith [/] with the &t toy [/] toy bakin(g) [=? bacon] .\n'), ((909, (22, 30)), '*CHI:\t(..) I want the meatball .\n'), ((944, (8, 12)), '*CHI:\ta duck .\n'), ((951, (49, 53)), '*MOT:\t<did he take> [<] a little [!] bite of the duck ?\n'), ((984, (14, 20)), '*CHI:\tand put pepper on her ?\n'), ((987, (28, 32)), '*CHI:\t<and (.) and> [/] and salt on her ?\n'), ((1048, (52, 56)), '*MOT:\t<you had better be hungry to eat a whole> [>] duck huh ?\n'), ((1343, (9, 12)), '*CHI:\t++ egg [<] [?] .\n'), ((1523, (17, 21)), '*CHI:\the ate the duck alive .\n'), ((1801, (37, 41)), '*CHI:\t&-um [/] &-um the wolf ate the duck .\n'), ((2419, (58, 64)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2428, (46, 52)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2433, (24, 30)), "*MOT:\twhy'd he drop the cookie ?\n"), ((2437, (36, 44)), '*CHI:\t<when he> [/] when he saw the cupcakes ?\n'), ((2441, (48, 55)), '*MOT:\toh because he decided he wanted to have a cupcake instead ?\n'), ((2555, (18, 22)), '*MOT:\tyou got two gums and anything else ?\n'), ((2934, (8, 16)), '*MOT:\ta meatball you dropped on the floor &=laughs .\n'), ((2963, (46, 54)), '*MOT:\t(.) we had to step on the rest of it [= meatball] .\n')]
set([(2414, (30, 34)), (2838, (54, 60)), (98, (18, 25)), (1048, (52, 56)), (2838, (22, 28)), (2160, (32, 36)), (155, (40, 44)), (2140, (65, 70)), (2844, (16, 22)), (1343, (9, 12)), (944, (8, 12)), (2963, (46, 54)), (121, (21, 30)), (2076, (24, 29)), (2838, (33, 39)), (2713, (44, 50)), (951, (49, 53)), (2428, (21, 28)), (1069, (18, 22)), (2555, (18, 22)), (877, (61, 65)), (102, (25, 34)), (2057, (25, 30)), (2437, (36, 44)), (492, (33, 39)), (2080, (47, 52)), (142, (27, 37)), (2433, (24, 30)), (2419, (28, 36)), (987, (28, 32)), (2891, (18, 24)), (2441, (48, 55)), (1801, (37, 41)), (2539, (21, 24)), (22, (6, 13)), (118, (17, 21)), (1523, (17, 21)), (409, (15, 19)), (2722, (40, 46)), (231, (23, 27)), (2891, (29, 35)), (968, (35, 41)), (2419, (58, 64)), (2094, (13, 18)), (909, (22, 30)), (25, (6, 13)), (111, (14, 18)), (2533, (55, 60)), (2428, (46, 52)), (2542, (30, 33)), (2934, (8, 16)), (984, (14, 20)), (182, (52, 57)), (2734, (20, 26)), (470, (15, 21)), (2548, (25, 28))])
[((22, (6, 13)), '*CHI:\tpumpkin .\n'), ((25, (6, 13)), '*MOT:\tpumpkin ?\n'), ((98, (18, 25)), '*CHI:\t(.) is that sausage ?\n'), ((102, (25, 34)), "*MOT:\tno that's xxx [//] meatballs .\n"), ((111, (14, 18)), '*CHI:\tis that meat ?\n'), ((118, (17, 21)), "*MOT:\tyes that's meat .\n"), ((121, (21, 30)), '*CHI:\tis this [!] &m meatballs ?\n'), ((142, (27, 37)), '*CHI:\tGrandma [?] can make hamburgers ?\n'), ((155, (40, 44)), "*MOT:\twhy don't you finish chewing your food so I can understand you .\n"), ((182, (52, 57)), '*CHI:\twith [/] with the &t toy [/] toy bakin(g) [=? bacon] .\n'), ((231, (23, 27)), '*CHI:\tan it got on her food .\n'), ((409, (15, 19)), '*MOT:\teat your food .\n'), ((470, (15, 21)), '*MOT:\tfor your supper ?\n'), ((492, (33, 39)), '*MOT:\tplay that after you finish supper .\n'), ((877, (61, 65)), "*CHI:\tI'm gonna sit on your [/] your lap and I'm bringing my food over here .\n"), ((909, (22, 30)), '*CHI:\t(..) I want the meatball .\n'), ((944, (8, 12)), '*CHI:\ta duck .\n'), ((951, (49, 53)), '*MOT:\t<did he take> [<] a little [!] bite of the duck ?\n'), ((968, (35, 41)), '*MOT:\twell why are you eating your supper ?\n'), ((984, (14, 20)), '*CHI:\tand put pepper on her ?\n'), ((987, (28, 32)), '*CHI:\t<and (.) and> [/] and salt on her ?\n'), ((1048, (52, 56)), '*MOT:\t<you had better be hungry to eat a whole> [>] duck huh ?\n'), ((1069, (18, 22)), '*MOT:\tfinish your food .\n'), ((1343, (9, 12)), '*CHI:\t++ egg [<] [?] .\n'), ((1523, (17, 21)), '*CHI:\the ate the duck alive .\n'), ((1801, (37, 41)), '*CHI:\t&-um [/] &-um the wolf ate the duck .\n'), ((2057, (25, 30)), "*CHI:\tyeah but he didn't shake my hand when [/] <when I was> [/] when I was up the hill .\n"), ((2076, (24, 29)), "*CHI:\tbecause he didn't shake my hand .\n"), ((2080, (47, 52)), "*CHI:\t(be)cause he didn't come up the hill and shake my hand .\n"), ((2094, (13, 18)), '*CHI:\tthen I shake his hand .\n'), ((2140, (65, 70)), '*MOT:\t(be)cause you went up to him and you asked him if he would shake your hand ?\n'), ((2160, (32, 36)), "*MOT:\twhy don't you (.) get the food in there first ?\n"), ((2414, (30, 34)), '*MOT:\t(be)cause he likes junk food .\n'), ((2419, (28, 36)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2419, (58, 64)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2428, (21, 28)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2428, (46, 52)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2433, (24, 30)), "*MOT:\twhy'd he drop the cookie ?\n"), ((2437, (36, 44)), '*CHI:\t<when he> [/] when he saw the cupcakes ?\n'), ((2441, (48, 55)), '*MOT:\toh because he decided he wanted to have a cupcake instead ?\n'), ((2533, (55, 60)), '*CHI:\tand [/] and the and they dropped all [/] all the candy .\n'), ((2539, (21, 24)), '*CHI:\tand I got some gum .\n'), ((2542, (30, 33)), '*CHI:\tand I got some more [!] gum .\n'), ((2548, (25, 28)), '*CHI:\tI got some (.) two gum .\n'), ((2555, (18, 22)), '*MOT:\tyou got two gums and anything else ?\n'), ((2713, (44, 50)), "*CHI:\t<and [/] and &-uh> [//] and a pretend turtle couldn't get me .\n"), ((2722, (40, 46)), "*MOT:\tand you held on like that and the turtle couldn't get you ?\n"), ((2734, (20, 26)), '*MOT:\twhere was the turtle ?\n'), ((2838, (22, 28)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2838, (33, 39)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2838, (54, 60)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2844, (16, 22)), '*CHI:\tyeah nice turtle (.) things [//] toys .\n'), ((2891, (18, 24)), '*CHI:\t(.) and the turtle [/] turtle is a bum+bum .\n'), ((2891, (29, 35)), '*CHI:\t(.) and the turtle [/] turtle is a bum+bum .\n'), ((2934, (8, 16)), '*MOT:\ta meatball you dropped on the floor &=laughs .\n'), ((2963, (46, 54)), '*MOT:\t(.) we had to step on the rest of it [= meatball] .\n')]
calculating accuracy and recall
correct labels:
set(['sausage', 'cupcakes', 'meat', 'meatballs', 'bacon', 'pepper', 'cupcake', 'gums', 'cookie', 'duck', 'meatball', 'salt', 'egg', 'hamburgers', 'pumpkin'])
predicted labels:
set(['turtle', 'sausage', 'cupcakes', 'meat', 'food', 'bacon', 'duck', 'meatballs', 'pepper', 'candy', 'cupcake', 'gums', 'cookie', 'gum', 'supper', 'meatball', 'shake', 'salt', 'egg', 'hamburgers', 'pumpkin'])
file:HSLLD/HV1/MT//geomt1.cha
precision: 0.714285714286
recall: 1.0
true positives:['bacon', 'cookie', 'cupcake', 'cupcakes', 'duck', 'egg', 'gums', 'hamburgers', 'meat', 'meatball', 'meatballs', 'pepper', 'pumpkin', 'salt', 'sausage']
false positives: ['candy', 'food', 'gum', 'shake', 'supper', 'turtle']
false negatives: []
# true pos: 15
# false pos: 6
# false neg: 0
HSLLD/HV1/MT//anamt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'juice', 18, 23]
juice
juice juice 52
[('so', 'RB'), ('you', 'PRP'), ('want', 'VBP'), ('juice', 'NNS'), ('like', 'IN'), ('that', 'DT')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'cheese', 21, 27]
cheese
cheese cheese 280
[('i', 'NN'), ('like', 'IN'), ('it', 'PRP'), ('with', 'IN'), ('cheese', 'NN')]
['cheese']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'cheese', 27, 33]
cheese
cheese cheese 280
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('xxx', 'VBN'), ('cheese', 'NNS')]
['cheese']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'cheese', 28, 34]
cheese
cheese cheese 280
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('any', 'DT'), ('good', 'JJ'), ('cheese', 'NN'), ('look', 'NN')]
['cheese']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'juice', 23, 28]
juice
juice juice 52
[('do', 'VB'), ('you', 'PRP'), ('like', 'IN'), ('that', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 10, 15]
juice
juice juice 52
[('xxx', 'NN'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 15, 20]
juice
juice juice 52
[('this', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 11, 15]
descended from food: [['N'], 'strawberries', 26, 38]
strawberries
strawberries strawberries 96
[('with', 'IN'), ('milk', 'NN'), ('and', 'CC'), ('uh', 'JJ'), ('strawberries', 'NNS')]
['strawberries']
('food -> ', [])
milk
milk milk 46
[('with', 'IN'), ('milk', 'NN'), ('and', 'CC'), ('uh', 'JJ'), ('strawberries', 'NNS')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'food', 26, 30]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 33, 37]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'muffin', 14, 20]
muffin
muffin muffin 255
[('eat', 'VB'), ('the', 'DT'), ('muffin', 'NN'), ('then', 'RB')]
['muffin']
('food -> ', [['muffin', 'Baked Products']])
candidates to check:
1
water
water water 18
[('look', 'NN'), ('at', 'IN'), ('this', 'DT'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'muffin', 14, 20]
muffin
muffin muffin 255
[('eat', 'VB'), ('the', 'DT'), ('muffin', 'NN'), ('okay', 'NN')]
['muffin']
('food -> ', [['muffin', 'Baked Products']])
candidates to check:
2
descended from food: [['N'], 'vitamin', 34, 41]
descended from food: [['N'], 'dinner', 68, 74]
candidates to check:
2
descended from food: [['N'], 'popsicles', 13, 22]
candidates to check:
1
descended from food: [['N'], 'popsicle', 23, 31]
candidates to check:
1
descended from food: [['N'], 'popsicle', 13, 21]
candidates to check:
1
descended from food: [['N'], 'food', 24, 28]
candidates to check:
1
descended from food: [['N'], 'vitamin', 25, 32]
candidates to check:
2
descended from food: [['N'], 'vitamin', 30, 37]
candidates to check:
4
onions
onions onions 26
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('onions', 'NNS'), ('i', 'VBP'), ('don', 'VBP'), ('t', 'NN'), ('i', 'NN'), ('hate', 'VBP'), ('onions', 'NNS')]
['onions']
('food -> ', [])
candidates to check:
1
onions
onions onions 26
[('i', 'JJ'), ('hate', 'VBP'), ('onions', 'NNS')]
['onions']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'popsicle', 17, 25]
candidates to check:
1
descended from food: [['N'], 'food', 15, 19]
candidates to check:
1
descended from food: [['N'], 'popsicle', 15, 23]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
onions
onions onions 26
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('those', 'DT'), ('onions', 'NNS')]
['onions']
('food -> ', [])
candidates to check:
2
onions
onions onions 26
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('onions', 'NNS')]
['onions']
('food -> ', [])
candidates to check:
1
onions
onions onions 26
[('it', 'PRP'), ('doesn', 'VBZ'), ('t', 'NNS'), ('have', 'VBP'), ('any', 'DT'), ('onions', 'NNS'), ('mikey', 'NN')]
['onions']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'popsicle', 28, 36]
candidates to check:
1
descended from food: [['N'], 'popsicle', 37, 45]
candidates to check:
1
descended from food: [['N'], 'honey', 14, 19]
honey
honey honey 304
[('come', 'VBN'), ('on', 'IN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
descended from food: [['N'], 'juice', 16, 21]
juice
juice juice 52
[('drink', 'VB'), ('the', 'DT'), ('juice', 'NN'), ('too', 'RB')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'popsicle', 25, 33]
candidates to check:
1
descended from food: [['N'], 'juice', 57, 62]
juice
juice juice 52
[('tell', 'NN'), ('tell', 'VB'), ('mariana', 'NN'), ('to', 'TO'), ('come', 'VB'), ('in', 'IN'), ('now', 'RB'), ('and', 'CC'), ('drink', 'VB'), ('the', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 57, 62]
juice
juice juice 52
[('mariana', 'NN'), ('mariana', 'VBZ'), ('come', 'VBN'), ('on', 'IN'), ('and', 'CC'), ('drink', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 29, 34]
juice
juice juice 52
[('okay', 'NN'), ('mariana', 'NN'), ('drink', 'VBP'), ('the', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'muffin', 20, 26]
muffin
muffin muffin 255
[('and', 'CC'), ('eat', 'VB'), ('your', 'PRP$'), ('muffin', 'NN')]
['muffin']
('food -> ', [['muffin', 'Baked Products']])
candidates to check:
1
descended from food: [['N'], 'muffin', 8, 14]
muffin
muffin muffin 255
[('a', 'DT'), ('muffin', 'NN')]
['muffin']
('food -> ', [['muffin', 'Baked Products']])
candidates to check:
1
descended from food: [['N'], 'juice', 58, 63]
juice
juice juice 52
[('either', 'RB'), ('one', 'CD'), ('as', 'RB'), ('long', 'RB'), ('as', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('it', 'PRP'), ('and', 'CC'), ('drink', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'juice', 31, 36]
juice
juice juice 52
[('would', 'MD'), ('you', 'PRP'), ('like', 'VB'), ('some', 'DT'), ('more', 'RBR'), ('juice', 'NNS')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'popsicle', 48, 56]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'popsicle', 24, 32]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'popsicle', 28, 36]
candidates to check:
3
descended from food: [['N'], 'popsicle', 44, 52]
candidates to check:
2
candidates to check:
2
candidates to check:
5
descended from food: [['N'], 'popsicle', 45, 53]
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'juice', 34, 39]
descended from food: [['N'], 'popsicle', 66, 74]
juice
juice juice 52
[('if', 'IN'), ('it', 'PRP'), ('doesn', 'VBZ'), ('t', 'JJ'), ('hurt', 'NN'), ('with', 'IN'), ('the', 'DT'), ('juice', 'NN'), ('then', 'RB'), ('it', 'PRP'), ('won', 'VBD'), ('t', 'JJ'), ('hurt', 'NN'), ('with', 'IN'), ('a', 'DT'), ('popsicle', 'NN')]
['juice']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'popsicle', 28, 36]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'popsicle', 31, 39]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'juice', 77, 82]
juice
juice juice 52
[('he', 'PRP'), ('says', 'VBZ'), ('he', 'PRP'), ('says', 'VBZ'), ('mikey', 'NN'), ('says', 'VBZ'), ('mikey', 'NN'), ('says', 'VBZ'), ('only', 'RB'), ('this', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'grape', 25, 30]
candidates to check:
1
descended from food: [['N'], 'grape', 11, 16]
candidates to check:
1
descended from food: [['N'], 'grape', 10, 15]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'grape', 15, 20]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'popsicles', 24, 33]
candidates to check:
3
candidates to check:
3
candidates to check:
2
descended from food: [['N'], 'popsicles', 23, 32]
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'popsicles', 36, 45]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'popsicles', 31, 40]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'popsicles', 25, 34]
candidates to check:
1
descended from food: [['N'], 'popsicle', 31, 39]
candidates to check:
1
duck
duck duck 84
[('that', 'DT'), ('s', 'VBD'), ('donald', 'JJ'), ('duck', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'honey', 10, 15]
honey
honey honey 304
[('why', 'WRB'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'popsicle', 41, 49]
candidates to check:
1
descended from food: [['N'], 'popsicle', 17, 25]
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'popsicle', 9, 17]
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
9
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'honey', 28, 33]
honey
honey honey 304
[('you', 'PRP'), ('finish', 'VBP'), ('that', 'IN'), ('first', 'JJ'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
duck
duck duck 84
[('that', 'DT'), ('s', 'VBD'), ('donald', 'JJ'), ('duck', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
duck
duck duck 84
[('that', 'DT'), ('s', 'VBD'), ('donald', 'JJ'), ('duck', 'NN'), ('mom', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
duck
duck duck 84
[('duck', 'NN'), ('tales', 'NNS')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
duck
duck duck 84
[('this', 'DT'), ('xxx', 'NN'), ('was', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('tales', 'NNS')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
3
duck
duck duck 84
[('like', 'IN'), ('the', 'DT'), ('duck', 'NN'), ('tales', 'NNS')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
4
duck
duck duck 84
[('the', 'DT'), ('duck', 'NN'), ('tales', 'VBZ'), ('don', 'JJ'), ('t', 'NN'), ('got', 'VBD'), ('a', 'DT'), ('dog', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'honey', 24, 29]
honey
honey honey 304
[('what', 'WP'), ('s', 'VBD'), ('the', 'DT'), ('matter', 'NN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
loading solution set
calculating
set([(1481, (41, 49)), (163, (11, 15)), (723, (57, 62)), (850, (66, 74)), (69, (28, 34)), (650, (37, 45)), (1124, (24, 33)), (618, (19, 25)), (1217, (25, 34)), (1026, (77, 82)), (551, (15, 23)), (465, (30, 37)), (47, (21, 27)), (733, (29, 34)), (837, (45, 53)), (401, (19, 24)), (745, (8, 14)), (647, (28, 36)), (661, (16, 21)), (755, (58, 63)), (505, (19, 25)), (510, (17, 23)), (1202, (31, 40)), (915, (31, 39)), (1143, (23, 32)), (1489, (17, 25)), (1486, (17, 25)), (1164, (36, 45)), (163, (26, 38)), (133, (23, 28)), (438, (14, 20)), (865, (28, 36)), (37, (18, 23)), (850, (34, 39)), (792, (24, 32)), (809, (44, 52)), (505, (41, 47)), (137, (10, 15)), (739, (20, 26)), (1550, (9, 17)), (450, (23, 31)), (447, (13, 22)), (1226, (31, 39)), (714, (57, 62)), (462, (25, 32)), (441, (34, 41)), (804, (28, 36)), (608, (25, 31)), (53, (27, 33)), (689, (25, 33)), (390, (14, 20)), (526, (17, 25)), (623, (26, 32)), (763, (31, 36)), (160, (15, 20)), (770, (48, 56)), (453, (13, 21))])
[((37, (18, 23)), '*MOT:\tso you want juice like that (.) ?\n'), ((47, (21, 27)), '*BRO:\tI like it with cheese .\n'), ((53, (27, 33)), "*MOT:\tI don't have (.) xxx cheese .\n"), ((69, (28, 34)), "*MOT:\tI don't have any good cheese look .\n"), ((133, (23, 28)), '*MOT:\tdo you like that juice ?\n'), ((137, (10, 15)), '*CHI:\txxx juice .\n'), ((160, (15, 20)), '*MOT:\tthis (.) juice .\n'), ((163, (11, 15)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((163, (26, 38)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((390, (14, 20)), '*MOT:\teat the muffin then .\n'), ((401, (19, 24)), '*MOT:\tlook at this water .\n'), ((438, (14, 20)), '*MOT:\teat the muffin okay .\n'), ((441, (34, 41)), "*MOT:\thurry up and I'll get you a vitamin (.) after you finish your dinner ?\n"), ((447, (13, 22)), '*BRO:\tI want popsicles .\n'), ((450, (23, 31)), "*MOT:\tthat's right the popsicle too .\n"), ((453, (13, 21)), '*BRO:\twant a popsicle (.) ?\n'), ((462, (25, 32)), "*CHI:\tbut I don't want a vitamin .\n"), ((465, (30, 37)), "*MOT:\tthen you won't eat your vitamin that's no problem Mariana .\n"), ((505, (19, 25)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((505, (41, 47)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((510, (17, 23)), '*BRO:\tI hate [!] onions .\n'), ((526, (17, 25)), '*MOT:\tyou want a popsicle you know what to do .\n'), ((551, (15, 23)), '*BRO:\tI want a popsicle .\n'), ((608, (25, 31)), "*BRO:\tI don't like those onions .\n"), ((618, (19, 25)), "*BRO:\tI don't want onions .\n"), ((623, (26, 32)), "*MOT:\tit doesn't have any onions Mikey .\n"), ((647, (28, 36)), "*MOT:\t&-uh Mikey's having a popsicle .\n"), ((650, (37, 45)), "*MOT:\tmaybe Mariana doesn't want any popsicle (.) .\n"), ((661, (16, 21)), '*MOT:\tdrink the juice too (.) .\n'), ((689, (25, 33)), "*BRO:\tbet it'll melt the popsicle .\n"), ((714, (57, 62)), '*MOT:\ttell [/] tell Mariana to come in now and drink the juice .\n'), ((723, (57, 62)), '*BRO:\tMariana [!] Mariana [!] come on [?] and drink your juice .\n'), ((733, (29, 34)), '*MOT:\tokay Mariana drink the juice .\n'), ((739, (20, 26)), '*MOT:\tand eat your <muffin [?] > [>] .\n'), ((745, (8, 14)), '*CHI:\ta muffin ?\n'), ((755, (58, 63)), '*MOT:\teither one as long as you eat it (.) and drink your juice (.) .\n'), ((763, (31, 36)), '*MOT:\twould you like some more juice ?\n'), ((770, (48, 56)), "*MOT:\tfinish that xxx and then I'll get you the popsicle .\n"), ((792, (24, 32)), '*MOT:\thow can you eat a popsicle then (.) ?\n'), ((804, (28, 36)), "*BRO:\twhen you [//] I eat a popsicle <I don't> [/] I don't +...\n"), ((809, (44, 52)), "*BRO:\tI was eating in the store and I ate a popsicle and I didn't hurt my throat .\n"), ((837, (45, 53)), "*MOT:\tgood lord if you drink you can't eat a popsicle if it is gonna (.) create so much pain .\n"), ((850, (34, 39)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((850, (66, 74)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((865, (28, 36)), "*MOT:\tthen you can't have a popsicle if it's only going to <hurt your> [/] hurt your throat .\n"), ((915, (31, 39)), "*MOT:\tyou're not able to eat a popsicle <so xxx> [>] .\n"), ((1026, (77, 82)), '*CHI:\t<he says> [/] <he says> [//] <Mikey says> [>] [/] Mikey says only this juice .\n'), ((1124, (24, 33)), '*BRO:\tno but there were popsicles in the box .\n'), ((1143, (23, 32)), "*MOT:\tthere're no more popsicles .\n"), ((1164, (36, 45)), '*MOT:\thow can you expect to be more popsicles ?\n'), ((1202, (31, 40)), '*BRO:\tnuhhuh when we get those popsicles (.) those are for the picnic .\n'), ((1217, (25, 34)), '*CHI:\tand I can open the popsicles .\n'), ((1226, (31, 39)), '*CHI:\t<and I> [<] can open the popsicle .\n'), ((1481, (41, 49)), '*MOT:\t<not right now when you finish the popsicle> [>] .\n'), ((1486, (17, 25)), '*BRO:\t<bite your popsicle> [<] .\n'), ((1489, (17, 25)), '*BRO:\tbite your <popsicle Mariana> [>] .\n'), ((1550, (9, 17)), '*BRO:\tmy popsicle melting .\n')]
set([(1481, (41, 49)), (163, (11, 15)), (2346, (24, 29)), (723, (57, 62)), (850, (66, 74)), (69, (28, 34)), (650, (37, 45)), (1124, (24, 33)), (618, (19, 25)), (1217, (25, 34)), (1026, (77, 82)), (1315, (10, 15)), (551, (15, 23)), (465, (30, 37)), (47, (21, 27)), (733, (29, 34)), (837, (45, 53)), (273, (33, 37)), (2175, (19, 23)), (745, (8, 14)), (647, (28, 36)), (661, (16, 21)), (1054, (11, 16)), (2040, (20, 24)), (1955, (28, 33)), (755, (58, 63)), (1235, (24, 28)), (505, (19, 25)), (510, (17, 23)), (1202, (31, 40)), (915, (31, 39)), (1143, (23, 32)), (2043, (20, 24)), (1071, (15, 20)), (1486, (17, 25)), (1164, (36, 45)), (2153, (23, 27)), (163, (26, 38)), (133, (23, 28)), (438, (14, 20)), (865, (28, 36)), (526, (17, 25)), (850, (34, 39)), (2150, (6, 10)), (792, (24, 32)), (809, (44, 52)), (1226, (31, 39)), (2188, (10, 14)), (505, (41, 47)), (763, (31, 36)), (137, (10, 15)), (739, (20, 26)), (1550, (9, 17)), (1057, (10, 15)), (658, (14, 19)), (450, (23, 31)), (447, (13, 22)), (1041, (25, 30)), (459, (24, 28)), (534, (15, 19)), (241, (26, 30)), (714, (57, 62)), (462, (25, 32)), (441, (34, 41)), (804, (28, 36)), (608, (25, 31)), (53, (27, 33)), (689, (25, 33)), (390, (14, 20)), (441, (68, 74)), (37, (18, 23)), (623, (26, 32)), (401, (19, 24)), (160, (15, 20)), (770, (48, 56)), (453, (13, 21))])
[((37, (18, 23)), '*MOT:\tso you want juice like that (.) ?\n'), ((47, (21, 27)), '*BRO:\tI like it with cheese .\n'), ((53, (27, 33)), "*MOT:\tI don't have (.) xxx cheese .\n"), ((69, (28, 34)), "*MOT:\tI don't have any good cheese look .\n"), ((133, (23, 28)), '*MOT:\tdo you like that juice ?\n'), ((137, (10, 15)), '*CHI:\txxx juice .\n'), ((160, (15, 20)), '*MOT:\tthis (.) juice .\n'), ((163, (11, 15)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((163, (26, 38)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((241, (26, 30)), '*MOT:\tbecause she ate her food .\n'), ((273, (33, 37)), '*MOT:\tyou have_to do is eat your food .\n'), ((390, (14, 20)), '*MOT:\teat the muffin then .\n'), ((401, (19, 24)), '*MOT:\tlook at this water .\n'), ((438, (14, 20)), '*MOT:\teat the muffin okay .\n'), ((441, (34, 41)), "*MOT:\thurry up and I'll get you a vitamin (.) after you finish your dinner ?\n"), ((441, (68, 74)), "*MOT:\thurry up and I'll get you a vitamin (.) after you finish your dinner ?\n"), ((447, (13, 22)), '*BRO:\tI want popsicles .\n'), ((450, (23, 31)), "*MOT:\tthat's right the popsicle too .\n"), ((453, (13, 21)), '*BRO:\twant a popsicle (.) ?\n'), ((459, (24, 28)), '*BRO:\tthen (.) eat your food !\n'), ((462, (25, 32)), "*CHI:\tbut I don't want a vitamin .\n"), ((465, (30, 37)), "*MOT:\tthen you won't eat your vitamin that's no problem Mariana .\n"), ((505, (19, 25)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((505, (41, 47)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((510, (17, 23)), '*BRO:\tI hate [!] onions .\n'), ((526, (17, 25)), '*MOT:\tyou want a popsicle you know what to do .\n'), ((534, (15, 19)), '*MOT:\teat your food .\n'), ((551, (15, 23)), '*BRO:\tI want a popsicle .\n'), ((608, (25, 31)), "*BRO:\tI don't like those onions .\n"), ((618, (19, 25)), "*BRO:\tI don't want onions .\n"), ((623, (26, 32)), "*MOT:\tit doesn't have any onions Mikey .\n"), ((647, (28, 36)), "*MOT:\t&-uh Mikey's having a popsicle .\n"), ((650, (37, 45)), "*MOT:\tmaybe Mariana doesn't want any popsicle (.) .\n"), ((658, (14, 19)), '*MOT:\tcome on honey [?] (.) .\n'), ((661, (16, 21)), '*MOT:\tdrink the juice too (.) .\n'), ((689, (25, 33)), "*BRO:\tbet it'll melt the popsicle .\n"), ((714, (57, 62)), '*MOT:\ttell [/] tell Mariana to come in now and drink the juice .\n'), ((723, (57, 62)), '*BRO:\tMariana [!] Mariana [!] come on [?] and drink your juice .\n'), ((733, (29, 34)), '*MOT:\tokay Mariana drink the juice .\n'), ((739, (20, 26)), '*MOT:\tand eat your <muffin [?] > [>] .\n'), ((745, (8, 14)), '*CHI:\ta muffin ?\n'), ((755, (58, 63)), '*MOT:\teither one as long as you eat it (.) and drink your juice (.) .\n'), ((763, (31, 36)), '*MOT:\twould you like some more juice ?\n'), ((770, (48, 56)), "*MOT:\tfinish that xxx and then I'll get you the popsicle .\n"), ((792, (24, 32)), '*MOT:\thow can you eat a popsicle then (.) ?\n'), ((804, (28, 36)), "*BRO:\twhen you [//] I eat a popsicle <I don't> [/] I don't +...\n"), ((809, (44, 52)), "*BRO:\tI was eating in the store and I ate a popsicle and I didn't hurt my throat .\n"), ((837, (45, 53)), "*MOT:\tgood lord if you drink you can't eat a popsicle if it is gonna (.) create so much pain .\n"), ((850, (34, 39)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((850, (66, 74)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((865, (28, 36)), "*MOT:\tthen you can't have a popsicle if it's only going to <hurt your> [/] hurt your throat .\n"), ((915, (31, 39)), "*MOT:\tyou're not able to eat a popsicle <so xxx> [>] .\n"), ((1026, (77, 82)), '*CHI:\t<he says> [/] <he says> [//] <Mikey says> [>] [/] Mikey says only this juice .\n'), ((1041, (25, 30)), '*MOT:\twe have a cherry a grape and an orange one .\n'), ((1054, (11, 16)), '*BRO:\t<the grape> [<] .\n'), ((1057, (10, 15)), '*BRO:\tthe grape .\n'), ((1071, (15, 20)), "*MOT:\tthat's a grape .\n"), ((1124, (24, 33)), '*BRO:\tno but there were popsicles in the box .\n'), ((1143, (23, 32)), "*MOT:\tthere're no more popsicles .\n"), ((1164, (36, 45)), '*MOT:\thow can you expect to be more popsicles ?\n'), ((1202, (31, 40)), '*BRO:\tnuhhuh when we get those popsicles (.) those are for the picnic .\n'), ((1217, (25, 34)), '*CHI:\tand I can open the popsicles .\n'), ((1226, (31, 39)), '*CHI:\t<and I> [<] can open the popsicle .\n'), ((1235, (24, 28)), "*BRO:\tthat's (.) Donald Duck .\n"), ((1315, (10, 15)), '*MOT:\twhy honey ?\n'), ((1481, (41, 49)), '*MOT:\t<not right now when you finish the popsicle> [>] .\n'), ((1486, (17, 25)), '*BRO:\t<bite your popsicle> [<] .\n'), ((1550, (9, 17)), '*BRO:\tmy popsicle melting .\n'), ((1955, (28, 33)), '*MOT:\tyou finish that first honey .\n'), ((2040, (20, 24)), "*BRO:\tthat's Donald_Duck .\n"), ((2043, (20, 24)), "*BRO:\tthat's Donald_Duck <Mom> [>] .\n"), ((2150, (6, 10)), '*MOT:\tDuck_Tales .\n'), ((2153, (23, 27)), '*BRO:\tthis xxx was the Duck_Tales .\n'), ((2175, (19, 23)), '*MOT:\tlike [?] the duck tales .\n'), ((2188, (10, 14)), "*BRO:\tthe duck tales don't got a dog .\n"), ((2346, (24, 29)), "*MOT:\twhat's the matter honey [>] ?\n")]
calculating accuracy and recall
correct labels:
set(['cheese', 'popsicle', 'muffin', 'vitamin', 'popsicles', 'water', 'juice', 'strawberries', 'onions', 'milk'])
predicted labels:
set(['cheese', 'grape', 'popsicle', 'food', 'muffin', 'honey', 'vitamin', 'popsicles', 'water', 'juice', 'dinner', 'strawberries', 'duck', 'onions', 'milk'])
file:HSLLD/HV1/MT//anamt1.cha
precision: 0.666666666667
recall: 1.0
true positives:['cheese', 'juice', 'milk', 'muffin', 'onions', 'popsicle', 'popsicles', 'strawberries', 'vitamin', 'water']
false positives: ['dinner', 'duck', 'food', 'grape', 'honey']
false negatives: []
# true pos: 10
# false pos: 5
# false neg: 0
HSLLD/HV1/MT//conmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
descended from food: [['N'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'juice', 16, 21]
juice
juice juice 52
[('m', 'NN'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
6
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'juice', 11, 16]
descended from food: [['N'], 'milk', 6, 10]
juice
juice juice 52
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['juice']
('food -> ', [])
milk
milk milk 46
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
6
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'juice', 11, 16]
descended from food: [['N'], 'milk', 6, 10]
juice
juice juice 52
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('zzz', 'NN')]
['juice']
('food -> ', [])
milk
milk milk 46
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('zzz', 'NN')]
['milk']
('food -> ', [])
candidates to check:
6
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'juice', 11, 16]
descended from food: [['N'], 'milk', 6, 10]
juice
juice juice 52
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['juice']
('food -> ', [])
milk
milk milk 46
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
26
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'juice', 15, 20]
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'juice', 15, 20]
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'juice', 15, 20]
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'juice', 15, 20]
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'juice', 15, 20]
descended from food: [['N'], 'milk', 6, 10]
juice
juice juice 52
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['juice']
('food -> ', [])
milk
milk milk 46
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'supper', 30, 36]
candidates to check:
1
descended from food: [['N'], 'juice', 10, 15]
juice
juice juice 52
[('no', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'supper', 24, 30]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
6
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'milk', 11, 15]
milk
milk milk 46
[('more', 'RBR'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 26, 30]
milk
milk milk 46
[('say', 'NN'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('more', 'JJR'), ('milk', 'NN'), ('please', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 22, 26]
milk
milk milk 46
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('more', 'JJR'), ('milk', 'NN'), ('please', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
water
water water 18
[('xxx', 'NN'), ('just', 'RB'), ('a', 'DT'), ('quick', 'JJ'), ('glass', 'NN'), ('of', 'IN'), ('water', 'NN'), ('and', 'CC'), ('we', 'PRP'), ('re', 'VBP'), ('gon', 'VB'), ('na', 'TO'), ('go', 'VB'), ('back', 'RB')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'coffee', 18, 24]
coffee
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a7c2560>)
[('that', 'DT'), ('s', 'VBZ'), ('that', 'IN'), ('coffee', 'NN'), ('i', 'NN'), ('made', 'VBN'), ('by', 'IN'), ('mistake', 'NN')]
['coffee']
('food -> ', [])
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'coffee', 20, 26]
descended from food: [['N'], 'mix', 27, 30]
coffee
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a7d03f8>)
[('this', 'DT'), ('dumb', 'JJ'), ('coffee', 'NN'), ('mix', 'NN')]
['coffee']
('food -> ', [])
candidates to check:
5
fruit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a7dc878>)
[('there', 'RB'), ('s', 'JJ'), ('um', 'JJ'), ('fruit', 'NN'), ('punch', 'NN'), ('in', 'IN'), ('the', 'DT'), ('yellow', 'JJ'), ('jug', 'NN'), ('10', 'CD')]
['fruit']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 13, 17]
milk
milk milk 46
[('little', 'JJ'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN'), ('mama', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'spaghetti', 6, 15]
spaghetti
spaghetti spaghetti 100
[('spaghetti', 'NNS'), ('on', 'IN'), ('his', 'PRP$'), ('shirt', 'NN')]
['spaghetti']
('food -> ', [['spaghetti', 'Meals, Entrees, and Side Dishes']])
candidates to check:
3
candidates to check:
4
candidates to check:
7
descended from food: [['N'], 'diet', 25, 29]
candidates to check:
1
peaches
peaches peaches 72
[('behind', 'IN'), ('the', 'DT'), ('peaches', 'NNS')]
['peaches']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'milk', 46, 50]
milk
milk milk 46
[('xxx', 'NN'), ('because', 'IN'), ('you', 'PRP'), ('drank', 'VBP'), ('all', 'DT'), ('of', 'IN'), ('that', 'DT'), ('milk', 'NN'), ('so', 'RB'), ('fast', 'RB'), ('that', 'IN'), ('s', 'NN'), ('probably', 'RB'), ('why', 'WRB')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'milk', 26, 30]
milk
milk milk 46
[('you', 'PRP'), ('drank', 'VBP'), ('all', 'PDT'), ('that', 'DT'), ('milk', 'NN'), ('up', 'RP')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'diet', 22, 26]
candidates to check:
4
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'tomato', 18, 24]
tomato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a7fb758>)
[('here', 'RB'), ('have', 'VBP'), ('a', 'DT'), ('tomato', 'NN'), ('jake', 'NN')]
['tomato']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 22, 26]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'tomato', 14, 20]
tomato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a78ef80>)
[('another', 'DT'), ('tomato', 'NN')]
['tomato']
('food -> ', [])
candidates to check:
1
cucumber
cucumber cucumber 12
[('cucumber', 'NN')]
['cucumber']
('food -> ', [])
candidates to check:
2
candidates to check:
1
lettuce
lettuce lettuce 16
[('some', 'DT'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
1
lettuce
lettuce lettuce 16
[('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
2
lettuce
lettuce lettuce 16
[('i', 'NNS'), ('like', 'VBP'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
1
candidates to check:
5
descended from food: [['N'], 'tomatoes', 42, 50]
lettuce
lettuce lettuce 16
[('there', 'RB'), ('s', 'VBZ'), ('a', 'DT'), ('whole', 'JJ'), ('bowl', 'NN'), ('with', 'IN'), ('two', 'CD'), ('tomatoes', 'NNS'), ('and', 'CC'), ('a', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
tomatoes
tomatoes tomatoes 213
[('there', 'RB'), ('s', 'VBZ'), ('a', 'DT'), ('whole', 'JJ'), ('bowl', 'NN'), ('with', 'IN'), ('two', 'CD'), ('tomatoes', 'NNS'), ('and', 'CC'), ('a', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('lettuce', 'NN')]
['tomatoes']
('food -> ', [])
candidates to check:
1
candidates to check:
2
lettuce
lettuce lettuce 16
[('conner', 'NN'), ('do', 'VBP'), ('you', 'PRP'), ('want', 'VB'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'tomatoes', 22, 30]
tomatoes
tomatoes tomatoes 213
[('and', 'CC'), ('do', 'VB'), ('you', 'PRP'), ('want', 'VB'), ('tomatoes', 'NNS'), ('too', 'RB')]
['tomatoes']
('food -> ', [])
candidates to check:
1
lettuce
lettuce lettuce 16
[('no', 'DT'), ('just', 'RB'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'diet', 23, 27]
dressing
dressing dressing 169
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('any', 'DT'), ('diet', 'JJ'), ('dressing', 'NN'), ('for', 'IN'), ('you', 'PRP'), ('may', 'MD')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
1
descended from food: [['N'], 'salad', 47, 52]
dressing
dressing dressing 169
[('oh', 'IN'), ('you', 'PRP'), ('can', 'MD'), ('t', 'VB'), ('have', 'VB'), ('dressing', 'VBG'), ('on', 'IN'), ('your', 'PRP$'), ('salad', 'NN')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
1
dressing
dressing dressing 169
[('put', 'VB'), ('your', 'PRP$'), ('finger', 'NN'), ('dressing', 'VBG')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'diet', 52, 56]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'dressing', 29, 37]
dressing
dressing dressing 169
[('oh', 'IN'), ('you', 'PRP'), ('didn', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('the', 'DT'), ('dressing', 'NN')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
1
lettuce
lettuce lettuce 16
[('you', 'PRP'), ('just', 'RB'), ('want', 'VBP'), ('the', 'DT'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'salad', 30, 35]
candidates to check:
1
descended from food: [['N'], 'salad', 11, 16]
candidates to check:
2
descended from food: [['N'], 'salad', 11, 16]
candidates to check:
1
candidates to check:
3
lettuce
lettuce lettuce 16
[('xxx', 'NN'), ('lettuce', 'NN'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
1
lettuce
lettuce lettuce 16
[('i', 'NN'), ('want', 'VBP'), ('two', 'CD'), ('more', 'JJR'), ('the', 'DT'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
1
lettuce
lettuce lettuce 16
[('you', 'PRP'), ('like', 'IN'), ('the', 'DT'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [])
candidates to check:
5
candidates to check:
1
candidates to check:
2
dressing
dressing dressing 169
[('you', 'PRP'), ('have', 'VBP'), ('plenty', 'NN'), ('of', 'IN'), ('dressing', 'VBG'), ('there', 'EX'), ('jake', 'NN')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
2
candidates to check:
2
fat
fat fat 900
[('i', 'NN'), ('m', 'VBP'), ('a', 'DT'), ('fat', 'JJ'), ('cow', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
candidates to check:
2
candidates to check:
4
descended from food: [['N'], 'diet', 63, 67]
candidates to check:
6
descended from food: [['N'], 'lunch', 42, 47]
descended from food: [['N'], 'salad', 108, 113]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'salad', 27, 32]
candidates to check:
2
descended from food: [['N'], 'tomato', 21, 27]
tomato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a751ea8>)
[('this', 'DT'), ('is', 'VBZ'), ('a', 'DT'), ('big', 'JJ'), ('tomato', 'NN')]
['tomato']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'lunch', 38, 43]
candidates to check:
2
loading solution set
calculating
set([(51, (63, 68)), (889, (19, 26)), (819, (29, 37)), (48, (6, 16)), (722, (9, 19)), (686, (66, 73)), (51, (47, 51)), (686, (42, 50)), (44, (6, 16)), (390, (13, 17)), (51, (69, 73)), (51, (6, 10)), (36, (6, 10)), (48, (17, 21)), (719, (14, 21)), (39, (6, 16)), (394, (6, 10)), (51, (58, 62)), (578, (18, 24)), (368, (18, 24)), (654, (14, 20)), (51, (52, 57)), (291, (22, 26)), (769, (26, 34)), (80, (24, 30)), (441, (6, 15)), (51, (36, 40)), (658, (6, 14)), (44, (17, 21)), (828, (30, 37)), (901, (25, 33)), (51, (30, 35)), (51, (15, 20)), (486, (17, 24)), (869, (18, 25)), (30, (16, 21)), (288, (26, 30)), (671, (6, 13)), (760, (47, 52)), (479, (25, 34)), (527, (26, 30)), (51, (25, 29)), (675, (13, 20)), (665, (11, 21)), (745, (23, 36)), (346, (32, 37)), (869, (10, 17)), (760, (24, 32)), (847, (32, 42)), (51, (41, 46)), (281, (11, 15)), (878, (26, 33)), (521, (46, 50)), (26, (6, 10)), (62, (10, 15)), (715, (22, 30)), (39, (17, 21)), (668, (11, 18)), (708, (25, 32))])
[((26, (6, 10)), '*CHI:\tmilk [!] .\n'), ((30, (16, 21)), '*JAK:\t<&m> [//] juice .\n'), ((36, (6, 10)), '*FAT:\tmilk .\n'), ((39, (6, 16)), '*MOT:\tmilk juice milk .\n'), ((39, (17, 21)), '*MOT:\tmilk juice milk .\n'), ((44, (6, 16)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (17, 21)), '*CHI:\tmilk juice milk zzz .\n'), ((48, (6, 16)), '*FAT:\tmilk juice milk .\n'), ((48, (17, 21)), '*FAT:\tmilk juice milk .\n'), ((51, (6, 10)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (15, 20)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (25, 29)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (30, 35)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (36, 40)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (41, 46)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (47, 51)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (52, 57)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (58, 62)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (63, 68)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (69, 73)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((62, (10, 15)), '*JAK:\t<no juice> [<] .\n'), ((80, (24, 30)), '*MOT:\twell you eat some supper now before I give you more okay (11.) ?\n'), ((281, (11, 15)), '*CHI:\tmore milk (.) .\n'), ((288, (26, 30)), '*MOT:\tsay can I have more milk please .\n'), ((291, (22, 26)), '*CHI:\tcan I have more milk please .\n'), ((346, (32, 37)), "*SIS:\txxx just a quick glass of water and we're gonna go back .\n"), ((368, (18, 24)), "*MOT:\tthat's that coffee I made by mistake .\n"), ((390, (13, 17)), '*CHI:\tlittle milk ?\n'), ((394, (6, 10)), '*CHI:\tmilk Mama ?\n'), ((441, (6, 15)), '*MOT:\tspaghetti on his shirt .\n'), ((479, (25, 34)), "*SIS:\tyou didn't buy xxx diet soda ?\n"), ((486, (17, 24)), '*MOT:\tbehind the peaches .\n'), ((521, (46, 50)), "*MOT:\t<xxx> [<] because you drank all of that milk so fast that's probably why .\n"), ((527, (26, 30)), '*JAK:\tyou drank all that <milk> [>] up .\n'), ((578, (18, 24)), '*MOT:\there have a tomato Jake .\n'), ((654, (14, 20)), '*MOT:\tanother tomato ?\n'), ((658, (6, 14)), '*MOT:\tcucumber ?\n'), ((665, (11, 21)), '*CHI:\tmore cucum(ber) .\n'), ((668, (11, 18)), '*MOT:\tsome lettuce .\n'), ((671, (6, 13)), '*MOT:\tlettuce ?\n'), ((675, (13, 20)), '*JAK:\tI like lettuce !\n'), ((686, (42, 50)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((686, (66, 73)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((708, (25, 32)), '*MOT:\tConner do you want lettuce ?\n'), ((715, (22, 30)), '*MOT:\tand do you want tomatoes too ?\n'), ((719, (14, 21)), '*CHI:\tno just lettuce .\n'), ((722, (9, 19)), '*CHI:\tno (to)matoes !\n'), ((745, (23, 36)), "*MOT:\tI don't have any diet dressing for you May .\n"), ((760, (24, 32)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((760, (47, 52)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((769, (26, 34)), '*SIS:\tput your finger [?] dressing .\n'), ((819, (29, 37)), "*MOT:\toh you didn't want the dressing ?\n"), ((828, (30, 37)), '*MOT:\t<you just> [<] want the lettuce ?\n'), ((847, (32, 42)), '*JAK:\twith salad with some more (to)matoes .\n'), ((869, (10, 17)), '*CHI:\txxx lettuce lettuce .\n'), ((869, (18, 25)), '*CHI:\txxx lettuce lettuce .\n'), ((878, (26, 33)), '*JAK:\tI want two more the lettuce .\n'), ((889, (19, 26)), '*MOT:\tyou like the lettuce ?\n'), ((901, (25, 33)), '*MOT:\tyou have plenty of dressing there Jake .\n')]
set([(51, (63, 68)), (558, (22, 26)), (48, (6, 10)), (39, (11, 16)), (44, (11, 16)), (51, (36, 40)), (686, (66, 73)), (786, (52, 56)), (51, (47, 51)), (686, (42, 50)), (377, (20, 26)), (527, (26, 30)), (390, (13, 17)), (51, (69, 73)), (51, (6, 10)), (36, (6, 10)), (479, (25, 29)), (48, (17, 21)), (719, (14, 21)), (760, (47, 52)), (394, (6, 10)), (51, (58, 62)), (578, (18, 24)), (889, (19, 26)), (368, (18, 24)), (654, (14, 20)), (59, (30, 36)), (51, (52, 57)), (291, (22, 26)), (637, (22, 26)), (80, (24, 30)), (847, (11, 16)), (915, (12, 15)), (828, (30, 37)), (441, (6, 15)), (708, (25, 32)), (658, (6, 14)), (26, (6, 10)), (769, (26, 34)), (1189, (38, 43)), (901, (25, 33)), (51, (30, 35)), (51, (15, 20)), (486, (17, 24)), (869, (18, 25)), (30, (16, 21)), (288, (26, 30)), (745, (28, 36)), (521, (46, 50)), (1028, (21, 27)), (835, (30, 35)), (946, (42, 47)), (671, (6, 13)), (384, (19, 24)), (819, (29, 37)), (44, (6, 10)), (39, (6, 10)), (51, (25, 29)), (1023, (27, 32)), (675, (13, 20)), (841, (11, 16)), (346, (32, 37)), (869, (10, 17)), (760, (24, 32)), (51, (41, 46)), (281, (11, 15)), (878, (26, 33)), (934, (63, 67)), (48, (11, 16)), (44, (17, 21)), (62, (10, 15)), (715, (22, 30)), (39, (17, 21)), (745, (23, 27)), (668, (11, 18)), (377, (27, 30)), (946, (108, 113))])
[((26, (6, 10)), '*CHI:\tmilk [!] .\n'), ((30, (16, 21)), '*JAK:\t<&m> [//] juice .\n'), ((36, (6, 10)), '*FAT:\tmilk .\n'), ((39, (6, 10)), '*MOT:\tmilk juice milk .\n'), ((39, (11, 16)), '*MOT:\tmilk juice milk .\n'), ((39, (17, 21)), '*MOT:\tmilk juice milk .\n'), ((44, (6, 10)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (11, 16)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (17, 21)), '*CHI:\tmilk juice milk zzz .\n'), ((48, (6, 10)), '*FAT:\tmilk juice milk .\n'), ((48, (11, 16)), '*FAT:\tmilk juice milk .\n'), ((48, (17, 21)), '*FAT:\tmilk juice milk .\n'), ((51, (6, 10)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (15, 20)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (25, 29)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (30, 35)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (36, 40)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (41, 46)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (47, 51)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (52, 57)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (58, 62)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (63, 68)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (69, 73)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((59, (30, 36)), '*MOT:\txxx Jake wants xxx <xxx supper> [>] .\n'), ((62, (10, 15)), '*JAK:\t<no juice> [<] .\n'), ((80, (24, 30)), '*MOT:\twell you eat some supper now before I give you more okay (11.) ?\n'), ((281, (11, 15)), '*CHI:\tmore milk (.) .\n'), ((288, (26, 30)), '*MOT:\tsay can I have more milk please .\n'), ((291, (22, 26)), '*CHI:\tcan I have more milk please .\n'), ((346, (32, 37)), "*SIS:\txxx just a quick glass of water and we're gonna go back .\n"), ((368, (18, 24)), "*MOT:\tthat's that coffee I made by mistake .\n"), ((377, (20, 26)), '*SIS:\tthis dumb [?] coffee mix .\n'), ((377, (27, 30)), '*SIS:\tthis dumb [?] coffee mix .\n'), ((384, (19, 24)), "*MOT:\tthere's &-um fruit punch in the yellow jug (10.) .\n"), ((390, (13, 17)), '*CHI:\tlittle milk ?\n'), ((394, (6, 10)), '*CHI:\tmilk Mama ?\n'), ((441, (6, 15)), '*MOT:\tspaghetti on his shirt .\n'), ((479, (25, 29)), "*SIS:\tyou didn't buy xxx diet soda ?\n"), ((486, (17, 24)), '*MOT:\tbehind the peaches .\n'), ((521, (46, 50)), "*MOT:\t<xxx> [<] because you drank all of that milk so fast that's probably why .\n"), ((527, (26, 30)), '*JAK:\tyou drank all that <milk> [>] up .\n'), ((558, (22, 26)), "*MOT:\tthat's on May's diet .\n"), ((578, (18, 24)), '*MOT:\there have a tomato Jake .\n'), ((637, (22, 26)), "*MOT:\tdon't talk with food in your mouth .\n"), ((654, (14, 20)), '*MOT:\tanother tomato ?\n'), ((658, (6, 14)), '*MOT:\tcucumber ?\n'), ((668, (11, 18)), '*MOT:\tsome lettuce .\n'), ((671, (6, 13)), '*MOT:\tlettuce ?\n'), ((675, (13, 20)), '*JAK:\tI like lettuce !\n'), ((686, (42, 50)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((686, (66, 73)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((708, (25, 32)), '*MOT:\tConner do you want lettuce ?\n'), ((715, (22, 30)), '*MOT:\tand do you want tomatoes too ?\n'), ((719, (14, 21)), '*CHI:\tno just lettuce .\n'), ((745, (23, 27)), "*MOT:\tI don't have any diet dressing for you May .\n"), ((745, (28, 36)), "*MOT:\tI don't have any diet dressing for you May .\n"), ((760, (24, 32)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((760, (47, 52)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((769, (26, 34)), '*SIS:\tput your finger [?] dressing .\n'), ((786, (52, 56)), '*SIS:\tthere was one piece of paper in here with the diet .\n'), ((819, (29, 37)), "*MOT:\toh you didn't want the dressing ?\n"), ((828, (30, 37)), '*MOT:\t<you just> [<] want the lettuce ?\n'), ((835, (30, 35)), '*JAK:\t<&w> [/] <&w> [/] <with salad> [>] .\n'), ((841, (11, 16)), '*JAK:\twith salad .\n'), ((847, (11, 16)), '*JAK:\twith salad with some more (to)matoes .\n'), ((869, (10, 17)), '*CHI:\txxx lettuce lettuce .\n'), ((869, (18, 25)), '*CHI:\txxx lettuce lettuce .\n'), ((878, (26, 33)), '*JAK:\tI want two more the lettuce .\n'), ((889, (19, 26)), '*MOT:\tyou like the lettuce ?\n'), ((901, (25, 33)), '*MOT:\tyou have plenty of dressing there Jake .\n'), ((915, (12, 15)), "*CHI:\tI'm a fat cow !\n"), ((934, (63, 67)), '*SIS:\tdo you know where the other part of the &-um paper of my diet is ?\n'), ((946, (42, 47)), '*SIS:\tyeah I had that little piece xxx my lunch and when I got_to my drink and when I got_to the end of the salad I was full .\n'), ((946, (108, 113)), '*SIS:\tyeah I had that little piece xxx my lunch and when I got_to my drink and when I got_to the end of the salad I was full .\n'), ((1023, (27, 32)), "*CHI:\tJake you <didn't eat salad> [>] .\n"), ((1028, (21, 27)), '*MOT:\t<this is a big tomato> [<] .\n'), ((1189, (38, 43)), "*MOT:\twell then I'm gonna save it for lunch tomorrow .\n")]
calculating accuracy and recall
correct labels:
set(['diet soda', 'peaches', 'coffee', 'salad', 'lettuce', 'diet dressing', '(to)matoes', 'cucum(ber)', 'water', 'juice', 'cucumber', 'tomato', 'supper', 'dressing', 'milk juice', 'spaghetti', 'milk', 'tomatoes'])
predicted labels:
set(['tomato', 'peaches', 'coffee', 'salad', 'mix', 'food', 'dressing', 'diet', 'water', 'juice', 'fruit', 'cucumber', 'fat', 'lunch', 'supper', 'lettuce', 'spaghetti', 'milk', 'tomatoes'])
file:HSLLD/HV1/MT//conmt1.cha
precision: 0.684210526316
recall: 0.722222222222
true positives:['coffee', 'cucumber', 'dressing', 'juice', 'lettuce', 'milk', 'peaches', 'salad', 'spaghetti', 'supper', 'tomato', 'tomatoes', 'water']
false positives: ['diet', 'fat', 'food', 'fruit', 'lunch', 'mix']
false negatives: ['(to)matoes', 'cucum(ber)', 'diet dressing', 'diet soda', 'milk juice']
# true pos: 13
# false pos: 6
# false neg: 5
HSLLD/HV1/MT//sopmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//sopmt1.cha
HSLLD/HV1/MT//ethmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'food', 71, 75]
candidates to check:
1
descended from food: [['N'], 'meat', 63, 67]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a689ef0>)
[('you', 'PRP'), ('may', 'MD'), ('wh', 'VB'), ('ile', 'NN'), ('just', 'RB'), ('while', 'IN'), ('i', 'NNS'), ('s', 'VBP'), ('cut', 'VBN'), ('up', 'RP'), ('the', 'DT'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'biscuits', 19, 27]
biscuits
biscuits biscuits 263
[('xxx', 'NN'), ('and', 'CC'), ('um', 'JJ'), ('biscuits', 'NNS')]
['biscuits']
('food -> ', [['biscuits', 'Baked Products']])
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'strawberry', 18, 28]
descended from food: [['N'], 'chocolate', 32, 41]
strawberry
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a697680>)
[('do', 'VBP'), ('you', 'PRP'), ('want', 'VB'), ('strawberry', 'NN'), ('or', 'CC'), ('chocolate', 'NN')]
['strawberry']
('food -> ', [])
chocolate
chocolate chocolate 598
[('do', 'VBP'), ('you', 'PRP'), ('want', 'VB'), ('strawberry', 'NN'), ('or', 'CC'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'chocolate', 6, 15]
chocolate
chocolate chocolate 598
[('chocolate', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'chicken', 19, 26]
chicken
chicken chicken 234
[('so', 'RB'), ('how', 'WRB'), ('s', 'JJ'), ('the', 'DT'), ('chicken', 'NN'), ('look', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
1
descended from food: [['N'], 'chicken', 10, 17]
chicken
chicken chicken 234
[('the', 'DT'), ('chicken', 'NN'), ('is', 'VBZ'), ('too', 'RB')]
['chicken']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'chicken', 10, 17]
chicken
chicken chicken 234
[('the', 'DT'), ('chicken', 'NN'), ('is', 'VBZ'), ('should', 'MD'), ('be', 'VB'), ('pretty', 'JJ'), ('cool', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
9
chicken
chicken chicken 234
[('i', 'JJ'), ('m', 'NN'), ('afraid', 'VBD'), ('the', 'DT'), ('chicken', 'NN'), ('is', 'VBZ'), ('uh', 'JJ'), ('not', 'RB'), ('as', 'RB'), ('well', 'RB'), ('cooked', 'VBN'), ('as', 'IN'), ('as', 'RB'), ('usual', 'JJ')]
['chicken']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'biscuits', 59, 67]
biscuits
biscuits biscuits 263
[('well', 'RB'), ('it', 'PRP'), ('s', 'VBZ'), ('it', 'PRP'), ('s', 'VBZ'), ('probably', 'RB'), ('better', 'RBR'), ('cooked', 'VBN'), ('than', 'IN'), ('the', 'DT'), ('biscuits', 'NNS'), ('though', 'IN')]
['biscuits']
('food -> ', [['biscuits', 'Baked Products']])
candidates to check:
1
candidates to check:
5
descended from food: [['N'], 'barbecue', 46, 54]
barbecue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a617c20>)
[('well', 'RB'), ('i', 'RB'), ('told', 'VBD'), ('nathaniel', 'CC'), ('that', 'IN'), ('going', 'VBG'), ('out', 'IN'), ('to', 'TO'), ('barbecue', 'VB'), ('saves', 'NNS'), ('more', 'JJR'), ('of', 'IN'), ('a', 'DT'), ('symbolic', 'JJ'), ('cash', 'NN'), ('than', 'IN'), ('after', 'IN'), ('it', 'PRP'), ('was', 'VBD'), ('started', 'VBN'), ('barbecuing', 'VBG'), ('season', 'NN')]
['barbecue']
('food -> ', [])
candidates to check:
3
candidates to check:
3
descended from food: [['N'], 'chicken', 16, 23]
chicken
chicken chicken 234
[('how', 'WRB'), ('s', 'VBZ'), ('the', 'DT'), ('chicken', 'NN'), ('munchkin', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
honey
honey honey 304
[('do', 'VBP'), ('you', 'PRP'), ('have', 'VB'), ('to', 'TO'), ('use', 'VB'), ('the', 'DT'), ('bath', 'NN'), ('room', 'NN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'biscuits', 32, 40]
biscuits
biscuits biscuits 263
[('the', 'DT'), ('bi', 'NN'), ('s', 'NN'), ('cuits', 'VBZ'), ('the', 'DT'), ('biscuits', 'NNS'), ('aren', 'VBP'), ('t', 'NN'), ('burned', 'VBD')]
['biscuits']
('food -> ', [['biscuits', 'Baked Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'food', 60, 64]
candidates to check:
2
candidates to check:
2
chicken
chicken chicken 234
[('oh', 'IN'), ('the', 'DT'), ('chicken', 'NN'), ('s', 'NN'), ('xxx', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
1
candidates to check:
4
candidates to check:
8
descended from food: [['N'], 'barbecue', 24, 32]
barbecue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a5a0b90>)
[('usually', 'RB'), ('the', 'DT'), ('first', 'JJ'), ('barbecue', 'NN'), ('of', 'IN'), ('the', 'DT'), ('year', 'NN'), ('the', 'DT'), ('chicken', 'NN'), ('isn', 'NN'), ('t', 'NN'), ('cooked', 'VBD'), ('right', 'JJ'), ('it', 'PRP'), ('takes', 'VBZ'), ('a', 'DT'), ('couple', 'NN'), ('times', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('warm', 'NN'), ('weather', 'NN')]
['barbecue']
('food -> ', [])
chicken
chicken chicken 234
[('usually', 'RB'), ('the', 'DT'), ('first', 'JJ'), ('barbecue', 'NN'), ('of', 'IN'), ('the', 'DT'), ('year', 'NN'), ('the', 'DT'), ('chicken', 'NN'), ('isn', 'NN'), ('t', 'NN'), ('cooked', 'VBD'), ('right', 'JJ'), ('it', 'PRP'), ('takes', 'VBZ'), ('a', 'DT'), ('couple', 'NN'), ('times', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('warm', 'NN'), ('weather', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'barbecue', 81, 89]
barbecue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a5aa368>)
[('in', 'IN'), ('the', 'DT'), ('warm', 'JJ'), ('weather', 'NN'), ('you', 'PRP'), ('can', 'MD'), ('still', 'RB'), ('cook', 'VB'), ('it', 'PRP'), ('and', 'CC'), ('just', 'RB'), ('stay', 'VB'), ('out', 'RB'), ('there', 'RB'), ('with', 'IN'), ('the', 'DT'), ('barbecue', 'NN')]
['barbecue']
('food -> ', [])
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'dinner', 30, 36]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
9
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'honey', -1, 4]
honey
honey honey 304
[('we', 'PRP'), ('gave', 'VBD'), ('her', 'PRP'), ('her', 'PRP$'), ('birthday', 'JJ'), ('present', 'JJ'), ('honey', 'NN'), ('in', 'IN'), ('august', 'NN'), ('when', 'WRB'), ('she', 'PRP'), ('had', 'VBD'), ('her', 'PRP'), ('birthday', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
9
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
7
candidates to check:
1
candidates to check:
1
candidates to check:
8
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'chicken', 28, 35]
chicken
chicken chicken 234
[('want', 'VB'), ('another', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
4
descended from food: [['N'], 'biscuits', 25, 33]
descended from food: [['N'], 'chicken', 43, 50]
descended from food: [['N'], 'biscuits', 25, 33]
biscuits
biscuits biscuits 263
[('i', 'NNS'), ('like', 'VBP'), ('to', 'TO'), ('wrap', 'VB'), ('the', 'DT'), ('biscuits', 'NNS'), ('and', 'CC'), ('have', 'VBP'), ('chicken', 'VBN'), ('and', 'CC'), ('biscuits', 'NNS')]
['biscuits']
('food -> ', [['biscuits', 'Baked Products']])
chicken
chicken chicken 234
[('i', 'NNS'), ('like', 'VBP'), ('to', 'TO'), ('wrap', 'VB'), ('the', 'DT'), ('biscuits', 'NNS'), ('and', 'CC'), ('have', 'VBP'), ('chicken', 'VBN'), ('and', 'CC'), ('biscuits', 'NNS')]
['chicken']
('food -> ', [['biscuits', 'Baked Products']])
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'dinner', 20, 26]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
honey
honey honey 304
[('i', 'NN'), ('learned', 'VBD'), ('it', 'PRP'), ('from', 'IN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
honey
honey honey 304
[('that', 'DT'), ('was', 'VBD'), ('a', 'DT'), ('nice', 'JJ'), ('one', 'CD'), ('of', 'IN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
10
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
descended from food: [['N'], 'dinner', 11, 17]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'dinner', 108, 114]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'dinner', 24, 30]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
cake
cake cake 412
[('i', 'NN'), ('think', 'VBP'), ('maybe', 'RB'), ('we', 'PRP'), ('should', 'MD'), ('celebrate', 'VB'), ('brook', 'NN'), ('s', 'NN'), ('birthday', 'NN'), ('today', 'NN'), ('even', 'RB'), ('though', 'IN'), ('we', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('a', 'DT'), ('cake', 'NN')]
['cake']
('food -> ', [['cake', 'Baked Products']])
candidates to check:
4
candidates to check:
2
descended from food: [['N'], 'eggs', 23, 27]
eggs
eggs eggs 131
[('make', 'VB'), ('a', 'DT'), ('cake', 'NN'), ('with', 'IN'), ('eggs', 'NNS')]
['eggs']
('food -> ', [['eggs', 'Dairy and Egg Products']])
cake
cake cake 412
[('make', 'VB'), ('a', 'DT'), ('cake', 'NN'), ('with', 'IN'), ('eggs', 'NNS')]
['cake']
('food -> ', [['eggs', 'Dairy and Egg Products'], ['cake', 'Baked Products']])
candidates to check:
2
descended from food: [['N'], 'eggs', 12, 16]
eggs
eggs eggs 131
[('need', 'NN'), ('eggs', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('a', 'DT'), ('cake', 'NN')]
['eggs']
('food -> ', [['eggs', 'Dairy and Egg Products']])
cake
cake cake 412
[('need', 'NN'), ('eggs', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('a', 'DT'), ('cake', 'NN')]
['cake']
('food -> ', [['eggs', 'Dairy and Egg Products'], ['cake', 'Baked Products']])
candidates to check:
8
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'honey', -1, 4]
honey
honey honey 304
[('what', 'WP'), ('is', 'VBZ'), ('it', 'PRP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
descended from food: [['N'], 'eggs', 30, 34]
eggs
eggs eggs 131
[('well', 'RB'), ('do', 'VBP'), ('we', 'PRP'), ('have', 'VB'), ('any', 'DT'), ('eggs', 'NNS')]
['eggs']
('food -> ', [['eggs', 'Dairy and Egg Products']])
candidates to check:
6
descended from food: [['N'], 'honey', -1, 4]
honey
honey honey 304
[('honey', 'NN'), ('we', 'PRP'), ('don', 'VBP'), ('t', 'RB'), ('have', 'VBP'), ('time', 'NN'), ('to', 'TO'), ('make', 'VB'), ('a', 'DT'), ('cake', 'NN'), ('tonight', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
cake
cake cake 412
[('honey', 'NN'), ('we', 'PRP'), ('don', 'VBP'), ('t', 'RB'), ('have', 'VBP'), ('time', 'NN'), ('to', 'TO'), ('make', 'VB'), ('a', 'DT'), ('cake', 'NN'), ('tonight', 'NN')]
['cake']
('food -> ', [['honey', 'Sweets'], ['cake', 'Baked Products']])
candidates to check:
3
candidates to check:
2
cake
cake cake 412
[('so', 'RB'), ('brook', 'JJ'), ('doesn', 'NN'), ('t', 'NN'), ('eat', 'NN'), ('cake', 'NN')]
['cake']
('food -> ', [['cake', 'Baked Products']])
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'food', 38, 42]
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'food', 18, 22]
candidates to check:
2
candidates to check:
10
white fish
white fish white fish 119
[('white', 'JJ'), ('fish', 'JJ'), ('ocean', 'NN'), ('white', 'JJ'), ('fish', 'JJ'), ('flavor', 'NN')]
['white', 'fish']
('food -> ', [['white fish', 'Finfish and Shellfish Products']])
fish
fish fish 305
[('white', 'JJ'), ('fish', 'JJ'), ('ocean', 'NN'), ('white', 'JJ'), ('fish', 'JJ'), ('flavor', 'NN')]
['fish']
('food -> ', [['white fish', 'Finfish and Shellfish Products']])
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
7
candidates to check:
1
candidates to check:
6
candidates to check:
5
candidates to check:
7
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'honey', -1, 4]
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'dinner', 23, 29]
candidates to check:
2
descended from food: [['N'], 'chicken', 26, 33]
chicken
chicken chicken 234
[('think', 'NN'), ('that', 'IN'), ('s', 'VBZ'), ('enough', 'JJ'), ('chicken', 'NN'), ('for', 'IN'), ('him', 'PRP')]
['chicken']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
descended from food: [['N'], 'honey', -1, 4]
honey
honey honey 304
[('and', 'CC'), ('could', 'MD'), ('you', 'PRP'), ('sit', 'VB'), ('put', 'VB'), ('your', 'PRP$'), ('fishing', 'NN'), ('rod', 'VB'), ('down', 'RP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
9
descended from food: [['N'], 'gum', 6, 9]
descended from food: [['N'], 'gum', 6, 9]
candidates to check:
7
descended from food: [['N'], 'gum', 28, 31]
descended from food: [['N'], 'gum', 28, 31]
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'dinner', 11, 17]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'milk', 14, 18]
milk
milk milk 46
[('is', 'VBZ'), ('your', 'PRP$'), ('milk', 'NN'), ('finished', 'VBN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
loading solution set
calculating
set([(317, (10, 17)), (2568, (27, 31)), (2568, (12, 16)), (2716, (6, 14)), (2707, (7, 15)), (2988, (15, 23)), (750, (13, 20)), (168, (6, 15)), (2732, (6, 16)), (150, (32, 37)), (425, (16, 23)), (2349, (58, 63)), (2559, (13, 17)), (2988, (6, 14)), (1504, (55, 63)), (775, (53, 60)), (309, (10, 17)), (584, (32, 40)), (2376, (56, 61)), (2537, (91, 95)), (2637, (30, 34)), (137, (19, 27)), (171, (19, 26)), (2991, (32, 40)), (2559, (23, 27)), (393, (59, 67)), (161, (6, 11)), (3082, (14, 18)), (164, (18, 28)), (2897, (26, 33)), (2654, (27, 31)), (2732, (23, 33)), (1504, (43, 50)), (1504, (25, 33)), (33, (63, 67)), (1092, (30, 35)), (2644, (41, 45)), (1464, (28, 35)), (387, (25, 32)), (164, (32, 41))])
[((33, (63, 67)), '*MOT:\tyou may <wh(ile)> [//] just while I <&s> [//] cut up the meat .\n'), ((137, (19, 27)), '*MOT:\txxx and &-um biscuits .\n'), ((150, (32, 37)), '*FAT:\t&-uh (.) do you want some Quick ?\n'), ((161, (6, 11)), '*CHI:\tQuick .\n'), ((164, (18, 28)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((164, (32, 41)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((168, (6, 15)), '*CHI:\tchocolate .\n'), ((171, (19, 26)), "*MOT:\tso how's the chicken look ?\n"), ((309, (10, 17)), '*CHI:\tthe chicken is too ?\n'), ((317, (10, 17)), '*MOT:\tthe chicken is [//] should be pretty cool .\n'), ((387, (25, 32)), "*FAT:\tI'm afraid the (.) chicken is &-uh (.) not as well cooked as [/] as usual .\n"), ((393, (59, 67)), "*MOT:\twell <it's> [/] it's probably better cooked than the biscuits though .\n"), ((425, (16, 23)), "*FAT:\thow's the chicken Munchkin ?\n"), ((584, (32, 40)), "*FAT:\t<the bi(s)cuits> [//] the biscuits aren't burned .\n"), ((750, (13, 20)), "*MOT:\toh the chicken's xxx .\n"), ((775, (53, 60)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((1092, (30, 35)), '*FAT:\t(a)re you drinking your Quick ?\n'), ((1464, (28, 35)), '*MOT:\twant another piece of chicken ?\n'), ((1504, (25, 33)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (43, 50)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (55, 63)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((2349, (58, 63)), '*FAT:\twell teacher I want you to make sure you drink your Quick and I want you to make sure you finish your dinner .\n'), ((2376, (56, 61)), '*FAT:\they teach make sure you &-uh finish drinking your Quick .\n'), ((2537, (91, 95)), "*MOT:\tI think maybe we should celebrate Brook's birthday today even though we don't have a cake .\n"), ((2559, (13, 17)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2559, (23, 27)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2568, (12, 16)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2568, (27, 31)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2637, (30, 34)), '*CHI:\twell (.) do we have any eggs ?\n'), ((2644, (41, 45)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2654, (27, 31)), "*MOT:\tso Brook doesn't eat cake .\n"), ((2707, (7, 15)), "*CHI:\t<McDonald's> [>] ?\n"), ((2716, (6, 14)), "*CHI:\tMcDonald's ?\n"), ((2732, (6, 16)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2732, (23, 33)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2897, (26, 33)), "*MOT:\tthink that's enough chicken for him ?\n"), ((2988, (6, 14)), '*CHI:\tgum drop gum drop .\n'), ((2988, (15, 23)), '*CHI:\tgum drop gum drop .\n'), ((2991, (32, 40)), '*CHI:\tnot by the hair of my gum gum drop .\n'), ((3082, (14, 18)), '*MOT:\tis your milk finished ?\n')]
set([(317, (10, 17)), (2568, (27, 31)), (20, (71, 75)), (2568, (12, 16)), (2988, (6, 9)), (1527, (20, 26)), (2991, (28, 31)), (513, (41, 46)), (715, (60, 64)), (750, (13, 20)), (784, (81, 89)), (168, (6, 15)), (2732, (6, 16)), (2887, (23, 29)), (1940, (24, 29)), (2660, (38, 42)), (425, (16, 23)), (2633, (17, 22)), (2349, (108, 114)), (2975, (56, 61)), (2559, (13, 17)), (410, (46, 54)), (2897, (26, 33)), (1504, (55, 63)), (2861, (11, 16)), (775, (53, 60)), (309, (10, 17)), (584, (32, 40)), (2537, (91, 95)), (3060, (11, 17)), (2637, (30, 34)), (1171, (39, 44)), (137, (19, 27)), (171, (19, 26)), (978, (30, 36)), (2559, (23, 27)), (393, (59, 67)), (2478, (24, 30)), (2644, (-1, 4)), (164, (18, 28)), (2290, (11, 17)), (2654, (27, 31)), (2644, (6, 11)), (2720, (18, 22)), (1504, (43, 50)), (2975, (-1, 4)), (1504, (25, 33)), (33, (63, 67)), (775, (24, 32)), (2644, (41, 45)), (2633, (-1, 4)), (1943, (29, 34)), (1464, (28, 35)), (387, (25, 32)), (1171, (-1, 4)), (3082, (14, 18)), (164, (32, 41)), (2861, (-1, 4)), (2732, (23, 33))])
[((20, (71, 75)), "*MOT:\talright please [?] color something while you're waiting for your food ?\n"), ((33, (63, 67)), '*MOT:\tyou may <wh(ile)> [//] just while I <&s> [//] cut up the meat .\n'), ((137, (19, 27)), '*MOT:\txxx and &-um biscuits .\n'), ((164, (18, 28)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((164, (32, 41)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((168, (6, 15)), '*CHI:\tchocolate .\n'), ((171, (19, 26)), "*MOT:\tso how's the chicken look ?\n"), ((309, (10, 17)), '*CHI:\tthe chicken is too ?\n'), ((317, (10, 17)), '*MOT:\tthe chicken is [//] should be pretty cool .\n'), ((387, (25, 32)), "*FAT:\tI'm afraid the (.) chicken is &-uh (.) not as well cooked as [/] as usual .\n"), ((393, (59, 67)), "*MOT:\twell <it's> [/] it's probably better cooked than the biscuits though .\n"), ((410, (46, 54)), '*FAT:\twell I told Nathaniel that going out to barbecue saves more of a symbolic cash than after it was started barbecuing season .\n'), ((425, (16, 23)), "*FAT:\thow's the chicken Munchkin ?\n"), ((513, (41, 46)), '*MOT:\tdo you have_to use the bath+room , Honey ?\n'), ((584, (32, 40)), "*FAT:\t<the bi(s)cuits> [//] the biscuits aren't burned .\n"), ((715, (60, 64)), '*MOT:\tif you have_to go to the bath+room come back and have food to eat after that .\n'), ((750, (13, 20)), "*MOT:\toh the chicken's xxx .\n"), ((775, (24, 32)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((775, (53, 60)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((784, (81, 89)), '*FAT:\tin the warm weather you can still cook it and just stay out there with the barbecue .\n'), ((978, (30, 36)), "*MOT:\tI'll wait (un)til after dinner then .\n"), ((1171, (-1, 4)), '*MOT:\twe gave her her birthday present Honey in August when she had her birthday .\n'), ((1171, (39, 44)), '*MOT:\twe gave her her birthday present Honey in August when she had her birthday .\n'), ((1464, (28, 35)), '*MOT:\twant another piece of chicken ?\n'), ((1504, (25, 33)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (43, 50)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (55, 63)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1527, (20, 26)), '*FAT:\tI want to eat dinner .\n'), ((1940, (24, 29)), '*CHI:\tI learned it from Honey [?] .\n'), ((1943, (29, 34)), '*MOT:\tthat was a nice one of Honey .\n'), ((2290, (11, 17)), "*MOT:\tit's dinner time not play time .\n"), ((2349, (108, 114)), '*FAT:\twell teacher I want you to make sure you drink your Quick and I want you to make sure you finish your dinner .\n'), ((2478, (24, 30)), '*MOT:\twhen he comes for dinner .\n'), ((2537, (91, 95)), "*MOT:\tI think maybe we should celebrate Brook's birthday today even though we don't have a cake .\n"), ((2559, (13, 17)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2559, (23, 27)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2568, (12, 16)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2568, (27, 31)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2633, (-1, 4)), '*MOT:\twhat is it Honey ?\n'), ((2633, (17, 22)), '*MOT:\twhat is it Honey ?\n'), ((2637, (30, 34)), '*CHI:\twell (.) do we have any eggs ?\n'), ((2644, (-1, 4)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2644, (6, 11)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2644, (41, 45)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2654, (27, 31)), "*MOT:\tso Brook doesn't eat cake .\n"), ((2660, (38, 42)), '*MOT:\tI think (.) I have a can of cat food I bought for Brook and I have that present that I got him ?\n'), ((2720, (18, 22)), "*MOT:\tno it's cat food .\n"), ((2732, (6, 16)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2732, (23, 33)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2861, (-1, 4)), '*MOT:\twhat Honey ?\n'), ((2861, (11, 16)), '*MOT:\twhat Honey ?\n'), ((2887, (23, 29)), "*FAT:\twe can put Bro's dinner away and he can have it when he gets back .\n"), ((2897, (26, 33)), "*MOT:\tthink that's enough chicken for him ?\n"), ((2975, (-1, 4)), '*FAT:\tand could you sit [///] put your fishing rod down Honey .\n'), ((2975, (56, 61)), '*FAT:\tand could you sit [///] put your fishing rod down Honey .\n'), ((2988, (6, 9)), '*CHI:\tgum drop gum drop .\n'), ((2991, (28, 31)), '*CHI:\tnot by the hair of my gum gum drop .\n'), ((3060, (11, 17)), '*MOT:\tthis dinner was something [!] .\n'), ((3082, (14, 18)), '*MOT:\tis your milk finished ?\n')]
calculating accuracy and recall
correct labels:
set(['meat', 'mcdonald', 'gum drop', 'eggs', 'chocolate', 'strawberry', 'cake', 'quick', 'chicken', 'biscuits', 'milk', 'white fish'])
predicted labels:
set(['', 'meat', 'food', 'eggs', 'gum', 'chocolate', 'honey', 'strawberry', 'dinner', 'white fish', 'cake', 'barbecue', 'chicken', 'biscuits', 'milk'])
file:HSLLD/HV1/MT//ethmt1.cha
precision: 0.6
recall: 0.75
true positives:['biscuits', 'cake', 'chicken', 'chocolate', 'eggs', 'meat', 'milk', 'strawberry', 'white fish']
false positives: ['', 'barbecue', 'dinner', 'food', 'gum', 'honey']
false negatives: ['gum drop', 'mcdonald', 'quick']
# true pos: 9
# false pos: 6
# false neg: 3
HSLLD/HV1/MT//brtmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
descended from food: [['N'], 'food', 25, 29]
candidates to check:
1
descended from food: [['N'], 'food', 25, 29]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 49, 53]
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'tonic', 44, 49]
candidates to check:
1
descended from food: [['N'], 'tonic', 45, 50]
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'tonic', 11, 16]
candidates to check:
1
descended from food: [['N'], 'food', 28, 32]
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'meat', 16, 20]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a720fc8>)
[('want', 'VB'), ('some', 'DT'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'meat', 6, 10]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a724248>)
[('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'meat', 6, 10]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a7243b0>)
[('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
loading solution set
calculating
set([(240, (6, 10)), (230, (16, 20)), (237, (6, 10))])
[((230, (16, 20)), '*CHI:\twant some meat .\n'), ((237, (6, 10)), '*CHI:\tmeat .\n'), ((240, (6, 10)), '*MOT:\tmeat ?\n')]
set([(178, (11, 16)), (240, (6, 10)), (181, (28, 32)), (99, (44, 49)), (104, (45, 50)), (32, (49, 53)), (230, (16, 20)), (15, (25, 29)), (18, (25, 29)), (237, (6, 10))])
[((15, (25, 29)), '*MOT:\t<thank you for our food amen> [>] .\n'), ((18, (25, 29)), '*CHI:\t<thank you for our food amen>[<] .\n'), ((32, (49, 53)), '*CHI:\tGod is good God is great thank him for our food .\n'), ((99, (44, 49)), "*MOT:\tjust leave it in there it'll keep the tonic cold .\n"), ((104, (45, 50)), "*CHI:\t<I can't get the> [//] I can't get the tonic .\n"), ((178, (11, 16)), '*CHI:\tmore tonic .\n'), ((181, (28, 32)), '*MOT:\tyeah eat some of your food then you can have some more to drink .\n'), ((230, (16, 20)), '*CHI:\twant some meat .\n'), ((237, (6, 10)), '*CHI:\tmeat .\n'), ((240, (6, 10)), '*MOT:\tmeat ?\n')]
calculating accuracy and recall
correct labels:
set(['meat'])
predicted labels:
set(['food', 'tonic', 'meat'])
file:HSLLD/HV1/MT//brtmt1.cha
precision: 0.333333333333
recall: 1.0
true positives:['meat']
false positives: ['food', 'tonic']
false negatives: []
# true pos: 1
# false pos: 2
# false neg: 0
HSLLD/HV1/MT//aprmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 32, 36]
candidates to check:
1
descended from food: [['N'], 'food', 32, 36]
candidates to check:
1
candidates to check:
1
corn
corn corn 419
[('you', 'PRP'), ('want', 'VBP'), ('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'potatoes', 6, 14]
potatoes
potatoes potatoes 62
[('potatoes', 'NNS'), ('there', 'RB')]
['potatoes']
('food -> ', [])
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'potatoes', 28, 36]
potatoes
potatoes potatoes 62
[('thank', 'NN'), ('i', 'NN'), ('like', 'IN'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 23, 27]
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 21, 25]
milk
milk milk 46
[('we', 'PRP'), ('got', 'VBD'), ('koolaid', 'VBN'), ('milk', 'NN'), ('and', 'CC'), ('water', 'NN')]
['milk']
('food -> ', [])
water
water water 18
[('we', 'PRP'), ('got', 'VBD'), ('koolaid', 'VBN'), ('milk', 'NN'), ('and', 'CC'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
7
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'potatoes', 23, 31]
potatoes
potatoes potatoes 62
[('eat', 'VB'), ('some', 'DT'), ('of', 'IN'), ('your', 'PRP$'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'chicken', 19, 26]
chicken
chicken chicken 234
[('anybody', 'NN'), ('want', 'VBP'), ('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
5
descended from food: [['N'], 'food', 64, 68]
cream
cream cream 72
[('and', 'CC'), ('maybe', 'RB'), ('if', 'IN'), ('you', 'PRP'), ('sit', 'VBP'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN'), ('talk', 'NN'), ('and', 'CC'), ('eat', 'VB'), ('your', 'PRP$'), ('food', 'NN'), ('or', 'CC'), ('and', 'CC'), ('probably', 'RB'), ('can', 'MD'), ('have', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('afterwards', 'NNS')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('and', 'CC'), ('maybe', 'RB'), ('if', 'IN'), ('you', 'PRP'), ('sit', 'VBP'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN'), ('talk', 'NN'), ('and', 'CC'), ('eat', 'VB'), ('your', 'PRP$'), ('food', 'NN'), ('or', 'CC'), ('and', 'CC'), ('probably', 'RB'), ('can', 'MD'), ('have', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('afterwards', 'NNS')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
4
cream
cream cream 72
[('who', 'WP'), ('want', 'VBP'), ('ice', 'NN'), ('cream', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('who', 'WP'), ('want', 'VBP'), ('ice', 'NN'), ('cream', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'honey', 24, 29]
honey
honey honey 304
[('this', 'DT'), ('is', 'VBZ'), ('delicious', 'JJ'), ('honey', 'NN'), ('got', 'VBD'), ('all', 'DT'), ('up', 'RB'), ('on', 'IN'), ('my', 'PRP$'), ('dress', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
4
descended from food: [['N'], 'diet', 66, 70]
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
descended from food: [['N'], 'diet', 30, 34]
candidates to check:
12
descended from food: [['N'], 'diet', 6, 10]
descended from food: [['N'], 'diet', 6, 10]
descended from food: [['N'], 'diet', 6, 10]
ginger ale
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a398f80>)
[('diet', 'JJ'), ('sprite', 'JJ'), ('diet', 'JJ'), ('slice', 'NN'), ('diet', 'JJ'), ('ginger', 'NN'), ('ale', 'NN')]
['ginger', 'ale']
('food -> ', [])
ginger
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a392e60>)
[('diet', 'JJ'), ('sprite', 'JJ'), ('diet', 'JJ'), ('slice', 'NN'), ('diet', 'JJ'), ('ginger', 'NN'), ('ale', 'NN')]
['ginger']
('food -> ', [])
sprite
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a394128>)
[('diet', 'JJ'), ('sprite', 'JJ'), ('diet', 'JJ'), ('slice', 'NN'), ('diet', 'JJ'), ('ginger', 'NN'), ('ale', 'NN')]
['sprite']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'lunch', 17, 22]
descended from food: [['N'], 'dinner', 34, 40]
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'salad', 28, 33]
candidates to check:
3
descended from food: [['N'], 'salad', 26, 31]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'foods', 102, 107]
candidates to check:
5
descended from food: [['N'], 'meal', 49, 53]
descended from food: [['N'], 'diet', 64, 68]
candidates to check:
6
descended from food: [['N'], 'diet', 72, 76]
candidates to check:
12
descended from food: [['N'], 'lunch', 21, 26]
descended from food: [['N'], 'ham', 47, 50]
descended from food: [['N'], 'sandwich', 51, 59]
descended from food: [['N'], 'lunch', 21, 26]
descended from food: [['N'], 'apple', 91, 96]
ham
ham ham 141
[('so', 'RB'), ('today', 'NN'), ('i', 'NN'), ('had', 'VBD'), ('lunch', 'NN'), ('and', 'CC'), ('took', 'VBD'), ('me', 'PRP'), ('a', 'DT'), ('spice', 'NN'), ('ham', 'NN'), ('sandwich', 'NN'), ('to', 'TO'), ('eat', 'VB'), ('lunch', 'NN'), ('and', 'CC'), ('then', 'RB'), ('i', 'VB'), ('had', 'VBD'), ('an', 'DT'), ('apple', 'NN')]
['ham']
('food -> ', [])
candidates to check:
4
descended from food: [['N'], 'diet', 27, 31]
descended from food: [['N'], 'lunch', 43, 48]
sprite
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a395ef0>)
[('and', 'CC'), ('i', 'NN'), ('had', 'VBD'), ('a', 'DT'), ('um', 'JJ'), ('diet', 'JJ'), ('sprite', 'NN'), ('for', 'IN'), ('lunch', 'NN')]
['sprite']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'dinner', 41, 47]
candidates to check:
2
descended from food: [['N'], 'lunch', 48, 53]
candidates to check:
2
candidates to check:
1
broccoli
broccoli broccoli 30
[('i', 'NN'), ('got', 'VBD'), ('some', 'DT'), ('broccoli', 'NN'), ('in', 'IN'), ('there', 'EX')]
['broccoli']
('food -> ', [])
candidates to check:
14
descended from food: [['N'], 'pork', 35, 39]
descended from food: [['N'], 'pork', 35, 39]
descended from food: [['N'], 'food', 115, 119]
broccoli
broccoli broccoli 30
[('and', 'CC'), ('uh', 'JJ'), ('xxx', 'NN'), ('and', 'CC'), ('put', 'VB'), ('pork', 'NN'), ('chops', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('that', 'DT'), ('baby', 'NN'), ('pork', 'NN'), ('chops', 'NNS'), ('and', 'CC'), ('fix', 'VB'), ('the', 'DT'), ('broccoli', 'NN'), ('and', 'CC'), ('i', 'NN'), ('have', 'VBP'), ('food', 'NN'), ('tomorrow', 'NN')]
['broccoli']
('food -> ', [])
pork
pork pork 541
[('and', 'CC'), ('uh', 'JJ'), ('xxx', 'NN'), ('and', 'CC'), ('put', 'VB'), ('pork', 'NN'), ('chops', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('that', 'DT'), ('baby', 'NN'), ('pork', 'NN'), ('chops', 'NNS'), ('and', 'CC'), ('fix', 'VB'), ('the', 'DT'), ('broccoli', 'NN'), ('and', 'CC'), ('i', 'NN'), ('have', 'VBP'), ('food', 'NN'), ('tomorrow', 'NN')]
['pork']
('food -> ', [])
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
9
egg
egg egg 357
[('my', 'PRP$'), ('hospital', 'NN'), ('egg', 'NN'), ('crate', 'JJ'), ('thing', 'NN'), ('got', 'VBD'), ('tore', 'RB'), ('up', 'RP')]
['egg']
('food -> ', [])
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'chicken', 28, 35]
chicken
chicken chicken 234
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('more', 'JJR'), ('chicken', 'NNS')]
['chicken']
('food -> ', [])
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'chicken', 36, 43]
chicken
chicken chicken 234
[('grandma', 'NN'), ('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('chicken', 'NNS')]
['chicken']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'chicken', 25, 32]
chicken
chicken chicken 234
[('can', 'MD'), ('have', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('chicken', 'NNS')]
['chicken']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'potatoes', 17, 25]
potatoes
potatoes potatoes 62
[('what', 'WP'), ('about', 'IN'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'potatoes', 18, 26]
potatoes
potatoes potatoes 62
[('she', 'PRP'), ('ate', 'VBD'), ('her', 'PRP'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'potatoes', 15, 23]
potatoes
potatoes potatoes 62
[('you', 'PRP'), ('want', 'VBP'), ('potatoes', 'NNS'), ('april', 'VB')]
['potatoes']
('food -> ', [])
candidates to check:
2
candidates to check:
2
water
water water 18
[('i', 'NN'), ('put', 'VBD'), ('all', 'DT'), ('that', 'IN'), ('water', 'NN'), ('in', 'IN'), ('that', 'DT'), ('thing', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
3
descended from food: [['N'], 'potatoes', 35, 43]
potatoes
potatoes potatoes 62
[('that', 'DT'), ('whole', 'JJ'), ('big', 'JJ'), ('package', 'NN'), ('of', 'IN'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'potatoes', 19, 27]
potatoes
potatoes potatoes 62
[('and', 'CC'), ('then', 'RB'), ('the', 'DT'), ('potatoes', 'NNS'), ('didn', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('enough', 'JJ'), ('water', 'NN'), ('in', 'IN'), ('there', 'EX')]
['potatoes']
('food -> ', [])
water
water water 18
[('and', 'CC'), ('then', 'RB'), ('the', 'DT'), ('potatoes', 'NNS'), ('didn', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('enough', 'JJ'), ('water', 'NN'), ('in', 'IN'), ('there', 'EX')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
water
water water 18
[('i', 'NN'), ('tried', 'VBD'), ('to', 'TO'), ('add', 'VB'), ('more', 'JJR'), ('water', 'NN'), ('to', 'TO'), ('it', 'PRP')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'potatoes', 66, 74]
potatoes
potatoes potatoes 62
[('so', 'IN'), ('it', 'PRP'), ('turned', 'VBD'), ('out', 'RP'), ('to', 'TO'), ('be', 'VB'), ('just', 'RB'), ('enough', 'RB'), ('p', 'JJ'), ('just', 'RB'), ('enough', 'RB'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'chicken', 6, 13]
chicken
chicken chicken 234
[('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
1
corn
corn corn 419
[('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
corn
corn corn 419
[('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'milk', 28, 32]
milk
milk milk 46
[('even', 'RB'), ('with', 'IN'), ('the', 'DT'), ('skim', 'NN'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 31, 35]
milk shake
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a37e440>)
[('kinda', 'NN'), ('kind', 'NN'), ('of', 'IN'), ('like', 'IN'), ('a', 'DT'), ('milk', 'NN'), ('shake', 'NN'), ('xxx', 'NN')]
['milk', 'shake']
('food -> ', [])
milk
milk milk 46
[('kinda', 'NN'), ('kind', 'NN'), ('of', 'IN'), ('like', 'IN'), ('a', 'DT'), ('milk', 'NN'), ('shake', 'NN'), ('xxx', 'NN')]
['milk']
('food -> ', [])
shake
shake shake 148
[('kinda', 'NN'), ('kind', 'NN'), ('of', 'IN'), ('like', 'IN'), ('a', 'DT'), ('milk', 'NN'), ('shake', 'NN'), ('xxx', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
4
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'honey', 6, 11]
honey
honey honey 304
[('honey', 'NN'), ('i', 'NN'), ('tell', 'VBP'), ('you', 'PRP'), ('what', 'WP')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
4
oats
oats oats 389
[('oats', 'NNS'), ('and', 'CC'), ('bran', 'NN'), ('cereal', 'NN')]
['oats']
('food -> ', [])
cereal
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a3359e0>)
[('oats', 'NNS'), ('and', 'CC'), ('bran', 'NN'), ('cereal', 'NN')]
['cereal']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'honey', 30, 35]
oats
oats oats 389
[('oats', 'NNS'), ('and', 'CC'), ('oats', 'NNS'), ('and', 'CC'), ('honey', 'NN')]
['oats']
('food -> ', [])
honey
honey honey 304
[('oats', 'NNS'), ('and', 'CC'), ('oats', 'NNS'), ('and', 'CC'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
3
descended from food: [['N'], 'honey', 27, 32]
honey
honey honey 304
[('somethin', 'JJ'), ('g', 'NN'), ('nut', 'NN'), ('and', 'CC'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'chicken', 33, 40]
fried chicken
fried chicken fried chicken 234
[('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'RBR'), ('fried', 'JJ'), ('chicken', 'NN'), ('whispering', 'NN')]
['fried', 'chicken']
('food -> ', [['fried chicken', 'Legumes and Legume Products']])
chicken
chicken chicken 234
[('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'RBR'), ('fried', 'JJ'), ('chicken', 'NN'), ('whispering', 'NN')]
['chicken']
('food -> ', [['fried chicken', 'Legumes and Legume Products']])
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
7
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
6
descended from food: [['N'], 'cabbage', 9, 16]
cabbage
cabbage cabbage 28
[('my', 'PRP$'), ('cabbage', 'NN'), ('patch', 'NN'), ('do', 'VB'), ('every', 'DT'), ('time', 'NN'), ('she', 'PRP'), ('have', 'VBP'), ('a', 'DT'), ('um', 'JJ'), ('bottle', 'NN'), ('and', 'CC'), ('and', 'CC'), ('a', 'DT'), ('pamper', 'NN')]
['cabbage']
('food -> ', [])
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'popsicles', 34, 43]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
descended from food: [['N'], 'potatoes', 38, 46]
potatoes
potatoes potatoes 62
[('and', 'CC'), ('eat', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('those', 'DT'), ('good', 'JJ'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'potatoes', 32, 40]
potatoes
potatoes potatoes 62
[('eat', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('those', 'DT'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'diet', 40, 44]
candidates to check:
2
cereal
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a25dd88>)
[('she', 'PRP'), ('eats', 'VBZ'), ('cereal', 'NN')]
['cereal']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
cereal
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a25a170>)
[('i', 'NN'), ('got', 'VBD'), ('find', 'VBP'), ('a', 'DT'), ('new', 'JJ'), ('cereal', 'NN')]
['cereal']
('food -> ', [])
candidates to check:
1
loading solution set
calculating
set([(1059, (27, 40)), (1000, (31, 41)), (1031, (6, 26)), (873, (6, 13)), (190, (30, 35)), (598, (27, 38)), (1034, (21, 35)), (270, (19, 26)), (551, (26, 31)), (590, (91, 96)), (876, (6, 10)), (802, (18, 26)), (184, (6, 13)), (163, (13, 20)), (621, (95, 103)), (621, (68, 78)), (267, (23, 31)), (833, (19, 27)), (783, (36, 43)), (1682, (32, 40)), (866, (6, 16)), (583, (26, 30)), (1728, (23, 29)), (790, (25, 32)), (525, (49, 54)), (1677, (38, 46)), (858, (66, 74)), (190, (21, 25)), (190, (13, 20)), (533, (6, 17)), (533, (18, 28)), (571, (64, 73)), (1034, (7, 11)), (70, (21, 25)), (533, (38, 48)), (621, (35, 45)), (443, (15, 24)), (879, (6, 10)), (172, (6, 10)), (536, (34, 43)), (590, (41, 59)), (793, (17, 25)), (548, (28, 33)), (187, (6, 13)), (805, (15, 23)), (99, (28, 36)), (1037, (19, 32)), (433, (103, 112)), (618, (17, 25)), (85, (6, 14)), (830, (35, 43)), (771, (28, 35)), (1634, (34, 43))])
[((70, (21, 25)), '*AUN:\t<you want> [<] corn ?\n'), ((85, (6, 14)), '*MOT:\tpotatoes there .\n'), ((99, (28, 36)), '*COU:\tthank [//] I like (.) potatoes .\n'), ((163, (13, 20)), '*COU:\tI want koolaid [>] .\n'), ((172, (6, 10)), '*CHI:\tmilk [?] .\n'), ((184, (6, 13)), '*CHI:\tkoolaid [>] .\n'), ((187, (6, 13)), '*COU:\tkoolaid [<] .\n'), ((190, (13, 20)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (21, 25)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (30, 35)), '*MOT:\twe got koolaid milk and water .\n'), ((267, (23, 31)), '*AUN:\teat some of your potatoes .\n'), ((270, (19, 26)), '*MOT:\tanybody want chicken ?\n'), ((433, (103, 112)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((443, (15, 24)), '*MOT:\twho want ice cream ?\n'), ((525, (49, 54)), '*MOT:\twhen I go to the store tomorrow and get my sodas .\n'), ((533, (6, 17)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (18, 28)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (38, 48)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((536, (34, 43)), '*MOT:\tand &-um (.) I have my &-uh slim fast .\n'), ((548, (28, 33)), '*AUN:\t<I been living on (.) salad> [<] .\n'), ((551, (26, 31)), "*AUN:\tI've been living on salad for the last week .\n"), ((571, (64, 73)), "*MOT:\t+^ but I'm just gonna try to cut out (.) a meal and drink diet soda .\n"), ((583, (26, 30)), "*MOT:\t+^ I think it's the soda so (.) I'm gonna (.) drink nothin(g) but diet sodas and +...\n"), ((590, (41, 59)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (91, 96)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((598, (27, 38)), '*MOT:\tand I had a &-um (.) diet Sprite for lunch .\n'), ((618, (17, 25)), '*MOT:\tI got some broccoli in there .\n'), ((621, (35, 45)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (68, 78)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (95, 103)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((771, (28, 35)), '*COU:\t<can I have> [<] more chicken ?\n'), ((783, (36, 43)), '*COU:\t<grandma can I have some more chicken> [<] ?\n'), ((790, (25, 32)), '*COU:\tcan have some more chicken ?\n'), ((793, (17, 25)), '*MOT:\twhat about potatoes ?\n'), ((802, (18, 26)), '*AUN:\tshe ate her potatoes .\n'), ((805, (15, 23)), '*MOT:\tyou want potatoes April ?\n'), ((830, (35, 43)), '*MOT:\t+^ that whole big package of potatoes .\n'), ((833, (19, 27)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((858, (66, 74)), '*MOT:\tso it turned out to be (.) <just enough &p> [/] just enough potatoes .\n'), ((866, (6, 16)), '*CHI:\t(po)tatoes .\n'), ((873, (6, 13)), '*CHI:\tchicken ?\n'), ((876, (6, 10)), '*COU:\tcorn [>] .\n'), ((879, (6, 10)), '*CHI:\tcorn [<] .\n'), ((1000, (31, 41)), '*AUN:\tkinda [: kind of] like a milk shake xxx .\n'), ((1031, (6, 26)), '*AUN:\toats and bran cereal ?\n'), ((1034, (7, 11)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (21, 35)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1037, (19, 32)), '*AUN:\tsomethin(g) <nut and honey> [>] ?\n'), ((1059, (27, 40)), '*CHI:\tcan I have some more fried chicken &=whispering .\n'), ((1634, (34, 43)), "*MOT:\tthey're not just to wrap up popsicles with .\n"), ((1677, (38, 46)), '*MOT:\tand eat some more of those good potatoes .\n'), ((1682, (32, 40)), '*MOT:\t+^ eat some more of those potatoes !\n'), ((1728, (23, 29)), '*AUN:\tI got find a new cereal [>] .\n')]
set([(1059, (27, 40)), (571, (64, 68)), (1000, (31, 41)), (1034, (30, 35)), (590, (21, 26)), (53, (32, 36)), (873, (6, 13)), (190, (30, 35)), (1022, (6, 11)), (603, (41, 47)), (621, (68, 72)), (551, (26, 31)), (590, (51, 59)), (876, (6, 10)), (802, (18, 26)), (539, (34, 40)), (507, (66, 70)), (621, (95, 103)), (1707, (40, 44)), (838, (33, 38)), (1031, (20, 26)), (825, (24, 29)), (267, (23, 31)), (621, (115, 119)), (598, (32, 38)), (1486, (9, 16)), (1682, (32, 40)), (833, (47, 52)), (1677, (38, 46)), (598, (43, 48)), (879, (6, 10)), (1728, (23, 29)), (790, (25, 32)), (1034, (21, 25)), (1034, (7, 11)), (562, (102, 107)), (500, (24, 29)), (530, (30, 34)), (1037, (27, 32)), (858, (66, 74)), (190, (21, 25)), (270, (19, 26)), (621, (35, 39)), (70, (21, 25)), (533, (6, 10)), (48, (32, 36)), (533, (11, 17)), (571, (49, 53)), (443, (15, 24)), (172, (6, 10)), (1031, (6, 10)), (144, (23, 27)), (793, (17, 25)), (548, (28, 33)), (805, (15, 23)), (533, (38, 44)), (598, (27, 31)), (997, (28, 32)), (539, (17, 22)), (99, (28, 36)), (1634, (34, 43)), (608, (48, 53)), (583, (72, 76)), (433, (103, 112)), (833, (19, 27)), (618, (17, 25)), (85, (6, 14)), (830, (35, 43)), (433, (64, 68)), (709, (18, 21)), (1710, (18, 24)), (590, (47, 50)), (783, (36, 43)), (771, (28, 35)), (590, (91, 96))])
[((48, (32, 36)), '*MOT:\t<and we thank him for our food amen> [>] .\n'), ((53, (32, 36)), '*CHI:\t<and we thank him for our food amen> [<] .\n'), ((70, (21, 25)), '*AUN:\t<you want> [<] corn ?\n'), ((85, (6, 14)), '*MOT:\tpotatoes there .\n'), ((99, (28, 36)), '*COU:\tthank [//] I like (.) potatoes .\n'), ((144, (23, 27)), '*CHI:\tthank you for my food (.) amen .\n'), ((172, (6, 10)), '*CHI:\tmilk [?] .\n'), ((190, (21, 25)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (30, 35)), '*MOT:\twe got koolaid milk and water .\n'), ((267, (23, 31)), '*AUN:\teat some of your potatoes .\n'), ((270, (19, 26)), '*MOT:\tanybody want chicken ?\n'), ((433, (64, 68)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((433, (103, 112)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((443, (15, 24)), '*MOT:\twho want ice cream ?\n'), ((500, (24, 29)), '*AUN:\tthis is delicious honey got all up on my dress .\n'), ((507, (66, 70)), "*MOT:\twell I'm trying to get back in form again so &-um (.) on my diet today .\n"), ((530, (30, 34)), "*MOT:\tI'm buyin(g) everything diet .\n"), ((533, (6, 10)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (11, 17)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (38, 44)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((539, (17, 22)), '*MOT:\teat it for lunch (.) or for dinner .\n'), ((539, (34, 40)), '*MOT:\teat it for lunch (.) or for dinner .\n'), ((548, (28, 33)), '*AUN:\t<I been living on (.) salad> [<] .\n'), ((551, (26, 31)), "*AUN:\tI've been living on salad for the last week .\n"), ((562, (102, 107)), "*MOT:\twell [/] well I'm gonna try it instead <is xxx> [//] is try to try to xxx to eat just about the foods that I'd like to eat .\n"), ((571, (49, 53)), "*MOT:\t+^ but I'm just gonna try to cut out (.) a meal and drink diet soda .\n"), ((571, (64, 68)), "*MOT:\t+^ but I'm just gonna try to cut out (.) a meal and drink diet soda .\n"), ((583, (72, 76)), "*MOT:\t+^ I think it's the soda so (.) I'm gonna (.) drink nothin(g) but diet sodas and +...\n"), ((590, (21, 26)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (47, 50)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (51, 59)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (91, 96)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((598, (27, 31)), '*MOT:\tand I had a &-um (.) diet Sprite for lunch .\n'), ((598, (32, 38)), '*MOT:\tand I had a &-um (.) diet Sprite for lunch .\n'), ((598, (43, 48)), '*MOT:\tand I had a &-um (.) diet Sprite for lunch .\n'), ((603, (41, 47)), '*MOT:\tand this right here be my &-uh (.) dinner right here .\n'), ((608, (48, 53)), "*MOT:\tand tomorrow I'll drink this for &-uh (.) lunch .\n"), ((618, (17, 25)), '*MOT:\tI got some broccoli in there .\n'), ((621, (35, 39)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (68, 72)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (95, 103)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (115, 119)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((709, (18, 21)), '*MOT:\tmy hospital egg crate thing (.) got tore [?] up .\n'), ((771, (28, 35)), '*COU:\t<can I have> [<] more chicken ?\n'), ((783, (36, 43)), '*COU:\t<grandma can I have some more chicken> [<] ?\n'), ((790, (25, 32)), '*COU:\tcan have some more chicken ?\n'), ((793, (17, 25)), '*MOT:\twhat about potatoes ?\n'), ((802, (18, 26)), '*AUN:\tshe ate her potatoes .\n'), ((805, (15, 23)), '*MOT:\tyou want potatoes April ?\n'), ((825, (24, 29)), '*MOT:\t+^ I put all that water in that thing .\n'), ((830, (35, 43)), '*MOT:\t+^ that whole big package of potatoes .\n'), ((833, (19, 27)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((833, (47, 52)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((838, (33, 38)), '*MOT:\t+^ I tried to add (.) more water to it .\n'), ((858, (66, 74)), '*MOT:\tso it turned out to be (.) <just enough &p> [/] just enough potatoes .\n'), ((873, (6, 13)), '*CHI:\tchicken ?\n'), ((876, (6, 10)), '*COU:\tcorn [>] .\n'), ((879, (6, 10)), '*CHI:\tcorn [<] .\n'), ((997, (28, 32)), '*MOT:\t+^ even with the skim milk .\n'), ((1000, (31, 41)), '*AUN:\tkinda [: kind of] like a milk shake xxx .\n'), ((1022, (6, 11)), '*AUN:\thoney I tell you what .\n'), ((1031, (6, 10)), '*AUN:\toats and bran cereal ?\n'), ((1031, (20, 26)), '*AUN:\toats and bran cereal ?\n'), ((1034, (7, 11)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (21, 25)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (30, 35)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1037, (27, 32)), '*AUN:\tsomethin(g) <nut and honey> [>] ?\n'), ((1059, (27, 40)), '*CHI:\tcan I have some more fried chicken &=whispering .\n'), ((1486, (9, 16)), '*COU:\tmy cabbage patch do every time she have a &-um bottle and [/] and a pamper .\n'), ((1634, (34, 43)), "*MOT:\tthey're not just to wrap up popsicles with .\n"), ((1677, (38, 46)), '*MOT:\tand eat some more of those good potatoes .\n'), ((1682, (32, 40)), '*MOT:\t+^ eat some more of those potatoes !\n'), ((1707, (40, 44)), '*AUN:\txxx is <on a> [/] on a noncooking diet .\n'), ((1710, (18, 24)), '*AUN:\t+^ she eats cereal .\n'), ((1728, (23, 29)), '*AUN:\tI got find a new cereal [>] .\n')]
calculating accuracy and recall
correct labels:
set(['diet soda', 'milk shake', 'apple', 'fried chicken', 'slim fast', 'chicken', 'oats and honey', 'milk', 'ice cream', 'ginger+ale', 'oats and bran cereal', 'popsicles', 'nut and honey', 'diet sprite', 'corn', 'water', 'cereal', '(po)tatoes', 'broccoli', 'koolaid', 'salad', 'oats', 'potatoes', 'sodas', 'spice ham sandwich', 'pork chops', 'soda', 'diet slice'])
predicted labels:
set(['milk shake', 'pork', 'apple', 'fried chicken', 'ginger', 'honey', 'foods', 'chicken', 'milk', 'ice cream', 'ham', 'popsicles', 'sandwich', 'sprite', 'food', 'corn', 'diet', 'water', 'lunch', 'cereal', 'cabbage', 'broccoli', 'salad', 'oats', 'potatoes', 'dinner', 'egg', 'meal'])
file:HSLLD/HV1/MT//aprmt1.cha
precision: 0.5
recall: 0.5
true positives:['apple', 'broccoli', 'cereal', 'chicken', 'corn', 'fried chicken', 'ice cream', 'milk', 'milk shake', 'oats', 'popsicles', 'potatoes', 'salad', 'water']
false positives: ['cabbage', 'diet', 'dinner', 'egg', 'food', 'foods', 'ginger', 'ham', 'honey', 'lunch', 'meal', 'pork', 'sandwich', 'sprite']
false negatives: ['(po)tatoes', 'diet slice', 'diet soda', 'diet sprite', 'ginger+ale', 'koolaid', 'nut and honey', 'oats and bran cereal', 'oats and honey', 'pork chops', 'slim fast', 'soda', 'sodas', 'spice ham sandwich']
# true pos: 14
# false pos: 14
# false neg: 14
HSLLD/HV1/MT//jermt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jermt1.cha
HSLLD/HV1/MT//brimt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'butter', 31, 37]
descended from food: [['N'], 'noodles', 45, 52]
butter
butter butter 499
[('put', 'VB'), ('your', 'PRP$'), ('put', 'VB'), ('your', 'PRP$'), ('butter', 'NN'), ('on', 'IN'), ('the', 'DT'), ('noodles', 'NNS'), ('okay', 'VBP')]
['butter']
('food -> ', [])
noodles
noodles noodles 138
[('put', 'VB'), ('your', 'PRP$'), ('put', 'VB'), ('your', 'PRP$'), ('butter', 'NN'), ('on', 'IN'), ('the', 'DT'), ('noodles', 'NNS'), ('okay', 'VBP')]
['noodles']
('food -> ', [['noodles', 'Cereal Grains and Pasta']])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'dinner', 18, 24]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'applesauce', 20, 30]
applesauce
applesauce applesauce 76
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('applesauce', 'NN'), ('or', 'CC'), ('somethin', 'JJ'), ('g', 'NN')]
['applesauce']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'dessert', 6, 13]
candidates to check:
3
descended from food: [['N'], 'supper', 59, 65]
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'supper', 12, 18]
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'supper', 33, 39]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
loading solution set
calculating
set([(452, (20, 30)), (148, (45, 52)), (148, (31, 37))])
[((148, (31, 37)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((148, (45, 52)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((452, (20, 30)), '*MOT:\tyou want some applesauce or somethin(g) ?\n')]
set([(560, (12, 18)), (148, (45, 52)), (487, (59, 65)), (459, (6, 13)), (452, (20, 30)), (148, (31, 37)), (576, (33, 39)), (394, (18, 24))])
[((148, (31, 37)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((148, (45, 52)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((394, (18, 24)), '*MOT:\tmaybe after dinner we can do another one (.) ?\n'), ((452, (20, 30)), '*MOT:\tyou want some applesauce or somethin(g) ?\n'), ((459, (6, 13)), '*MOT:\tdessert ?\n'), ((487, (59, 65)), "*MOT:\tyour plate's full you'll have_to wait (un)til we eat supper and then you can go out .\n"), ((560, (12, 18)), '*MOT:\tafter supper you can finish playin(g) .\n'), ((576, (33, 39)), '*MOT:\tcan you finish eating your supper before you play with the gun Sean ?\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'noodles', 'applesauce'])
predicted labels:
set(['butter', 'dessert', 'dinner', 'applesauce', 'supper', 'noodles'])
file:HSLLD/HV1/MT//brimt1.cha
precision: 0.5
recall: 1.0
true positives:['applesauce', 'butter', 'noodles']
false positives: ['dessert', 'dinner', 'supper']
false negatives: []
# true pos: 3
# false pos: 3
# false neg: 0
HSLLD/HV1/MT//zanmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//zanmt1.cha
HSLLD/HV1/MT//todmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//todmt1.cha
HSLLD/HV1/MT//jasmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jasmt1.cha
HSLLD/HV1/MT//paumt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//paumt1.cha
HSLLD/HV1/MT//chamt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//chamt1.cha
HSLLD/HV1/MT//gilmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'tea', 29, 32]
tea
tea tea 2
[('what', 'WP'), ('about', 'IN'), ('having', 'VBG'), ('some', 'DT'), ('tea', 'NN')]
['tea']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'tea', 36, 39]
tea
tea tea 2
[('she', 'PRP'), ('s', 'VBD'), ('always', 'RB'), ('servin', 'VBN'), ('g', 'NN'), ('me', 'PRP'), ('tea', 'IN')]
['tea']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
loading solution set
calculating
set([(121, (36, 39)), (90, (29, 32))])
[((90, (29, 32)), '*MOT:\twhat about having some tea ?\n'), ((121, (36, 39)), "*MOT:\tshe's always servin(g) me [!] tea (.) .\n")]
set([(121, (36, 39)), (90, (29, 32))])
[((90, (29, 32)), '*MOT:\twhat about having some tea ?\n'), ((121, (36, 39)), "*MOT:\tshe's always servin(g) me [!] tea (.) .\n")]
calculating accuracy and recall
correct labels:
set(['tea'])
predicted labels:
set(['tea'])
file:HSLLD/HV1/MT//gilmt1.cha
precision: 1.0
recall: 1.0
true positives:['tea']
false positives: []
false negatives: []
# true pos: 1
# false pos: 0
# false neg: 0
HSLLD/HV1/MT//tamtp1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tamtp1.cha
HSLLD/HV1/MT//aimmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
3
candidates to check:
3
descended from food: [['N'], 'supper', 12, 18]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
9
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
17
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'milk', 21, 25]
milk
milk milk 46
[('can', 'MD'), ('i', 'VB'), ('get', 'VB'), ('some', 'DT'), ('milk', 'NN'), ('please', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'chocolate', 27, 36]
chocolate
chocolate chocolate 598
[('mommy', 'NN'), ('can', 'MD'), ('i', 'VB'), ('get', 'VB'), ('some', 'DT'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'chocolate', 21, 30]
descended from food: [['N'], 'milk', 39, 43]
milk
milk milk 46
[('can', 'MD'), ('i', 'VB'), ('get', 'VB'), ('some', 'DT'), ('chocolate', 'NN'), ('too', 'RB'), ('and', 'CC'), ('milk', 'VB'), ('too', 'RB')]
['milk']
('food -> ', [])
chocolate
chocolate chocolate 598
[('can', 'MD'), ('i', 'VB'), ('get', 'VB'), ('some', 'DT'), ('chocolate', 'NN'), ('too', 'RB'), ('and', 'CC'), ('milk', 'VB'), ('too', 'RB')]
['chocolate']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'chocolate', 14, 23]
chocolate
chocolate chocolate 598
[('xxx', 'NN'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'chocolate', 15, 24]
milk
milk milk 46
[('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['milk']
('food -> ', [])
chocolate
chocolate chocolate 598
[('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
4
descended from food: [['N'], 'milk', 19, 23]
descended from food: [['N'], 'chocolate', 28, 37]
milk
milk milk 46
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['milk']
('food -> ', [])
chocolate
chocolate chocolate 598
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'milk', 6, 10]
descended from food: [['N'], 'chocolate', 15, 24]
milk
milk milk 46
[('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['milk']
('food -> ', [])
chocolate
chocolate chocolate 598
[('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [])
shake
shake shake 148
[('and', 'CC'), ('shake', 'VB'), ('good', 'JJ'), ('up', 'RP')]
['shake']
('food -> ', [['shake', 'Beverages']])
shake
shake shake 148
[('and', 'CC'), ('shake', 'VB'), ('it', 'PRP'), ('up', 'RP')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'dinner', 26, 32]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
descended from food: [['N'], 'food', 38, 42]
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 64, 68]
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 31, 35]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'juice', 26, 31]
juice
juice juice 52
[('didn', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('get', 'VBP'), ('some', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'juice', 32, 37]
juice
juice juice 52
[('daddy', 'NN'), ('i', 'NN'), ('didn', 'VBP'), ('t', 'NN'), ('ask', 'NN'), ('for', 'IN'), ('no', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'juice', 10, 15]
juice
juice juice 52
[('xxx', 'JJ'), ('juice', 'NN'), ('thank', 'NN'), ('you', 'PRP')]
['juice']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 33, 37]
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'juice', 32, 37]
juice
juice juice 52
[('i', 'NN'), ('am', 'VBP'), ('gon', 'VBG'), ('na', 'TO'), ('bring', 'VB'), ('some', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'juice', 20, 25]
juice
juice juice 52
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'food', 24, 28]
candidates to check:
1
descended from food: [['N'], 'potatoes', 6, 14]
potatoes
potatoes potatoes 62
[('potatoes', 'NNS'), ('only', 'RB')]
['potatoes']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'food', 27, 31]
candidates to check:
4
candidates to check:
3
candidates to check:
1
pepper
pepper pepper 27
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('no', 'DT'), ('pepper', 'NN')]
['pepper']
('food -> ', [])
candidates to check:
2
pepper
pepper pepper 27
[('do', 'VB'), ('you', 'PRP'), ('like', 'IN'), ('pepper', 'NN')]
['pepper']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'soup', 24, 28]
soup
soup soup 72
[('want', 'VB'), ('some', 'DT'), ('of', 'IN'), ('this', 'DT'), ('soup', 'NN'), ('xxx', 'NN')]
['soup']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'soup', 10, 14]
soup
soup soup 72
[('xxx', 'NN'), ('soup', 'NN'), ('bowl', 'NN')]
['soup']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'food', 20, 24]
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'breakfast', 20, 29]
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'meat', 29, 33]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a11edd0>)
[('xxx', 'NN'), ('i', 'NN'), ('picked', 'VBD'), ('up', 'RP'), ('my', 'PRP$'), ('own', 'JJ'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
pepper
pepper pepper 27
[('pepper', 'NN')]
['pepper']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'food', 41, 45]
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'food', 15, 19]
candidates to check:
1
descended from food: [['N'], 'food', 10, 14]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'applesauce', 32, 42]
applesauce
applesauce applesauce 76
[('eat', 'NN'), ('eat', 'NN'), ('eat', 'VB'), ('your', 'PRP$'), ('applesauce', 'NN')]
['applesauce']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'dinner', 19, 25]
candidates to check:
1
water
water water 18
[('i', 'NN'), ('want', 'VBP'), ('that', 'IN'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
3
water
water water 18
[('need', 'VB'), ('some', 'DT'), ('water', 'NN'), ('xxx', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
water
water water 18
[('i', 'NN'), ('want', 'VBP'), ('some', 'DT'), ('water', 'NN'), ('xxx', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'food', 42, 46]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'food', 26, 30]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'milk', 29, 33]
milk
milk milk 46
[('don', 'NN'), ('t', 'NN'), ('throw', 'VB'), ('away', 'RP'), ('that', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 15, 19]
candidates to check:
1
descended from food: [['N'], 'food', 15, 19]
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'food', 15, 19]
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'food', 51, 55]
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'milk', 20, 24]
milk
milk milk 46
[('you', 'PRP'), ('drink', 'VBP'), ('any', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'milk', 20, 24]
milk
milk milk 46
[('you', 'PRP'), ('drink', 'VBP'), ('any', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'food', 15, 19]
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'food', 14, 18]
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 25, 29]
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
loading solution set
calculating
set([(887, (15, 24)), (1991, (32, 42)), (884, (19, 23)), (884, (28, 37)), (1633, (10, 14)), (2031, (22, 27)), (1499, (6, 14)), (881, (15, 24)), (2046, (18, 23)), (1409, (10, 15)), (881, (6, 10)), (1399, (32, 37)), (864, (21, 30)), (1549, (18, 24)), (1545, (22, 28)), (2276, (20, 24)), (2284, (20, 24)), (1468, (32, 37)), (1481, (20, 25)), (864, (39, 43)), (887, (6, 10)), (852, (21, 25)), (873, (14, 23)), (2043, (16, 21)), (860, (27, 36)), (1841, (6, 12)), (1386, (26, 31)), (1630, (24, 28))])
[((852, (21, 25)), '*CHI:\tcan I get some milk please (.) ?\n'), ((860, (27, 36)), '*CHI:\tMommy can I get some chocolate (.) ?\n'), ((864, (21, 30)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((864, (39, 43)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((873, (14, 23)), '*CHI:\txxx [>] chocolate .\n'), ((881, (6, 10)), '*CHI:\tmilk and chocolate .\n'), ((881, (15, 24)), '*CHI:\tmilk and chocolate .\n'), ((884, (19, 23)), '*CHI:\tMommy I want milk and chocolate .\n'), ((884, (28, 37)), '*CHI:\tMommy I want milk and chocolate .\n'), ((887, (6, 10)), '*CHI:\tmilk and chocolate (.) .\n'), ((887, (15, 24)), '*CHI:\tmilk and chocolate (.) .\n'), ((1386, (26, 31)), "*BRO:\tdidn't you get some juice ?\n"), ((1399, (32, 37)), "*CHI:\tDaddy I didn't ask for no juice .\n"), ((1409, (10, 15)), '*CHI:\txxx juice thank you .\n'), ((1468, (32, 37)), '*MOT:\tI am [!] gonna bring some juice .\n'), ((1481, (20, 25)), "*MOT:\tI'm gonna get juice .\n"), ((1499, (6, 14)), '*MOT:\tpotatoes only [?] (.) .\n'), ((1545, (22, 28)), "*CHI:\tI don't like no pepper .\n"), ((1549, (18, 24)), '*CHI:\tdo you like pepper ?\n'), ((1630, (24, 28)), '*MOT:\twant some of this soup xxx ?\n'), ((1633, (10, 14)), '*BRO:\txxx soup bowl ?\n'), ((1841, (6, 12)), '*CHI:\tpepper (.) .\n'), ((1991, (32, 42)), '*MOT:\t<eat [/] eat [/] eat your applesauce> [<] .\n'), ((2031, (22, 27)), '*CHI:\tI want that [?] water .\n'), ((2043, (16, 21)), '*FAT:\tneed some water xxx .\n'), ((2046, (18, 23)), '*CHI:\tI want some water xxx .\n'), ((2276, (20, 24)), '*MOT:\tyou drink any milk ?\n'), ((2284, (20, 24)), '*MOT:\tyou drink any milk ?\n')]
set([(887, (15, 24)), (1771, (29, 33)), (884, (19, 23)), (2217, (15, 19)), (1327, (31, 35)), (852, (21, 25)), (1633, (10, 14)), (1991, (32, 42)), (2324, (14, 18)), (884, (28, 37)), (891, (10, 15)), (1468, (32, 37)), (2031, (22, 27)), (2314, (15, 19)), (2095, (42, 46)), (1499, (6, 14)), (84, (12, 18)), (881, (15, 24)), (2241, (51, 55)), (2228, (15, 19)), (2046, (18, 23)), (1288, (64, 68)), (1409, (10, 15)), (881, (6, 10)), (2180, (29, 33)), (1399, (32, 37)), (864, (21, 30)), (1708, (20, 29)), (1549, (18, 24)), (2342, (25, 29)), (1545, (22, 28)), (1939, (15, 19)), (2276, (20, 24)), (2284, (20, 24)), (895, (10, 15)), (2115, (26, 30)), (1481, (20, 25)), (1502, (27, 31)), (1685, (20, 24)), (2027, (19, 25)), (1455, (33, 37)), (1129, (38, 42)), (1489, (24, 28)), (864, (39, 43)), (887, (6, 10)), (2220, (15, 19)), (1084, (26, 32)), (1947, (10, 14)), (873, (14, 23)), (1871, (41, 45)), (2043, (16, 21)), (860, (27, 36)), (1841, (6, 12)), (1386, (26, 31)), (1630, (24, 28))])
[((84, (12, 18)), "*MOT:\t<it's supper time> [<] .\n"), ((852, (21, 25)), '*CHI:\tcan I get some milk please (.) ?\n'), ((860, (27, 36)), '*CHI:\tMommy can I get some chocolate (.) ?\n'), ((864, (21, 30)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((864, (39, 43)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((873, (14, 23)), '*CHI:\txxx [>] chocolate .\n'), ((881, (6, 10)), '*CHI:\tmilk and chocolate .\n'), ((881, (15, 24)), '*CHI:\tmilk and chocolate .\n'), ((884, (19, 23)), '*CHI:\tMommy I want milk and chocolate .\n'), ((884, (28, 37)), '*CHI:\tMommy I want milk and chocolate .\n'), ((887, (6, 10)), '*CHI:\tmilk and chocolate (.) .\n'), ((887, (15, 24)), '*CHI:\tmilk and chocolate (.) .\n'), ((891, (10, 15)), '*CHI:\tand shake good up .\n'), ((895, (10, 15)), '*CHI:\tand shake it up .\n'), ((1084, (26, 32)), "*CHI:\tcome on Robbie it's dinner (.) .\n"), ((1129, (38, 42)), '*MOT:\tAimee you gonna eat lots [>] of food tonight (.) .\n'), ((1288, (64, 68)), '*CHI:\tGod is great (.) God is good (.) let us thank him for our food (.) amen .\n'), ((1327, (31, 35)), '*BRO:\tand we thank him for our food (.) .\n'), ((1386, (26, 31)), "*BRO:\tdidn't you get some juice ?\n"), ((1399, (32, 37)), "*CHI:\tDaddy I didn't ask for no juice .\n"), ((1409, (10, 15)), '*CHI:\txxx juice thank you .\n'), ((1455, (33, 37)), '*CHI:\tbut Daddy it was behind my food .\n'), ((1468, (32, 37)), '*MOT:\tI am [!] gonna bring some juice .\n'), ((1481, (20, 25)), "*MOT:\tI'm gonna get juice .\n"), ((1489, (24, 28)), '*MOT:\tthey eat all this food [>] .\n'), ((1499, (6, 14)), '*MOT:\tpotatoes only [?] (.) .\n'), ((1502, (27, 31)), '*MOT:\tthey do eat all this food (.) .\n'), ((1545, (22, 28)), "*CHI:\tI don't like no pepper .\n"), ((1549, (18, 24)), '*CHI:\tdo you like pepper ?\n'), ((1630, (24, 28)), '*MOT:\twant some of this soup xxx ?\n'), ((1633, (10, 14)), '*BRO:\txxx soup bowl ?\n'), ((1685, (20, 24)), '*MOT:\tjust eat your food Aimee .\n'), ((1708, (20, 29)), '*CHI:\tsomething for breakfast (.) .\n'), ((1771, (29, 33)), '*CHI:\txxx I picked up my own meat (.) .\n'), ((1841, (6, 12)), '*CHI:\tpepper (.) .\n'), ((1871, (41, 45)), "*MOT:\tI know you wan(t) (t)a get into my food but you're not going to .\n"), ((1939, (15, 19)), '*FAT:\txxx your food .\n'), ((1947, (10, 14)), '*FAT:\txxx food Aimee .\n'), ((1991, (32, 42)), '*MOT:\t<eat [/] eat [/] eat your applesauce> [<] .\n'), ((2027, (19, 25)), "*CHI:\tI'm eatin(g) dinner (.) .\n"), ((2031, (22, 27)), '*CHI:\tI want that [?] water .\n'), ((2043, (16, 21)), '*FAT:\tneed some water xxx .\n'), ((2046, (18, 23)), '*CHI:\tI want some water xxx .\n'), ((2095, (42, 46)), "*FAT:\t<nobody ain't> [/] nobody ain't xxx food there .\n"), ((2115, (26, 30)), '*CHI:\tDaddy [?] make your food one more xxx .\n'), ((2180, (29, 33)), "*MOT:\t<don't throw away that milk> [<] .\n"), ((2217, (15, 19)), '*FAT:\teat your food .\n'), ((2220, (15, 19)), '*FAT:\teat your food .\n'), ((2228, (15, 19)), '*FAT:\teat your food .\n'), ((2241, (51, 55)), "*MOT:\tyeah but you don't need your arms for eating food .\n"), ((2276, (20, 24)), '*MOT:\tyou drink any milk ?\n'), ((2284, (20, 24)), '*MOT:\tyou drink any milk ?\n'), ((2314, (15, 19)), '*MOT:\teat your food .\n'), ((2324, (14, 18)), '*MOT:\txxx has food tonight ?\n'), ((2342, (25, 29)), '*CHI:\tMommy I eat all my food .\n')]
calculating accuracy and recall
correct labels:
set(['pepper', 'soup', 'potatoes', 'chocolate', 'water', 'juice', 'applesauce', 'milk'])
predicted labels:
set(['pepper', 'meat', 'soup', 'food', 'potatoes', 'supper', 'chocolate', 'water', 'juice', 'dinner', 'applesauce', 'shake', 'breakfast', 'milk'])
file:HSLLD/HV1/MT//aimmt1.cha
precision: 0.571428571429
recall: 1.0
true positives:['applesauce', 'chocolate', 'juice', 'milk', 'pepper', 'potatoes', 'soup', 'water']
false positives: ['breakfast', 'dinner', 'food', 'meat', 'shake', 'supper']
false negatives: []
# true pos: 8
# false pos: 6
# false neg: 0
HSLLD/HV1/MT//allmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
descended from food: [['N'], 'lunch', 28, 33]
candidates to check:
3
descended from food: [['N'], 'butter', 13, 19]
descended from food: [['N'], 'jelly', 24, 29]
peanut
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a1e5368>)
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['peanut']
('food -> ', [])
peanut butter
peanut butter peanut butter 590
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['peanut', 'butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
butter
butter butter 499
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
candidates to check:
3
descended from food: [['N'], 'butter', 13, 19]
descended from food: [['N'], 'jelly', 24, 29]
peanut
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a1e5a28>)
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['peanut']
('food -> ', [])
peanut butter
peanut butter peanut butter 590
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['peanut', 'butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
butter
butter butter 499
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
candidates to check:
1
candidates to check:
1
celery
celery celery 18
[('celery', 'NN')]
['celery']
('food -> ', [])
candidates to check:
1
candidates to check:
1
celery
celery celery 18
[('you', 'PRP'), ('cut', 'VBD'), ('up', 'RP'), ('some', 'DT'), ('celery', 'NN')]
['celery']
('food -> ', [])
candidates to check:
1
celery
celery celery 18
[('with', 'IN'), ('celery', 'NN')]
['celery']
('food -> ', [])
candidates to check:
2
celery
celery celery 18
[('what', 'WP'), ('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('have', 'VB'), ('what', 'WP'), ('you', 'PRP'), ('have', 'VBP'), ('on', 'IN'), ('the', 'DT'), ('celery', 'NN')]
['celery']
('food -> ', [])
candidates to check:
4
descended from food: [['N'], 'butter', 26, 32]
peanut
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a1cb0e0>)
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('have', 'VBP'), ('peanut', 'VBN'), ('butter', 'NN')]
['peanut']
('food -> ', [])
peanut butter
peanut butter peanut butter 590
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('have', 'VBP'), ('peanut', 'VBN'), ('butter', 'NN')]
['peanut', 'butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
butter
butter butter 499
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('have', 'VBP'), ('peanut', 'VBN'), ('butter', 'NN')]
['butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
candidates to check:
2
descended from food: [['N'], 'butter', 15, 21]
butter
butter butter 499
[('pean', 'JJ'), ('ut', 'NN'), ('butter', 'NN')]
['butter']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
goose
goose goose 133
[('you', 'PRP'), ('re', 'VBP'), ('a', 'DT'), ('silly', 'RB'), ('goose', 'JJ')]
['goose']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'pizza', 10, 15]
pizza
pizza pizza 274
[('the', 'DT'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'pizza', 9, 14]
pizza
pizza pizza 274
[('my', 'PRP$'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'cheese', 31, 37]
cheese
cheese cheese 280
[('it', 'PRP'), ('s', 'VBZ'), ('you', 'PRP'), ('smell', 'VBP'), ('the', 'DT'), ('cheese', 'NN')]
['cheese']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'pizza', 16, 21]
pizza
pizza pizza 274
[('that', 'DT'), ('good', 'JJ'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'steak', 22, 27]
descended from food: [['N'], 'pizza', 64, 69]
pizza
pizza pizza 274
[('there', 'EX'), ('s', 'VBZ'), ('no', 'DT'), ('more', 'RBR'), ('steak', 'NNS'), ('so', 'RB'), ('make', 'VB'), ('sure', 'JJ'), ('you', 'PRP'), ('finish', 'VBP'), ('eating', 'VBG'), ('your', 'PRP$'), ('pizza', 'NN'), ('too', 'RB')]
['pizza']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'steak', 22, 27]
candidates to check:
1
descended from food: [['N'], 'pizza', 25, 30]
pizza
pizza pizza 274
[('finish', 'JJ'), ('eating', 'VBG'), ('your', 'PRP$'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'steak', 19, 24]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
6
descended from food: [['N'], 'food', 46, 50]
candidates to check:
3
descended from food: [['N'], 'food', 21, 25]
candidates to check:
4
descended from food: [['N'], 'food', 19, 23]
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
7
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'steak', 24, 29]
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'pizza', 29, 34]
pizza
pizza pizza 274
[('eat', 'VB'), ('your', 'PRP$'), ('delicious', 'JJ'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'pizza', 20, 25]
pizza
pizza pizza 274
[('how', 'WRB'), ('about', 'IN'), ('the', 'DT'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'pizza', 25, 30]
pizza
pizza pizza 274
[('this', 'DT'), ('one', 'CD'), ('s', 'VBZ'), ('the', 'DT'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'pizza', 18, 23]
pizza
pizza pizza 274
[('i', 'NN'), ('call', 'NN'), ('this', 'DT'), ('pizza', 'NN'), ('too', 'RB')]
['pizza']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'food', 22, 26]
candidates to check:
1
descended from food: [['N'], 'pizza', 6, 11]
pizza
pizza pizza 274
[('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'pizza', 25, 30]
pizza
pizza pizza 274
[('who', 'WP'), ('likes', 'VBZ'), ('this', 'DT'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'dessert', 15, 22]
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'dessert', 19, 26]
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'milk', 20, 24]
milk
milk milk 46
[('put', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'sugar', 21, 26]
sugar
sugar sugar 399
[('grandpa', 'NN'), ('that', 'WDT'), ('s', 'VBZ'), ('sugar', 'NN'), ('in', 'IN'), ('there', 'EX')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
1
descended from food: [['N'], 'sugar', 21, 26]
sugar
sugar sugar 399
[('gon', 'NN'), ('na', 'TO'), ('put', 'VB'), ('some', 'DT'), ('sugar', 'NN'), ('on', 'IN'), ('there', 'EX'), ('too', 'RB')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
2
descended from food: [['N'], 'sugar', 13, 18]
sugar
sugar sugar 399
[('i', 'NN'), ('like', 'IN'), ('sugar', 'NN'), ('on', 'IN'), ('there', 'EX')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'crackers', 37, 45]
descended from food: [['N'], 'milk', 50, 54]
crackers
crackers crackers 453
[('you', 'PRP'), ('sticking', 'VBG'), ('your', 'PRP$'), ('finger', 'NN'), ('in', 'IN'), ('my', 'PRP$'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN'), ('for', 'IN')]
['crackers']
('food -> ', [])
milk
milk milk 46
[('you', 'PRP'), ('sticking', 'VBG'), ('your', 'PRP$'), ('finger', 'NN'), ('in', 'IN'), ('my', 'PRP$'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN'), ('for', 'IN')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'milk', 24, 28]
milk
milk milk 46
[('you', 'PRP'), ('done', 'VBN'), ('with', 'IN'), ('the', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'oatmeal', 23, 30]
candidates to check:
2
descended from food: [['N'], 'crackers', 16, 24]
descended from food: [['N'], 'milk', 29, 33]
crackers
crackers crackers 453
[('it', 'PRP'), ('s', 'VBZ'), ('just', 'RB'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['crackers']
('food -> ', [])
milk
milk milk 46
[('it', 'PRP'), ('s', 'VBZ'), ('just', 'RB'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
3
descended from food: [['N'], 'crackers', 15, 23]
descended from food: [['N'], 'milk', 28, 32]
crackers
crackers crackers 453
[('saltine', 'NN'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['crackers']
('food -> ', [])
milk
milk milk 46
[('saltine', 'NN'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'supper', 18, 24]
candidates to check:
2
descended from food: [['N'], 'supper', 18, 24]
candidates to check:
2
descended from food: [['N'], 'supper', 56, 62]
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'sugar', 22, 27]
sugar
sugar sugar 399
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('the', 'DT'), ('sugar', 'NN'), ('and', 'CC'), ('the', 'DT'), ('spoon', 'NN'), ('back', 'RB')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'sugar', 29, 34]
sugar
sugar sugar 399
[('you', 'PRP'), ('already', 'RB'), ('put', 'VBD'), ('enough', 'JJ'), ('sugar', 'NN'), ('on', 'IN'), ('there', 'EX')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
3
descended from food: [['N'], 'sugar', 26, 31]
sugar
sugar sugar 399
[('grandma', 'NN'), ('s', 'NN'), ('trying', 'VBG'), ('to', 'TO'), ('sugar', 'VB'), ('me', 'PRP'), ('to', 'TO'), ('death', 'NN'), ('here', 'RB')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
1
descended from food: [['N'], 'jelly', 18, 23]
candidates to check:
2
descended from food: [['N'], 'crackers', 19, 27]
descended from food: [['N'], 'milk', 32, 36]
crackers
crackers crackers 453
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('like', 'IN'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['crackers']
('food -> ', [])
milk
milk milk 46
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('like', 'IN'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'milk', 35, 39]
milk
milk milk 46
[('she', 'PRP'), ('says', 'VBZ'), ('she', 'PRP'), ('likes', 'VBZ'), ('them', 'PRP'), ('with', 'IN'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
descended from food: [['N'], 'ham', 30, 33]
ham
ham ham 141
[('the', 'DT'), ('night', 'NN'), ('he', 'PRP'), ('was', 'VBD'), ('making', 'VBG'), ('ham', 'NN'), ('in', 'IN'), ('the', 'DT'), ('oven', 'NN')]
['ham']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'honey', 34, 39]
honey
honey honey 304
[('now', 'RB'), ('sit', 'NN'), ('still', 'RB'), ('in', 'IN'), ('papa', 'JJ'), ('s', 'JJ'), ('lap', 'NN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'supper', 40, 46]
candidates to check:
2
descended from food: [['N'], 'supper', 15, 21]
fat
fat fat 900
[('she', 'PRP'), ('s', 'VBD'), ('going', 'VBG'), ('to', 'TO'), ('get', 'VB'), ('fat', 'JJ')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
2
fat
fat fat 900
[('i', 'NNS'), ('m', 'VBP'), ('not', 'RB'), ('fat', 'JJ')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'supper', 21, 27]
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'supper', 27, 33]
candidates to check:
2
descended from food: [['N'], 'supper', 35, 41]
candidates to check:
1
descended from food: [['N'], 'pizza', 6, 11]
pizza
pizza pizza 274
[('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'steak', 6, 11]
candidates to check:
2
descended from food: [['N'], 'steak', 6, 11]
descended from food: [['N'], 'pizza', 16, 21]
pizza
pizza pizza 274
[('steak', 'NN'), ('and', 'CC'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'steak', 6, 11]
descended from food: [['N'], 'pizza', 16, 21]
pizza
pizza pizza 274
[('steak', 'NN'), ('and', 'CC'), ('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'salad', 36, 41]
macaroni
macaroni macaroni 128
[('she', 'PRP'), ('didn', 'VBD'), ('t', 'NNS'), ('like', 'IN'), ('the', 'DT'), ('macaroni', 'NN'), ('salad', 'NN')]
['macaroni']
('food -> ', [['macaroni', 'Cereal Grains and Pasta']])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'bacon', 22, 27]
bacon
bacon bacon 309
[('that', 'DT'), ('s', 'VBZ'), ('canadian', 'JJ'), ('bacon', 'NN')]
['bacon']
('food -> ', [])
canadian bacon
canadian bacon canadian bacon 146
[('that', 'DT'), ('s', 'VBZ'), ('canadian', 'JJ'), ('bacon', 'NN')]
['canadian', 'bacon']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'supper', 39, 45]
candidates to check:
1
loading solution set
calculating
set([(1546, (6, 13)), (1585, (25, 32)), (721, (6, 11)), (1578, (10, 17)), (666, (29, 34)), (1161, (18, 23)), (216, (9, 14)), (684, (20, 25)), (235, (64, 69)), (936, (20, 24)), (991, (50, 54)), (137, (51, 57)), (1121, (29, 34)), (1167, (19, 27)), (939, (21, 26)), (1565, (6, 11)), (1045, (16, 24)), (235, (22, 27)), (1552, (6, 11)), (222, (31, 37)), (1149, (26, 31)), (945, (21, 26)), (1045, (29, 33)), (1113, (22, 27)), (628, (24, 29)), (145, (6, 21)), (107, (6, 29)), (247, (25, 30)), (741, (25, 30)), (1048, (7, 23)), (1167, (32, 36)), (1039, (23, 30)), (1540, (6, 11)), (1574, (6, 13)), (1568, (6, 11)), (1592, (13, 27)), (134, (11, 17)), (693, (25, 30)), (213, (10, 15)), (244, (22, 27)), (1571, (10, 17)), (955, (13, 18)), (1020, (24, 28)), (131, (22, 28)), (100, (6, 29)), (141, (19, 32)), (252, (19, 24)), (1180, (35, 39)), (1565, (16, 21)), (1568, (16, 21)), (1237, (30, 33)), (1581, (27, 41)), (991, (37, 45)), (122, (6, 12)), (1048, (28, 32)), (705, (18, 23)), (225, (16, 21))])
[((100, (6, 29)), '*CHI:\tpeanut butter and jelly .\n'), ((107, (6, 29)), '*MOT:\tpeanut butter and jelly ?\n'), ((122, (6, 12)), '*CHI:\tcelery .\n'), ((131, (22, 28)), '*MOT:\tyou cut up some celery .\n'), ((134, (11, 17)), '*CHI:\twith celery ?\n'), ((137, (51, 57)), "*GMA:\t<what d'you@d have> [/] what you have on the celery [!] ?\n"), ((141, (19, 32)), "*MOT:\td'you@d have peanut butter ?\n"), ((145, (6, 21)), '*CHI:\tpean(ut) butter !\n'), ((213, (10, 15)), '*GMA:\tthe pizza [!] .\n'), ((216, (9, 14)), '*CHI:\tmy pizza ?\n'), ((222, (31, 37)), "*GMA:\tit's [///] you smell the cheese [!] (.) .\n"), ((225, (16, 21)), '*GMA:\tthat good pizza ?\n'), ((235, (22, 27)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((235, (64, 69)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((244, (22, 27)), "*GMA:\tthere's no more steak .\n"), ((247, (25, 30)), '*GMA:\tfinish eating your pizza .\n'), ((252, (19, 24)), "*CHI:\tthere's more steak !\n"), ((628, (24, 29)), '*CHI:\tone more piece of steak left [!] .\n'), ((666, (29, 34)), '*GMA:\teat [<] your delicious pizza .\n'), ((684, (20, 25)), '*GMA:\thow about the pizza ?\n'), ((693, (25, 30)), "*GMA:\tthis [!] one's the pizza .\n"), ((705, (18, 23)), '*CHI:\tI call this pizza too .\n'), ((721, (6, 11)), '*CHI:\tpizza .\n'), ((741, (25, 30)), '*CHI:\twho likes this [!] pizza ?\n'), ((936, (20, 24)), '*GFA:\tput some more milk .\n'), ((939, (21, 26)), "*CHI:\tGrandpa that's sugar [?] in there ?\n"), ((945, (21, 26)), '*GFA:\tgonna put some sugar on there too .\n'), ((955, (13, 18)), '*GFA:\tI like sugar on there .\n'), ((991, (37, 45)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((991, (50, 54)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((1020, (24, 28)), '*GMA:\tyou done with the milk ?\n'), ((1039, (23, 30)), '*CHI:\tbut (.) &-um (.) oatmeal in it ?\n'), ((1045, (16, 24)), "*GFA:\tit's just crackers and milk .\n"), ((1045, (29, 33)), "*GFA:\tit's just crackers and milk .\n"), ((1048, (7, 23)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1048, (28, 32)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1113, (22, 27)), '*GFA:\t<can I have the sugar and the spoon> [<] back ?\n'), ((1121, (29, 34)), '*GMA:\tyou already put enough sugar on there (.) .\n'), ((1149, (26, 31)), "*GFA:\tGrandma's trying to sugar me to death here .\n"), ((1161, (18, 23)), "*CHI:\tit's by the jelly !\n"), ((1167, (19, 27)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1167, (32, 36)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1180, (35, 39)), '*MOT:\tshe says she likes them with milk .\n'), ((1237, (30, 33)), '*GMA:\tthe night he was making ham in the oven .\n'), ((1540, (6, 11)), '*CHI:\tpizza .\n'), ((1546, (6, 13)), '*CHI:\tcalzone .\n'), ((1552, (6, 11)), '*CHI:\tsteak .\n'), ((1565, (6, 11)), '*CHI:\tsteak and pizza !\n'), ((1565, (16, 21)), '*CHI:\tsteak and pizza !\n'), ((1568, (6, 11)), '*GFA:\tsteak and pizza ?\n'), ((1568, (16, 21)), '*GFA:\tsteak and pizza ?\n'), ((1571, (10, 17)), '*GMA:\tand calzone [>] .\n'), ((1574, (6, 13)), '*CHI:\tcalzone [<] .\n'), ((1578, (10, 17)), '*GFA:\tand calzone !\n'), ((1581, (27, 41)), "*GMA:\tshe didn't like the <macaroni salad> [>] .\n"), ((1585, (25, 32)), '*MOT:\t<did you like that calzone xxx> [<] ?\n'), ((1592, (13, 27)), "*MOT:\tthat's Canadian bacon .\n")]
set([(721, (6, 11)), (1467, (40, 46)), (666, (29, 34)), (1534, (27, 33)), (205, (21, 26)), (1048, (15, 23)), (1161, (18, 23)), (216, (9, 14)), (1472, (15, 21)), (684, (20, 25)), (235, (64, 69)), (1581, (27, 35)), (936, (20, 24)), (991, (50, 54)), (714, (22, 26)), (137, (51, 57)), (1656, (39, 45)), (1121, (29, 34)), (1167, (19, 27)), (332, (21, 25)), (1045, (16, 24)), (235, (22, 27)), (1540, (6, 11)), (1067, (18, 24)), (1527, (21, 27)), (222, (31, 37)), (1149, (26, 31)), (945, (21, 26)), (1045, (29, 33)), (1113, (22, 27)), (628, (24, 29)), (1180, (35, 39)), (1089, (56, 62)), (122, (6, 12)), (247, (25, 30)), (741, (25, 30)), (955, (13, 18)), (107, (24, 29)), (1167, (32, 36)), (1039, (23, 30)), (96, (28, 33)), (1581, (36, 41)), (145, (15, 21)), (1568, (6, 11)), (1568, (16, 21)), (1475, (25, 28)), (1446, (34, 39)), (134, (11, 17)), (693, (25, 30)), (1537, (35, 41)), (1592, (13, 27)), (213, (10, 15)), (244, (22, 27)), (939, (21, 26)), (819, (19, 26)), (805, (15, 22)), (1020, (24, 28)), (100, (6, 19)), (107, (6, 19)), (131, (22, 28)), (1565, (6, 11)), (141, (19, 32)), (252, (19, 24)), (1565, (16, 21)), (100, (24, 29)), (1237, (30, 33)), (323, (46, 50)), (1489, (14, 17)), (1077, (18, 24)), (991, (37, 45)), (337, (19, 23)), (1048, (28, 32)), (1552, (6, 11)), (705, (18, 23)), (225, (16, 21))])
[((96, (28, 33)), "*MOT:\twhat d'you@d have for lunch today ?\n"), ((100, (6, 19)), '*CHI:\tpeanut butter and jelly .\n'), ((100, (24, 29)), '*CHI:\tpeanut butter and jelly .\n'), ((107, (6, 19)), '*MOT:\tpeanut butter and jelly ?\n'), ((107, (24, 29)), '*MOT:\tpeanut butter and jelly ?\n'), ((122, (6, 12)), '*CHI:\tcelery .\n'), ((131, (22, 28)), '*MOT:\tyou cut up some celery .\n'), ((134, (11, 17)), '*CHI:\twith celery ?\n'), ((137, (51, 57)), "*GMA:\t<what d'you@d have> [/] what you have on the celery [!] ?\n"), ((141, (19, 32)), "*MOT:\td'you@d have peanut butter ?\n"), ((145, (15, 21)), '*CHI:\tpean(ut) butter !\n'), ((205, (21, 26)), "*GMA:\tyou're a silly goose .\n"), ((213, (10, 15)), '*GMA:\tthe pizza [!] .\n'), ((216, (9, 14)), '*CHI:\tmy pizza ?\n'), ((222, (31, 37)), "*GMA:\tit's [///] you smell the cheese [!] (.) .\n"), ((225, (16, 21)), '*GMA:\tthat good pizza ?\n'), ((235, (22, 27)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((235, (64, 69)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((244, (22, 27)), "*GMA:\tthere's no more steak .\n"), ((247, (25, 30)), '*GMA:\tfinish eating your pizza .\n'), ((252, (19, 24)), "*CHI:\tthere's more steak !\n"), ((323, (46, 50)), "*CHI:\t<I'm gonna put my> [/] I'm gonna put my food <in a paper> [/] in a paper bag [!] this (.) time .\n"), ((332, (21, 25)), '*CHI:\tI gonna put my food in a paper <bag [!]> [>] .\n'), ((337, (19, 23)), '*GMA:\tput [<] your food in a paper bag ?\n'), ((628, (24, 29)), '*CHI:\tone more piece of steak left [!] .\n'), ((666, (29, 34)), '*GMA:\teat [<] your delicious pizza .\n'), ((684, (20, 25)), '*GMA:\thow about the pizza ?\n'), ((693, (25, 30)), "*GMA:\tthis [!] one's the pizza .\n"), ((705, (18, 23)), '*CHI:\tI call this pizza too .\n'), ((714, (22, 26)), '*CHI:\tthis is kind of food .\n'), ((721, (6, 11)), '*CHI:\tpizza .\n'), ((741, (25, 30)), '*CHI:\twho likes this [!] pizza ?\n'), ((805, (15, 22)), '*MOT:\tyou want dessert ?\n'), ((819, (19, 26)), "*CHI:\tI don't want dessert .\n"), ((936, (20, 24)), '*GFA:\tput some more milk .\n'), ((939, (21, 26)), "*CHI:\tGrandpa that's sugar [?] in there ?\n"), ((945, (21, 26)), '*GFA:\tgonna put some sugar on there too .\n'), ((955, (13, 18)), '*GFA:\tI like sugar on there .\n'), ((991, (37, 45)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((991, (50, 54)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((1020, (24, 28)), '*GMA:\tyou done with the milk ?\n'), ((1039, (23, 30)), '*CHI:\tbut (.) &-um (.) oatmeal in it ?\n'), ((1045, (16, 24)), "*GFA:\tit's just crackers and milk .\n"), ((1045, (29, 33)), "*GFA:\tit's just crackers and milk .\n"), ((1048, (15, 23)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1048, (28, 32)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1067, (18, 24)), '*GFA:\tdid you eat supper already ?\n'), ((1077, (18, 24)), '*GFA:\tdid you eat supper already ?\n'), ((1089, (56, 62)), '*GFA:\tyou <sa(ved)> [//] you saved some room for my [!] supper (.) ?\n'), ((1113, (22, 27)), '*GFA:\t<can I have the sugar and the spoon> [<] back ?\n'), ((1121, (29, 34)), '*GMA:\tyou already put enough sugar on there (.) .\n'), ((1149, (26, 31)), "*GFA:\tGrandma's trying to sugar me to death here .\n"), ((1161, (18, 23)), "*CHI:\tit's by the jelly !\n"), ((1167, (19, 27)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1167, (32, 36)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1180, (35, 39)), '*MOT:\tshe says she likes them with milk .\n'), ((1237, (30, 33)), '*GMA:\tthe night he was making ham in the oven .\n'), ((1446, (34, 39)), "*MOT:\tnow sit still in Papa's lap honey .\n"), ((1467, (40, 46)), "*GFA:\t<she's having her second [!]> [<] supper [!] .\n"), ((1472, (15, 21)), '*GMA:\tshe eats supper with him [!] too (.) .\n'), ((1475, (25, 28)), "*MOT:\tshe's going to get fat !\n"), ((1489, (14, 17)), "*GFA:\tI'm not fat [!] .\n"), ((1527, (21, 27)), '*GMA:\tPapa saved you supper .\n'), ((1534, (27, 33)), "*GMA:\twhat d'you@d eat for supper before (.) ?\n"), ((1537, (35, 41)), "*GMA:\twhat d'you@d already eat for supper ?\n"), ((1540, (6, 11)), '*CHI:\tpizza .\n'), ((1552, (6, 11)), '*CHI:\tsteak .\n'), ((1565, (6, 11)), '*CHI:\tsteak and pizza !\n'), ((1565, (16, 21)), '*CHI:\tsteak and pizza !\n'), ((1568, (6, 11)), '*GFA:\tsteak and pizza ?\n'), ((1568, (16, 21)), '*GFA:\tsteak and pizza ?\n'), ((1581, (27, 35)), "*GMA:\tshe didn't like the <macaroni salad> [>] .\n"), ((1581, (36, 41)), "*GMA:\tshe didn't like the <macaroni salad> [>] .\n"), ((1592, (13, 27)), "*MOT:\tthat's Canadian bacon .\n"), ((1656, (39, 45)), '*GMA:\tget down so Papa can finish <his supper> [>] .\n')]
calculating accuracy and recall
correct labels:
set(['cheese', 'ham', 'macaroni salad', 'sugar', 'jelly', 'oatmeal', 'milk', 'celery', 'peanut butter and jelly', 'calzone', 'saltine crackers', 'crackers', 'steak', 'canadian bacon', 'pean(ut) butter', 'peanut butter', 'pizza'])
predicted labels:
set(['cheese', 'goose', 'milk', 'ham', 'sugar', 'celery', 'macaroni', 'pizza', 'food', 'dessert', 'fat', 'lunch', 'supper', 'butter', 'honey', 'salad', 'jelly', 'oatmeal', 'crackers', 'steak', 'canadian bacon', 'peanut butter'])
file:HSLLD/HV1/MT//allmt1.cha
precision: 0.545454545455
recall: 0.705882352941
true positives:['canadian bacon', 'celery', 'cheese', 'crackers', 'ham', 'jelly', 'milk', 'oatmeal', 'peanut butter', 'pizza', 'steak', 'sugar']
false positives: ['butter', 'dessert', 'fat', 'food', 'goose', 'honey', 'lunch', 'macaroni', 'salad', 'supper']
false negatives: ['calzone', 'macaroni salad', 'pean(ut) butter', 'peanut butter and jelly', 'saltine crackers']
# true pos: 12
# false pos: 10
# false neg: 5
HSLLD/HV1/MT//rilmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//rilmt1.cha
HSLLD/HV1/MT//sarmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//sarmt1.cha
HSLLD/HV1/MT//joymt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//joymt1.cha
HSLLD/HV1/MT//melmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//melmt1.cha
HSLLD/HV1/MT//tommt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tommt1.cha
HSLLD/HV1/MT//joemt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//joemt1.cha
HSLLD/HV1/MT//emimt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
descended from food: [['N'], 'butter', 6, 12]
butter
butter butter 499
[('butter', 'NN')]
['butter']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
broccoli
broccoli broccoli 30
[('do', 'VBP'), ('you', 'PRP'), ('want', 'VB'), ('some', 'DT'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
2
broccoli
broccoli broccoli 30
[('i', 'JJ'), ('hate', 'VBP'), ('broccoli', 'NNS')]
['broccoli']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'porkchops', 16, 25]
candidates to check:
4
descended from food: [['N'], 'pork', 25, 29]
pork
pork pork 541
[('mom', 'NN'), ('i', 'VBZ'), ('only', 'RB'), ('got', 'VBD'), ('one', 'CD'), ('pork', 'NN'), ('chop', 'NN')]
['pork']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'porkchop', 26, 34]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
9
descended from food: [['N'], 'potato', 45, 51]
descended from food: [['N'], 'salad', 52, 57]
broccoli
broccoli broccoli 30
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS'), ('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('potato', 'JJ'), ('salad', 'NN'), ('and', 'CC'), ('there', 'EX'), ('is', 'VBZ'), ('uh', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['broccoli']
('food -> ', [])
potato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f7269ffe518>)
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS'), ('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('potato', 'JJ'), ('salad', 'NN'), ('and', 'CC'), ('there', 'EX'), ('is', 'VBZ'), ('uh', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['potato']
('food -> ', [])
potato salad
potato salad potato salad 143
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS'), ('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('potato', 'JJ'), ('salad', 'NN'), ('and', 'CC'), ('there', 'EX'), ('is', 'VBZ'), ('uh', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['potato', 'salad']
('food -> ', [])
corn
corn corn 419
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS'), ('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('potato', 'JJ'), ('salad', 'NN'), ('and', 'CC'), ('there', 'EX'), ('is', 'VBZ'), ('uh', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
corn
corn corn 419
[('xxx', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'applesauce', 27, 37]
applesauce
applesauce applesauce 76
[('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('applesauce', 'NNS')]
['applesauce']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'porkchops', 32, 41]
candidates to check:
2
descended from food: [['N'], 'porkchops', 15, 24]
candidates to check:
2
corn
corn corn 419
[('oh', 'IN'), ('you', 'PRP'), ('want', 'VBP'), ('the', 'DT'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [])
candidates to check:
3
corn
corn corn 419
[('you', 'PRP'), ('re', 'VBP'), ('too', 'RB'), ('little', 'JJ'), ('to', 'TO'), ('eat', 'VB'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN'), ('heather', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'porkchops', 20, 29]
candidates to check:
1
candidates to check:
2
corn
corn corn 419
[('nobody', 'NN'), ('takes', 'VBZ'), ('my', 'PRP$'), ('corn', 'NN'), ('heather', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
8
candidates to check:
6
candidates to check:
3
water
water water 18
[('water', 'NN'), ('mommy', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
candidates to check:
3
corn
corn corn 419
[('is', 'VBZ'), ('there', 'EX'), ('any', 'DT'), ('more', 'JJR'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [])
candidates to check:
2
broccoli
broccoli broccoli 30
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS')]
['broccoli']
('food -> ', [])
candidates to check:
2
broccoli
broccoli broccoli 30
[('eat', 'NN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
2
broccoli
broccoli broccoli 30
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
1
broccoli
broccoli broccoli 30
[('broccoli', 'NN'), ('s', 'NN'), ('good', 'NN'), ('for', 'IN'), ('you', 'PRP')]
['broccoli']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'dessert', 13, 20]
candidates to check:
1
honey
honey honey 304
[('honey', 'NN'), ('dew', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
honey
honey honey 304
[('honey', 'NN'), ('dew', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
3
descended from food: [['N'], 'salad', 13, 18]
fruit salad
fruit salad fruit salad 86
[('fruit', 'NN'), ('salad', 'NN')]
['fruit', 'salad']
('food -> ', [])
fruit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f7269fde638>)
[('fruit', 'NN'), ('salad', 'NN')]
['fruit']
('food -> ', [])
candidates to check:
5
descended from food: [['N'], 'salad', 44, 49]
fruit salad
fruit salad fruit salad 86
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('enough', 'JJ'), ('stuff', 'NN'), ('for', 'IN'), ('a', 'DT'), ('fruit', 'NN'), ('salad', 'NN')]
['fruit', 'salad']
('food -> ', [])
fruit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f7269fdebd8>)
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('enough', 'JJ'), ('stuff', 'NN'), ('for', 'IN'), ('a', 'DT'), ('fruit', 'NN'), ('salad', 'NN')]
['fruit']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'applesauce', 24, 34]
applesauce
applesauce applesauce 76
[('i', 'NN'), ('want', 'VBP'), ('more', 'JJR'), ('applesauce', 'NNS')]
['applesauce']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
corn
corn corn 419
[('i', 'NNS'), ('have', 'VBP'), ('a', 'DT'), ('corn', 'NN'), ('for', 'IN'), ('you', 'PRP'), ('if', 'IN'), ('you', 'PRP'), ('want', 'VBP')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
3
corn
corn corn 419
[('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'applesauce', 27, 37]
applesauce
applesauce applesauce 76
[('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('applesauce', 'NNS')]
['applesauce']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
1
broccoli
broccoli broccoli 30
[('i', 'NN'), ('ate', 'VBP'), ('my', 'PRP$'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
corn
corn corn 419
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('some', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'butter', 20, 26]
butter
butter butter 499
[('gi', 'NN'), ('ve', 'IN'), ('me', 'PRP'), ('the', 'DT'), ('butter', 'NN'), ('please', 'NN')]
['butter']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'butter', 17, 23]
butter
butter butter 499
[('i', 'NNS'), ('need', 'VBP'), ('the', 'DT'), ('butter', 'NN')]
['butter']
('food -> ', [])
candidates to check:
4
corn
corn corn 419
[('there', 'RB'), ('s', 'VBZ'), ('only', 'RB'), ('one', 'CD'), ('more', 'JJR'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN'), ('and', 'CC'), ('three', 'CD'), ('of', 'IN'), ('you', 'PRP'), ('guys', 'VBP')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
honey
honey honey 304
[('what', 'WP'), ('about', 'IN'), ('um', 'JJ'), ('honey', 'NN'), ('dew', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
cream
cream cream 72
[('mom', 'NN'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('the', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('now', 'RB')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('mom', 'NN'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('the', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('now', 'RB')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'ketchup', 6, 13]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'ketchup', 6, 13]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
salt
salt salt 0
[('salt', 'NN'), ('and', 'CC'), ('pepper', 'NN'), ('mom', 'NN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
pepper
pepper pepper 27
[('salt', 'NN'), ('and', 'CC'), ('pepper', 'NN'), ('mom', 'NN')]
['pepper']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
1
salt
salt salt 0
[('freddy', 'RB'), ('give', 'VB'), ('me', 'PRP'), ('the', 'DT'), ('salt', 'NN'), ('please', 'NN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
1
descended from food: [['N'], 'butter', 20, 26]
butter
butter butter 499
[('ma', 'NN'), ('i', 'NNS'), ('need', 'VBP'), ('the', 'DT'), ('butter', 'NN')]
['butter']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'butter', 18, 24]
butter
butter butter 499
[('where', 'WRB'), ('s', 'PDT'), ('the', 'DT'), ('butter', 'NN')]
['butter']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'butter', 18, 24]
butter
butter butter 499
[('where', 'WRB'), ('s', 'PDT'), ('the', 'DT'), ('butter', 'NN')]
['butter']
('food -> ', [])
candidates to check:
1
corn
corn corn 419
[('you', 'PRP'), ('re', 'VBP'), ('not', 'RB'), ('gon', 'VB'), ('t', 'VB'), ('a', 'DT'), ('going', 'VBG'), ('to', 'TO'), ('be', 'VB'), ('able', 'JJ'), ('to', 'TO'), ('finish', 'VB'), ('this', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
corn
corn corn 419
[('why', 'WRB'), ('don', 'JJ'), ('t', 'NN'), ('we', 'PRP'), ('save', 'VBP'), ('this', 'DT'), ('corn', 'NN'), ('for', 'IN'), ('you', 'PRP'), ('for', 'IN'), ('later', 'JJR')]
['corn']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'food', 17, 21]
candidates to check:
1
descended from food: [['N'], 'food', 22, 26]
candidates to check:
4
descended from food: [['N'], 'potato', 11, 17]
descended from food: [['N'], 'salad', 18, 23]
potato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a076560>)
[('have', 'VB'), ('potato', 'NN'), ('salad', 'NN')]
['potato']
('food -> ', [])
potato salad
potato salad potato salad 143
[('have', 'VB'), ('potato', 'NN'), ('salad', 'NN')]
['potato', 'salad']
('food -> ', [])
candidates to check:
4
descended from food: [['N'], 'potato', 13, 19]
descended from food: [['N'], 'salad', 20, 25]
potato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a076950>)
[('i', 'JJ'), ('hate', 'VBP'), ('potato', 'NN'), ('salad', 'NN')]
['potato']
('food -> ', [])
potato salad
potato salad potato salad 143
[('i', 'JJ'), ('hate', 'VBP'), ('potato', 'NN'), ('salad', 'NN')]
['potato', 'salad']
('food -> ', [])
candidates to check:
1
broccoli
broccoli broccoli 30
[('xxx', 'NN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'applesauce', 16, 26]
applesauce
applesauce applesauce 76
[('have', 'VB'), ('more', 'JJR'), ('applesauce', 'NNS')]
['applesauce']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'food', 49, 53]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'pork', 10, 14]
pork
pork pork 541
[('one', 'CD'), ('pork', 'NN'), ('chop', 'NN')]
['pork']
('food -> ', [])
candidates to check:
1
water
water water 18
[('i', 'NN'), ('want', 'VBP'), ('some', 'DT'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'popsicle', 14, 22]
candidates to check:
1
descended from food: [['N'], 'applesauce', 32, 42]
applesauce
applesauce applesauce 76
[('i', 'NN'), ('want', 'VBP'), ('some', 'DT'), ('more', 'RBR'), ('um', 'JJ'), ('applesauce', 'NN')]
['applesauce']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
loading solution set
calculating
set([(1324, (8, 18)), (1218, (18, 24)), (706, (20, 28)), (1534, (32, 42)), (966, (20, 26)), (823, (27, 37)), (523, (27, 37)), (335, (13, 21)), (1334, (6, 16)), (765, (40, 51)), (1203, (6, 10)), (772, (19, 30)), (1508, (18, 23)), (425, (19, 27)), (627, (26, 30)), (691, (24, 39)), (740, (38, 49)), (586, (20, 29)), (783, (21, 25)), (425, (81, 96)), (721, (6, 15)), (1228, (61, 65)), (984, (28, 43)), (700, (19, 27)), (1337, (16, 26)), (759, (21, 32)), (798, (21, 36)), (1074, (43, 52)), (442, (11, 26)), (709, (6, 14)), (527, (32, 41)), (384, (26, 34)), (734, (7, 18)), (359, (25, 34)), (573, (31, 46)), (563, (22, 37)), (969, (17, 23)), (943, (22, 26)), (724, (6, 15)), (836, (16, 24)), (1030, (26, 35)), (1206, (25, 29)), (1311, (11, 23)), (679, (6, 11)), (350, (16, 25)), (1203, (15, 21)), (703, (11, 19)), (257, (6, 12)), (1314, (13, 25)), (329, (29, 37)), (1040, (19, 30)), (1215, (18, 24)), (1499, (10, 19)), (425, (45, 57)), (1149, (6, 13)), (753, (24, 34)), (1525, (14, 22)), (1318, (10, 18)), (1561, (38, 48)), (547, (15, 24)), (1233, (29, 33)), (1209, (20, 26))])
[((257, (6, 12)), '*MOT:\tbutter .\n'), ((329, (29, 37)), '*MOT:\t<do you want> [<] some broccoli ?\n'), ((335, (13, 21)), '*BR3:\tI hate broccoli .\n'), ((350, (16, 25)), '*BR2:\t<any more porkchops> [<] ?\n'), ((359, (25, 34)), '*BR2:\tMom I only got one pork chop .\n'), ((384, (26, 34)), '*MOT:\tdo you want another porkchop ?\n'), ((425, (19, 27)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (45, 57)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (81, 96)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((442, (11, 26)), '*BR2:\t<xxx corn on the cob> [<] ?\n'), ((523, (27, 37)), '*CHI:\tcan I have some more applesauce [>] ?\n'), ((527, (32, 41)), '*MOT:\t<did Heather eat> [<] her porkchops ?\n'), ((547, (15, 24)), '*MOT:\tyou like porkchops ?\n'), ((563, (22, 37)), '*MOT:\toh you want the corn on the cob .\n'), ((573, (31, 46)), "*MOT:\tyou're too little to eat corn on the cob Heather .\n"), ((586, (20, 29)), '*MOT:\tshe wants the porkchops .\n'), ((627, (26, 30)), '*BR2:\tnobody [<] takes my corn Heather .\n'), ((679, (6, 11)), '*BR2:\twater Mommy .\n'), ((691, (24, 39)), '*BR1:\tis there any more corn on the cob ?\n'), ((700, (19, 27)), "*MOT:\tthere's more broccoli .\n"), ((703, (11, 19)), '*MOT:\t<eat broccoli> [>] .\n'), ((706, (20, 28)), "*BR1:\t<I don't want broccoli> [<] .\n"), ((709, (6, 14)), "*MOT:\tbroccoli's good for you .\n"), ((721, (6, 15)), '*MOT:\thoney+dew .\n'), ((724, (6, 15)), '*BR2:\thoney+dew [>] ?\n'), ((734, (7, 18)), '*BR1:\t<fruit salad> [<] ?\n'), ((740, (38, 49)), "*MOT:\tI don't have enough stuff for a fruit salad .\n"), ((753, (24, 34)), '*CHI:\t<I want> [<] more applesauce .\n'), ((759, (21, 32)), '*BR2:\twhat about the Fudgesicles [>] ?\n'), ((765, (40, 51)), '*BR2:\t<you said> [<] we were gonna have Fudgesicles .\n'), ((772, (19, 30)), '*MOT:\tyou can have Fudgesicles too .\n'), ((783, (21, 25)), '*MOT:\t<I have> [<] a corn for you <if you want> [>] .\n'), ((798, (21, 36)), "*MOT:\tyou don't want corn on the cob ?\n"), ((823, (27, 37)), '*CHI:\tcan I have some more applesauce .\n'), ((836, (16, 24)), '*CHI:\tI ate <my broccoli> [>] .\n'), ((943, (22, 26)), '*BR3:\tcan I have some corn ?\n'), ((966, (20, 26)), '*MOT:\tgi(ve) me the butter please .\n'), ((969, (17, 23)), '*CHI:\tI need the butter !\n'), ((984, (28, 43)), "*MOT:\tthere's only one more corn on the cob and three of you guys .\n"), ((1030, (26, 35)), '*BR1:\twhat about (.) &-um honey+dew ?\n'), ((1040, (19, 30)), '*MOT:\tyou have the Fudgesicles .\n'), ((1074, (43, 52)), '*BR1:\tmom <can I have> [/] can I have <the ice cream now> [>] .\n'), ((1149, (6, 13)), '*BR2:\tketchup .\n'), ((1203, (6, 10)), '*BR2:\tsalt and pepper Mom .\n'), ((1203, (15, 21)), '*BR2:\tsalt and pepper Mom .\n'), ((1206, (25, 29)), '*MOT:\tFreddy give me the salt please .\n'), ((1209, (20, 26)), '*CHI:\tMa I need the butter !\n'), ((1215, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1218, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1228, (61, 65)), "*MOT:\tyou're not gon(t)a [: going to] be able to finish this corn .\n"), ((1233, (29, 33)), "*MOT:\twhy don't we save this corn for you for later ?\n"), ((1311, (11, 23)), '*MOT:\thave potato salad .\n'), ((1314, (13, 25)), '*BR1:\tI hate potato salad .\n'), ((1318, (10, 18)), '*MOT:\txxx broccoli .\n'), ((1324, (8, 18)), '*BR2:\ta Fudgesicle !\n'), ((1334, (6, 16)), '*CHI:\tFudgesicle !\n'), ((1337, (16, 26)), '*MOT:\thave more applesauce .\n'), ((1499, (10, 19)), '*MOT:\tone pork chop .\n'), ((1508, (18, 23)), '*CHI:\tI want some water [>] !\n'), ((1525, (14, 22)), '*BR1:\txxx the popsicle .\n'), ((1534, (32, 42)), '*CHI:\tI want some more &-um (.) applesauce .\n'), ((1561, (38, 48)), "*BR2:\tyou're gonna get dirty with the Fudgesicle anyway (.) .\n")]
set([(721, (6, 11)), (1218, (18, 24)), (706, (20, 28)), (1534, (32, 42)), (691, (24, 28)), (966, (20, 26)), (823, (27, 37)), (523, (27, 37)), (335, (13, 21)), (724, (6, 11)), (573, (31, 35)), (1162, (6, 13)), (329, (29, 37)), (1030, (26, 31)), (442, (11, 15)), (1508, (18, 23)), (425, (19, 27)), (627, (26, 30)), (1203, (6, 10)), (1293, (17, 21)), (740, (38, 49)), (586, (20, 29)), (1363, (49, 53)), (1499, (10, 14)), (783, (21, 25)), (715, (13, 20)), (1228, (61, 65)), (984, (28, 32)), (700, (19, 27)), (1337, (16, 26)), (563, (22, 26)), (1299, (22, 26)), (709, (6, 14)), (527, (32, 41)), (384, (26, 34)), (734, (7, 18)), (836, (16, 24)), (969, (17, 23)), (943, (22, 26)), (1209, (20, 26)), (1206, (25, 29)), (1311, (11, 23)), (679, (6, 11)), (350, (16, 25)), (1203, (15, 21)), (798, (21, 25)), (703, (11, 19)), (257, (6, 12)), (1314, (13, 25)), (359, (25, 29)), (1318, (10, 18)), (1215, (18, 24)), (425, (45, 57)), (1074, (43, 52)), (1149, (6, 13)), (753, (24, 34)), (1525, (14, 22)), (425, (81, 85)), (547, (15, 24)), (1233, (29, 33))])
[((257, (6, 12)), '*MOT:\tbutter .\n'), ((329, (29, 37)), '*MOT:\t<do you want> [<] some broccoli ?\n'), ((335, (13, 21)), '*BR3:\tI hate broccoli .\n'), ((350, (16, 25)), '*BR2:\t<any more porkchops> [<] ?\n'), ((359, (25, 29)), '*BR2:\tMom I only got one pork chop .\n'), ((384, (26, 34)), '*MOT:\tdo you want another porkchop ?\n'), ((425, (19, 27)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (45, 57)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (81, 85)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((442, (11, 15)), '*BR2:\t<xxx corn on the cob> [<] ?\n'), ((523, (27, 37)), '*CHI:\tcan I have some more applesauce [>] ?\n'), ((527, (32, 41)), '*MOT:\t<did Heather eat> [<] her porkchops ?\n'), ((547, (15, 24)), '*MOT:\tyou like porkchops ?\n'), ((563, (22, 26)), '*MOT:\toh you want the corn on the cob .\n'), ((573, (31, 35)), "*MOT:\tyou're too little to eat corn on the cob Heather .\n"), ((586, (20, 29)), '*MOT:\tshe wants the porkchops .\n'), ((627, (26, 30)), '*BR2:\tnobody [<] takes my corn Heather .\n'), ((679, (6, 11)), '*BR2:\twater Mommy .\n'), ((691, (24, 28)), '*BR1:\tis there any more corn on the cob ?\n'), ((700, (19, 27)), "*MOT:\tthere's more broccoli .\n"), ((703, (11, 19)), '*MOT:\t<eat broccoli> [>] .\n'), ((706, (20, 28)), "*BR1:\t<I don't want broccoli> [<] .\n"), ((709, (6, 14)), "*MOT:\tbroccoli's good for you .\n"), ((715, (13, 20)), "*BR1:\twhat's dessert ?\n"), ((721, (6, 11)), '*MOT:\thoney+dew .\n'), ((724, (6, 11)), '*BR2:\thoney+dew [>] ?\n'), ((734, (7, 18)), '*BR1:\t<fruit salad> [<] ?\n'), ((740, (38, 49)), "*MOT:\tI don't have enough stuff for a fruit salad .\n"), ((753, (24, 34)), '*CHI:\t<I want> [<] more applesauce .\n'), ((783, (21, 25)), '*MOT:\t<I have> [<] a corn for you <if you want> [>] .\n'), ((798, (21, 25)), "*MOT:\tyou don't want corn on the cob ?\n"), ((823, (27, 37)), '*CHI:\tcan I have some more applesauce .\n'), ((836, (16, 24)), '*CHI:\tI ate <my broccoli> [>] .\n'), ((943, (22, 26)), '*BR3:\tcan I have some corn ?\n'), ((966, (20, 26)), '*MOT:\tgi(ve) me the butter please .\n'), ((969, (17, 23)), '*CHI:\tI need the butter !\n'), ((984, (28, 32)), "*MOT:\tthere's only one more corn on the cob and three of you guys .\n"), ((1030, (26, 31)), '*BR1:\twhat about (.) &-um honey+dew ?\n'), ((1074, (43, 52)), '*BR1:\tmom <can I have> [/] can I have <the ice cream now> [>] .\n'), ((1149, (6, 13)), '*BR2:\tketchup .\n'), ((1162, (6, 13)), '*BR2:\tketchup please Mom .\n'), ((1203, (6, 10)), '*BR2:\tsalt and pepper Mom .\n'), ((1203, (15, 21)), '*BR2:\tsalt and pepper Mom .\n'), ((1206, (25, 29)), '*MOT:\tFreddy give me the salt please .\n'), ((1209, (20, 26)), '*CHI:\tMa I need the butter !\n'), ((1215, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1218, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1228, (61, 65)), "*MOT:\tyou're not gon(t)a [: going to] be able to finish this corn .\n"), ((1233, (29, 33)), "*MOT:\twhy don't we save this corn for you for later ?\n"), ((1293, (17, 21)), '*CHI:\tis she xxx food .\n'), ((1299, (22, 26)), "*CHI:\tshe's taking my food !\n"), ((1311, (11, 23)), '*MOT:\thave potato salad .\n'), ((1314, (13, 25)), '*BR1:\tI hate potato salad .\n'), ((1318, (10, 18)), '*MOT:\txxx broccoli .\n'), ((1337, (16, 26)), '*MOT:\thave more applesauce .\n'), ((1363, (49, 53)), '*MOT:\tkeep [!] your mouth shut [!] when you have food in it .\n'), ((1499, (10, 14)), '*MOT:\tone pork chop .\n'), ((1508, (18, 23)), '*CHI:\tI want some water [>] !\n'), ((1525, (14, 22)), '*BR1:\txxx the popsicle .\n'), ((1534, (32, 42)), '*CHI:\tI want some more &-um (.) applesauce .\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'porkchop', 'porkchops', 'applesauce', 'fruit salad', 'pork chop', 'corn', 'fudgesicle', 'pepper', 'potato salad', 'ketchup', 'water', 'corn on the cob', 'honey+dew', 'fudgesicles', 'salt', 'broccoli', 'ice cream', 'popsicle'])
predicted labels:
set(['butter', 'honey', 'pork', 'porkchops', 'popsicle', 'fruit salad', 'food', 'dessert', 'corn', 'porkchop', 'potato salad', 'ketchup', 'water', 'applesauce', 'pepper', 'salt', 'broccoli', 'ice cream'])
file:HSLLD/HV1/MT//emimt1.cha
precision: 0.777777777778
recall: 0.736842105263
true positives:['applesauce', 'broccoli', 'butter', 'corn', 'fruit salad', 'ice cream', 'ketchup', 'pepper', 'popsicle', 'porkchop', 'porkchops', 'potato salad', 'salt', 'water']
false positives: ['dessert', 'food', 'honey', 'pork']
false negatives: ['corn on the cob', 'fudgesicle', 'fudgesicles', 'honey+dew', 'pork chop']
# true pos: 14
# false pos: 4
# false neg: 5
HSLLD/HV1/MT//tammt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tammt1.cha
HSLLD/HV1/MT//kevmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//kevmt1.cha
HSLLD/HV1/MT//jenmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jenmt1.cha
HSLLD/HV1/MT//karmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//karmt1.cha
HSLLD/HV1/MT//jacmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
duck
duck duck 84
[('and', 'CC'), ('the', 'DT'), ('howard', 'NN'), ('the', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
3
duck
duck duck 84
[('was', 'VBD'), ('that', 'IN'), ('the', 'DT'), ('howard', 'NN'), ('the', 'DT'), ('duck', 'NN'), ('tape', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
duck
duck duck 84
[('where', 'WRB'), ('is', 'VBZ'), ('howard', 'PDT'), ('the', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [['duck', 'American Indian/Alaska Native Foods']])
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'dessert', 35, 42]
candidates to check:
1
descended from food: [['N'], 'spaghetti', 34, 43]
spaghetti
spaghetti spaghetti 100
[('did', 'VBD'), ('you', 'PRP'), ('eat', 'VB'), ('all', 'DT'), ('of', 'IN'), ('your', 'PRP$'), ('spaghetti', 'NNS')]
['spaghetti']
('food -> ', [['spaghetti', 'Meals, Entrees, and Side Dishes']])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
loading solution set
calculating
set([(725, (26, 34)), (311, (22, 30)), (329, (34, 43)), (721, (26, 34))])
[((311, (22, 30)), '*MOT:\twant me to make brownies for dessert ?\n'), ((329, (34, 43)), '*MOT:\tdid you eat all of your (.) spaghetti [>] ?\n'), ((721, (26, 34)), "*MOT:\tI'm gonna make some brownies anyway .\n"), ((725, (26, 34)), "*MOT:\tdon't you want some brownies ?\n")]
set([(46, (26, 30)), (218, (26, 30)), (329, (34, 43)), (311, (35, 42)), (53, (30, 34))])
[((46, (26, 30)), '*CHI:\t<and the Howard the Duck [/]> [>] .\n'), ((53, (30, 34)), '*CHI:\twas that the Howard the Duck tape ?\n'), ((218, (26, 30)), '*CHI:\twhere is Howard the Duck ?\n'), ((311, (35, 42)), '*MOT:\twant me to make brownies for dessert ?\n'), ((329, (34, 43)), '*MOT:\tdid you eat all of your (.) spaghetti [>] ?\n')]
calculating accuracy and recall
correct labels:
set(['spaghetti', 'brownies'])
predicted labels:
set(['dessert', 'spaghetti', 'duck'])
file:HSLLD/HV1/MT//jacmt1.cha
precision: 0.333333333333
recall: 0.5
true positives:['spaghetti']
false positives: ['dessert', 'duck']
false negatives: ['brownies']
# true pos: 1
# false pos: 2
# false neg: 1
HSLLD/HV1/MT//deamt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//deamt1.cha
HSLLD/HV1/MT//gremt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'sandwich', 15, 23]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['N'], 'milk', 18, 22]
milk
milk milk 46
[('drink', 'VB'), ('your', 'PRP$'), ('milk', 'NN'), ('eat', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'sandwich', 32, 40]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'sandwich', 94, 102]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'sandwich', 37, 45]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'sandwich', 14, 22]
candidates to check:
1
loading solution set
calculating
set([(78, (32, 40)), (24, (15, 23)), (44, (18, 22))])
[((24, (15, 23)), '*MOT:\teat your sandwich .\n'), ((44, (18, 22)), '*MOT:\t<drink your milk> [<] [///] eat !\n'), ((78, (32, 40)), '*MOT:\tthen sit [!] and eat your sandwich .\n')]
set([(24, (15, 23)), (78, (32, 40)), (355, (14, 22)), (224, (94, 102)), (309, (37, 45)), (44, (18, 22))])
[((24, (15, 23)), '*MOT:\teat your sandwich .\n'), ((44, (18, 22)), '*MOT:\t<drink your milk> [<] [///] eat !\n'), ((78, (32, 40)), '*MOT:\tthen sit [!] and eat your sandwich .\n'), ((224, (94, 102)), "*MOT:\t(..) <when you're done [>]> [/] (.) when you're done with that I('ve) got some more (.) sandwich .\n"), ((309, (37, 45)), '*MOT:\tyou have_to finish eating your sandwich .\n'), ((355, (14, 22)), '*MOT:\teat the sandwich .\n')]
calculating accuracy and recall
correct labels:
set(['sandwich', 'milk'])
predicted labels:
set(['sandwich', 'milk'])
file:HSLLD/HV1/MT//gremt1.cha
precision: 1.0
recall: 1.0
true positives:['milk', 'sandwich']
false positives: []
false negatives: []
# true pos: 2
# false pos: 0
# false neg: 0
HSLLD/HV1/MT//diamt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
candidates to check:
3
descended from food: [['N'], 'supper', 31, 37]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'meat', 11, 15]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f7269f88638>)
[('yeah', 'RB'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
mustard
mustard mustard 60
[('xxx', 'NN'), ('xxx', 'NNP'), ('get', 'VB'), ('some', 'DT'), ('mustard', 'NN'), ('come', 'VBN'), ('on', 'IN')]
['mustard']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
corn
corn corn 419
[('the', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [])
macaroni
macaroni macaroni 128
[('macaroni', 'NN')]
['macaroni']
('food -> ', [['macaroni', 'Cereal Grains and Pasta']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'pizza', 6, 11]
pizza
pizza pizza 274
[('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'pizza', 6, 11]
pizza
pizza pizza 274
[('pizza', 'NN')]
['pizza']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
water
water water 18
[('water', 'NN'), ('wings', 'NNS')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'supper', 44, 50]
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'supper', 26, 32]
candidates to check:
1
descended from food: [['N'], 'supper', 27, 33]
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['N'], 'lunch', 37, 42]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['N'], 'soup', 80, 84]
soup
soup soup 72
[('i', 'JJ'), ('think', 'VBP'), ('i', 'IN'), ('i', 'NN'), ('i', 'VBP'), ('had', 'VBD'), ('i', 'NN'), ('i', 'NN'), ('had', 'VBD'), ('a', 'DT'), ('bowl', 'NN'), ('of', 'IN'), ('soup', 'NN')]
['soup']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'soup', 35, 39]
soup
soup soup 72
[('no', 'DT'), ('you', 'PRP'), ('didn', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('a', 'DT'), ('bowl', 'NN'), ('of', 'IN'), ('soup', 'NN'), ('you', 'PRP'), ('had', 'VBD'), ('what', 'WP')]
['soup']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['N'], 'lunch', 28, 33]
candidates to check:
1
tuna fish
tuna fish tuna fish 130
[('um', 'JJ'), ('tuna', 'NN'), ('fish', 'NN')]
['tuna', 'fish']
('food -> ', [['tuna fish', 'Finfish and Shellfish Products']])
fish
fish fish 305
[('um', 'JJ'), ('tuna', 'NN'), ('fish', 'NN')]
['fish']
('food -> ', [['tuna fish', 'Finfish and Shellfish Products']])
candidates to check:
1
descended from food: [['N'], 'bread', 29, 34]
bread
bread bread 186
[('did', 'VBD'), ('you', 'PRP'), ('have', 'VBP'), ('it', 'PRP'), ('in', 'IN'), ('the', 'DT'), ('bread', 'NN')]
['bread']
('food -> ', [['bread', 'American Indian/Alaska Native Foods']])
candidates to check:
1
descended from food: [['N'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'honey', 6, 11]
honey
honey honey 304
[('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
descended from food: [['N'], 'dessert', 29, 36]
candidates to check:
2
candidates to check:
6
cream
cream cream 72
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
6
cream
cream cream 72
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
2
candidates to check:
2
corn
corn corn 419
[('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [])
candidates to check:
1
candidates to check:
2
corn
corn corn 419
[('no', 'DT'), ('the', 'DT'), ('farm', 'NN'), ('is', 'VBZ'), ('where', 'WRB'), ('they', 'PRP'), ('grow', 'VBP'), ('the', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [])
candidates to check:
3
seeds
seeds seeds 592
[('because', 'IN'), ('they', 'PRP'), ('put', 'VBD'), ('it', 'PRP'), ('the', 'DT'), ('seeds', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('ground', 'NN'), ('and', 'CC'), ('the', 'DT'), ('corn', 'NN'), ('comes', 'VBZ'), ('up', 'RP')]
['seeds']
('food -> ', [['seeds', 'Nut and Seed Products']])
corn
corn corn 419
[('because', 'IN'), ('they', 'PRP'), ('put', 'VBD'), ('it', 'PRP'), ('the', 'DT'), ('seeds', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('ground', 'NN'), ('and', 'CC'), ('the', 'DT'), ('corn', 'NN'), ('comes', 'VBZ'), ('up', 'RP')]
['corn']
('food -> ', [['seeds', 'Nut and Seed Products']])
candidates to check:
1
seeds
seeds seeds 592
[('but', 'CC'), ('how', 'WRB'), ('seeds', 'NNS'), ('come', 'VBP'), ('up', 'RP')]
['seeds']
('food -> ', [['seeds', 'Nut and Seed Products']])
candidates to check:
1
seeds
seeds seeds 592
[('how', 'WRB'), ('seeds', 'NNS'), ('come', 'VBP'), ('up', 'RP')]
['seeds']
('food -> ', [['seeds', 'Nut and Seed Products']])
candidates to check:
6
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'meat', 11, 15]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a001b00>)
[('more', 'RBR'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'meat', 50, 54]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7f726a024998>)
[('you', 'PRP'), ('eat', 'VBP'), ('some', 'DT'), ('of', 'IN'), ('that', 'DT'), ('and', 'CC'), ('i', 'VB'), ('ll', 'VBP'), ('give', 'VB'), ('you', 'PRP'), ('more', 'JJR'), ('meat', 'NN'), ('donna', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'chicken', 16, 23]
chicken
chicken chicken 234
[('some', 'DT'), ('more', 'RBR'), ('chicken', 'NNS')]
['chicken']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'chicken', 6, 13]
chicken
chicken chicken 234
[('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'chicken', 17, 24]
descended from food: [['N'], 'steak', 30, 35]
chicken
chicken chicken 234
[('that', 'DT'), ('s', 'VBZ'), ('not', 'RB'), ('chicken', 'VB'), ('it', 'PRP'), ('s', 'JJ'), ('steak', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
descended from food: [['N'], 'dessert', 57, 64]
candidates to check:
6
cream
cream cream 72
[('um', 'JJ'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('um', 'JJ'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('um', 'JJ'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
6
cream
cream cream 72
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
6
cream
cream cream 72
[('but', 'CC'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('now', 'RB')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('but', 'CC'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('now', 'RB')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('but', 'CC'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('now', 'RB')]
['ice', 'cream', 'cone']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
6
cream
cream cream 72
[('but', 'CC'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('but', 'CC'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('but', 'CC'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
1
candidates to check:
10
cream
cream cream 72
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('tomorrow', 'NN')]
['cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('tomorrow', 'NN')]
['ice', 'cream']
('food -> ', [['cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('tomorrow', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['cream', 'Dairy and Egg Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['N'], 'milk', 32, 36]
milk
milk milk 46
[('would', 'MD'), ('you', 'PRP'), ('like', 'IN'), ('a', 'DT'), ('glass', 'NN'), ('of', 'IN'), ('milk', 'NN'), ('now', 'RB')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['N'], 'juice', 36, 41]
juice
juice juice 52
[('how', 'WRB'), ('about', 'IN'), ('a', 'DT'), ('glass', 'NN'), ('of', 'IN'), ('uh', 'JJ'), ('juice', 'NN')]
['juice']
('food -> ', [])
candidates to check:
1
descended from food: [['N'], 'popsicle', 15, 23]
candidates to check:
1
descended from food: [['N'], 'popsicle', 8, 16]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
loading solution set
calculating
set([(1355, (15, 23)), (1358, (8, 16)), (212, (6, 14)), (692, (29, 34)), (802, (41, 45)), (749, (6, 20)), (232, (6, 11)), (1281, (6, 15)), (771, (6, 21)), (1248, (6, 15)), (746, (6, 14)), (662, (35, 39)), (1284, (6, 15)), (1194, (6, 20)), (700, (6, 10)), (1342, (32, 36)), (930, (50, 54)), (1237, (33, 42)), (753, (6, 20)), (1218, (22, 36)), (935, (16, 23)), (668, (6, 10)), (685, (15, 24)), (1212, (20, 34)), (241, (6, 11)), (1191, (15, 29)), (941, (30, 35)), (927, (11, 15)), (659, (80, 84)), (36, (11, 20)), (1273, (6, 15)), (32, (6, 15)), (1351, (36, 41)), (67, (23, 30)), (938, (6, 13)), (199, (10, 14)), (29, (10, 19)), (941, (17, 24)), (1207, (27, 41)), (811, (63, 67))])
[((29, (10, 19)), '*CHI:\txxx cucumbers .\n'), ((32, (6, 15)), '*MOT:\tcucumbers and what else (.) ?\n'), ((36, (11, 20)), '*CHI:\t&-um cucumbers .\n'), ((67, (23, 30)), '*FAT:\txxx xxx get some mustard come on .\n'), ((199, (10, 14)), '*CHI:\tthe corn [?] .\n'), ((212, (6, 14)), '*CHI:\tmacaroni [!] .\n'), ((232, (6, 11)), '*SIB:\tpizza ?\n'), ((241, (6, 11)), '*CHI:\tpizza .\n'), ((659, (80, 84)), '*CHI:\t<I think> [//] (.) <I> [/] <I> [//] <I had> [//] <I> [//] I had a bowl of soup .\n'), ((662, (35, 39)), "*MOT:\tno you didn't have a bowl of soup you had what ?\n"), ((668, (6, 10)), '*MOT:\ttuna ?\n'), ((685, (15, 24)), '*CHI:\t&-um (.) tuna+fish .\n'), ((692, (29, 34)), '*AUN:\tdid you have it in the bread ?\n'), ((700, (6, 10)), '*AUN:\tmilk [?] ?\n'), ((746, (6, 14)), '*CHI:\tice cone .\n'), ((749, (6, 20)), '*MOT:\tice cream cone .\n'), ((753, (6, 20)), '*CHI:\tice cream cone !\n'), ((771, (6, 21)), '*AUN:\tcorn on the cob .\n'), ((802, (41, 45)), '*MOT:\tno the farm is where they grow the corn .\n'), ((811, (63, 67)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((927, (11, 15)), '*CHI:\tmore meat .\n'), ((930, (50, 54)), "*MOT:\tyou eat some of that and I'll give you more meat Donna [?] .\n"), ((935, (16, 23)), '*CHI:\tsome more chicken .\n'), ((938, (6, 13)), '*CHI:\tchicken .\n'), ((941, (17, 24)), "*MOT:\tthat's not chicken it's steak .\n"), ((941, (30, 35)), "*MOT:\tthat's not chicken it's steak .\n"), ((1191, (15, 29)), '*CHI:\t&-um (.) ice cream cone .\n'), ((1194, (6, 20)), '*MOT:\tice cream cone ?\n'), ((1207, (27, 41)), "*CHI:\tbut I don't want any ice cream cone now .\n"), ((1212, (20, 34)), '*CHI:\tbut I want an ice cream cone .\n'), ((1218, (22, 36)), '*CHI:\tMommy I want an ice cream cone tomorrow .\n'), ((1237, (33, 42)), '*MOT:\tyou [/] you want some more cucumbers ?\n'), ((1248, (6, 15)), '*CHI:\tcucumbers (.) .\n'), ((1273, (6, 15)), '*SIB:\tcucumbers Chi .\n'), ((1281, (6, 15)), '*CHI:\tcucumbers .\n'), ((1284, (6, 15)), '*MOT:\tcucumbers ?\n'), ((1342, (32, 36)), '*MOT:\twould you like a glass of milk now ?\n'), ((1351, (36, 41)), '*MOT:\thow about a glass of &-uh (.) juice ?\n'), ((1355, (15, 23)), '*CHI:\tI want a popsicle .\n'), ((1358, (8, 16)), '*MOT:\ta popsicle ?\n')]
set([(811, (35, 40)), (1355, (15, 23)), (1358, (8, 16)), (212, (6, 14)), (692, (29, 34)), (802, (41, 45)), (1185, (57, 64)), (749, (6, 20)), (232, (6, 11)), (935, (16, 23)), (241, (6, 11)), (700, (6, 10)), (1342, (32, 36)), (930, (50, 54)), (826, (10, 15)), (753, (6, 20)), (1218, (22, 36)), (438, (27, 33)), (427, (44, 50)), (1194, (6, 20)), (1207, (27, 41)), (1212, (20, 34)), (304, (6, 11)), (938, (6, 13)), (662, (35, 39)), (1191, (15, 29)), (734, (29, 36)), (941, (30, 35)), (927, (11, 15)), (659, (80, 84)), (642, (37, 42)), (1351, (36, 41)), (67, (23, 30)), (435, (26, 32)), (199, (10, 14)), (720, (6, 11)), (771, (6, 10)), (680, (28, 33)), (685, (20, 24)), (941, (17, 24)), (818, (14, 19)), (811, (63, 67)), (18, (31, 37)), (55, (11, 15))])
[((18, (31, 37)), "*MOT:\tokay girls it's time for supper let's go !\n"), ((55, (11, 15)), '*MOT:\tyeah meat ?\n'), ((67, (23, 30)), '*FAT:\txxx xxx get some mustard come on .\n'), ((199, (10, 14)), '*CHI:\tthe corn [?] .\n'), ((212, (6, 14)), '*CHI:\tmacaroni [!] .\n'), ((232, (6, 11)), '*SIB:\tpizza ?\n'), ((241, (6, 11)), '*CHI:\tpizza .\n'), ((304, (6, 11)), '*MOT:\twater wings (.) ?\n'), ((427, (44, 50)), '*AUN:\tare you going to go in the pool after supper with me ?\n'), ((435, (26, 32)), "*CHI:\tdidn't you come for supper xxx ?\n"), ((438, (27, 33)), "*AUN:\tno I didn't come for supper .\n"), ((642, (37, 42)), '*AUN:\t&-um (.) what did you have for lunch today ?\n'), ((659, (80, 84)), '*CHI:\t<I think> [//] (.) <I> [/] <I> [//] <I had> [//] <I> [//] I had a bowl of soup .\n'), ((662, (35, 39)), "*MOT:\tno you didn't have a bowl of soup you had what ?\n"), ((680, (28, 33)), '*MOT:\twhat did you have for lunch today ?\n'), ((685, (20, 24)), '*CHI:\t&-um (.) tuna+fish .\n'), ((692, (29, 34)), '*AUN:\tdid you have it in the bread ?\n'), ((700, (6, 10)), '*AUN:\tmilk [?] ?\n'), ((720, (6, 11)), '*FAT:\thoney [?] ?\n'), ((734, (29, 36)), '*MOT:\t<what did you have for dessert> [<] ?\n'), ((749, (6, 20)), '*MOT:\tice cream cone .\n'), ((753, (6, 20)), '*CHI:\tice cream cone !\n'), ((771, (6, 10)), '*AUN:\tcorn on the cob .\n'), ((802, (41, 45)), '*MOT:\tno the farm is where they grow the corn .\n'), ((811, (35, 40)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((811, (63, 67)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((818, (14, 19)), '*CHI:\tbut how seeds come up ?\n'), ((826, (10, 15)), '*CHI:\thow seeds come up ?\n'), ((927, (11, 15)), '*CHI:\tmore meat .\n'), ((930, (50, 54)), "*MOT:\tyou eat some of that and I'll give you more meat Donna [?] .\n"), ((935, (16, 23)), '*CHI:\tsome more chicken .\n'), ((938, (6, 13)), '*CHI:\tchicken .\n'), ((941, (17, 24)), "*MOT:\tthat's not chicken it's steak .\n"), ((941, (30, 35)), "*MOT:\tthat's not chicken it's steak .\n"), ((1185, (57, 64)), '*MOT:\tif you eat all that up (.) what would you like for dessert ?\n'), ((1191, (15, 29)), '*CHI:\t&-um (.) ice cream cone .\n'), ((1194, (6, 20)), '*MOT:\tice cream cone ?\n'), ((1207, (27, 41)), "*CHI:\tbut I don't want any ice cream cone now .\n"), ((1212, (20, 34)), '*CHI:\tbut I want an ice cream cone .\n'), ((1218, (22, 36)), '*CHI:\tMommy I want an ice cream cone tomorrow .\n'), ((1342, (32, 36)), '*MOT:\twould you like a glass of milk now ?\n'), ((1351, (36, 41)), '*MOT:\thow about a glass of &-uh (.) juice ?\n'), ((1355, (15, 23)), '*CHI:\tI want a popsicle .\n'), ((1358, (8, 16)), '*MOT:\ta popsicle ?\n')]
calculating accuracy and recall
correct labels:
set(['steak', 'mustard', 'ice cream cone', 'juice', 'corn', 'popsicle', 'cucumbers', 'meat', 'soup', 'tuna+fish', 'corn on the cob', 'macaroni', 'ice cone', 'chicken', 'tuna', 'bread', 'milk', 'pizza'])
predicted labels:
set(['juice', 'honey', 'steak', 'mustard', 'ice cream cone', 'soup', 'dessert', 'corn', 'milk', 'popsicle', 'meat', 'water', 'lunch', 'seeds', 'macaroni', 'supper', 'chicken', 'bread', 'fish', 'pizza'])
file:HSLLD/HV1/MT//diamt1.cha
precision: 0.65
recall: 0.722222222222
true positives:['bread', 'chicken', 'corn', 'ice cream cone', 'juice', 'macaroni', 'meat', 'milk', 'mustard', 'pizza', 'popsicle', 'soup', 'steak']
false positives: ['dessert', 'fish', 'honey', 'lunch', 'seeds', 'supper', 'water']
false negatives: ['corn on the cob', 'cucumbers', 'ice cone', 'tuna', 'tuna+fish']
# true pos: 13
# false pos: 7
# false neg: 5
HSLLD/HV1/MT//remmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//remmt1.cha
HSLLD/HV1/MT//trumt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//trumt1.cha
HSLLD/HV1/MT//jusmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jusmt1.cha
HSLLD/HV1/MT//rosmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//rosmt1.cha
HSLLD/HV1/MT//seamt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//seamt1.cha
HSLLD/HV1/MT//arlmt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//arlmt1.cha
HSLLD/HV1/MT//trimt1.cha
[['N', 'N'], ['N'], ['A', 'N'], ['N', 'N', 'N'], ['A', 'N', 'N'], ['V', 'N']]
adding extra names
Added names by Yelena Mejova
9758
400
9958
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//trimt1.cha
precision: 0.604651162791
recall 0.758333333333
# true pos: 182
# false pos: 119
# false neg: 58
total runtime: 63.4593780041
