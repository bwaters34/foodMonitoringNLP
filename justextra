HSLLD/HV1/MT//alimt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//alimt1.cha
HSLLD/HV1/MT//davmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'supper', 22, 28]
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
4
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b95e9998>)
[('save', 'VB'), ('some', 'DT'), ('and', 'CC'), ('don', 'VB'), ('t', 'JJ'), ('eat', 'NN'), ('all', 'PDT'), ('the', 'DT'), ('cantaloupe', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
7
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
1
hard
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b92be3b0>)
[('don', 'NN'), ('t', 'NN'), ('squish', 'VB'), ('it', 'PRP'), ('so', 'RB'), ('hard', 'RB'), ('that', 'IN'), ('it', 'PRP'), ('comes', 'VBZ'), ('out', 'RP')]
['hard']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'supper', 11, 17]
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
7
descended from food: [['NN'], 'food', 19, 23]
candidates to check:
5
candidates to check:
3
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b92ed878>)
[('well', 'RB'), ('if', 'IN'), ('it', 'PRP'), ('hurts', 'VBZ'), ('that', 'IN'), ('much', 'JJ'), ('just', 'RB'), ('eat', 'VB'), ('your', 'PRP$'), ('cantaloupe', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
broccoli
broccoli broccoli 30
[('want', 'VB'), ('some', 'DT'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
3
candidates to check:
5
descended from food: [['NN'], 'lemon', 6, 11]
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'juice', 17, 22]
juice
juice juice 52
[('watch', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
6
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
fish
fish fish 305
[('didn', 'NN'), ('t', 'NN'), ('we', 'PRP'), ('play', 'VBP'), ('fish', 'JJ')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
fish
fish fish 305
[('and', 'CC'), ('we', 'PRP'), ('played', 'VBD'), ('fish', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
8
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
6
candidates to check:
4
fish
fish fish 305
[('we', 'PRP'), ('did', 'VBD'), ('we', 'PRP'), ('played', 'VBD'), ('fish', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
2
candidates to check:
2
fish
fish fish 305
[('and', 'CC'), ('we', 'PRP'), ('played', 'VBD'), ('another', 'DT'), ('fish', 'NN'), ('right', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
3
fish
fish fish 305
[('did', 'VBD'), ('we', 'PRP'), ('play', 'VB'), ('fish', 'JJ'), ('twice', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'chicken', 25, 32]
chicken
chicken chicken 234
[('wan', 'NN'), ('na', 'TO'), ('try', 'VB'), ('some', 'DT'), ('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
10
candidates to check:
1
chicken
chicken chicken 234
[('that', 'IN'), ('that', 'DT'), ('was', 'VBD'), ('chicken', 'VBN')]
['chicken']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
8
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'food', 21, 25]
candidates to check:
8
candidates to check:
4
descended from food: [['NN'], 'chicken', 61, 68]
chicken
chicken chicken 234
[('that', 'DT'), ('was', 'VBD'), ('a', 'DT'), ('couple', 'JJ'), ('o', 'JJ'), ('f', 'NN'), ('weeks', 'NNS'), ('ago', 'IN'), ('that', 'IN'), ('you', 'PRP'), ('ate', 'VBP'), ('that', 'IN'), ('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
4
candidates to check:
3
candidates to check:
8
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
7
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
3
descended from food: [['NN'], 'food', 74, 78]
hard
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b90f10e0>)
[('it', 'PRP'), ('s', 'VBZ'), ('really', 'RB'), ('hard', 'JJ'), ('to', 'TO'), ('understand', 'VB'), ('you', 'PRP'), ('when', 'WRB'), ('you', 'PRP'), ('talk', 'VBP'), ('with', 'IN'), ('food', 'NN'), ('in', 'IN'), ('your', 'PRP$'), ('mouth', 'NN'), ('though', 'IN'), ('okay', 'NN')]
['hard']
('food -> ', [])
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b90f4e18>)
[('oh', 'UH'), ('chi', 'NN'), ('not', 'RB'), ('the', 'DT'), ('fan', 'NN')]
['fan']
('food -> ', [])
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'meal', 41, 45]
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'sandwich', 11, 19]
candidates to check:
2
candidates to check:
2
candidates to check:
4
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b909e908>)
[('don', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('want', 'VBP'), ('any', 'DT'), ('cantaloupe', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
4
candidates to check:
2
candidates to check:
9
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
6
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b903dd40>)
[('don', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('even', 'RB'), ('want', 'VBP'), ('your', 'PRP$'), ('delicious', 'JJ'), ('cantaloupe', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
5
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b9042cb0>)
[('nice', 'JJ'), ('juicy', 'NN'), ('cantaloupe', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
2
descended from food: [['NN'], 'juice', 31, 36]
juice
juice juice 52
[('why', 'WRB'), ('don', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('drink', 'VBP'), ('your', 'PRP$'), ('juice', 'NN'), ('at', 'IN'), ('least', 'JJS')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
3
dehydrated
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b9058128>)
[('i', 'JJ'), ('m', 'NN'), ('afraid', 'IN'), ('you', 'PRP'), ('re', 'VBP'), ('becoming', 'VBG'), ('dehydrated', 'VBD')]
['dehydrated']
('food -> ', [])
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
water
water water 18
[('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
2
water
water water 18
[('that', 'DT'), ('s', 'VBZ'), ('not', 'RB'), ('even', 'RB'), ('water', 'NN'), ('is', 'VBZ'), ('it', 'PRP')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
10
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
8
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8fa6710>)
[('maybe', 'RB'), ('it', 'PRP'), ('ll', 'VBZ'), ('eat', 'VBD'), ('the', 'DT'), ('rest', 'NN'), ('of', 'IN'), ('your', 'PRP$'), ('cantaloupe', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'supper', 30, 36]
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
5
descended from food: [['NN'], 'salad', 30, 35]
egg
egg egg 357
[('had', 'VBD'), ('a', 'DT'), ('hankering', 'NN'), ('for', 'IN'), ('egg', 'NN'), ('salad', 'NN'), ('did', 'VBD'), ('you', 'PRP'), ('laughs', 'VB')]
['egg']
('food -> ', [])
candidates to check:
9
candidates to check:
6
descended from food: [['NNS'], 'sandwiches', 72, 82]
egg
egg egg 357
[('it', 'PRP'), ('looks', 'VBZ'), ('so', 'RB'), ('good', 'JJ'), ('all', 'PDT'), ('the', 'DT'), ('egg', 'NN'), ('salad', 'NN'), ('s', 'VBD'), ('popping', 'VBG'), ('out', 'IN'), ('of', 'IN'), ('the', 'DT'), ('sandwiches', 'NNS')]
['egg']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
8
candidates to check:
6
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'breakfast', 31, 40]
candidates to check:
3
descended from food: [['NN'], 'lunch', 31, 36]
candidates to check:
3
descended from food: [['NN'], 'supper', 29, 35]
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
7
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
4
shake
shake shake 148
[('and', 'CC'), ('someone', 'NN'), ('and', 'CC'), ('someone', 'NN'), ('can', 'MD'), ('shake', 'VB'), ('his', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
shake
shake shake 148
[('you', 'PRP'), ('can', 'MD'), ('shake', 'VB'), ('his', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
4
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
9
descended from food: [['NN'], 'dinner', 97, 103]
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8f39a70>)
[('because', 'IN'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('think', 'VBP'), ('it', 'PRP'), ('s', 'VBZ'), ('funny', 'JJ'), ('and', 'CC'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('think', 'VBP'), ('it', 'PRP'), ('s', 'VBZ'), ('the', 'DT'), ('correct', 'JJ'), ('thing', 'NN'), ('to', 'TO'), ('do', 'VB'), ('at', 'IN'), ('the', 'DT'), ('dinner', 'NN'), ('table', 'NN'), ('or', 'CC'), ('at', 'IN'), ('your', 'PRP$'), ('mother', 'NN')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8ece680>)
[('xxx', 'NNS'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
10
descended from food: [['NN'], 'food', 63, 67]
hard
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8ee0320>)
[('okay', 'RB'), ('well', 'RB'), ('look', 'VB'), ('don', 'JJ'), ('t', 'JJ'), ('eat', 'NN'), ('anymore', 'RB'), ('with', 'IN'), ('your', 'PRP$'), ('mouth', 'NN'), ('full', 'JJ'), ('of', 'IN'), ('food', 'NN'), ('be', 'VB'), ('cause', 'NN'), ('it', 'PRP'), ('s', 'VBZ'), ('hard', 'JJ'), ('to', 'TO'), ('understand', 'VB')]
['hard']
('food -> ', [])
candidates to check:
5
candidates to check:
4
candidates to check:
10
descended from food: [['NN'], 'food', 58, 62]
candidates to check:
2
candidates to check:
2
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8eed2d8>)
[('are', 'VBP'), ('you', 'PRP'), ('gon', 'JJ'), ('na', 'TO'), ('eat', 'VB'), ('your', 'PRP$'), ('cantaloupe', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'juice', 40, 45]
juice
juice juice 52
[('here', 'RB'), ('dip', 'VBZ'), ('dip', 'NN'), ('it', 'PRP'), ('in', 'IN'), ('your', 'PRP$'), ('juice', 'NN'), ('and', 'CC'), ('see', 'VB'), ('what', 'WP'), ('it', 'PRP'), ('tastes', 'VBZ'), ('like', 'IN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
dip
dip dip 119
[('here', 'RB'), ('dip', 'VBZ'), ('dip', 'NN'), ('it', 'PRP'), ('in', 'IN'), ('your', 'PRP$'), ('juice', 'NN'), ('and', 'CC'), ('see', 'VB'), ('what', 'WP'), ('it', 'PRP'), ('tastes', 'VBZ'), ('like', 'IN')]
['dip']
('food -> ', [['juice', 'Fruits and Fruit Juices'], ['dip', 'Soups, Sauces, and Gravies']])
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
9
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
8
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
6
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'breakfast', 43, 52]
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
10
candidates to check:
6
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8ddb0e0>)
[('here', 'RB'), ('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('this', 'DT'), ('cantaloupe', 'NN'), ('chi', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
2
candidates to check:
4
candidates to check:
7
descended from food: [['NN'], 'orange', 6, 12]
descended from food: [['NN'], 'food', 13, 17]
descended from food: [['NN'], 'food', 13, 17]
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8de07e8>)
[('orange', 'NN'), ('food', 'NN'), ('is', 'VBZ'), ('almost', 'RB'), ('as', 'RB'), ('good', 'JJ'), ('as', 'IN'), ('green', 'JJ'), ('food', 'NN'), ('to', 'TO'), ('eat', 'VB')]
['green']
('food -> ', [])
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8de69e0>)
[('orange', 'NN'), ('food', 'NN'), ('is', 'VBZ'), ('almost', 'RB'), ('as', 'RB'), ('good', 'JJ'), ('as', 'IN'), ('green', 'JJ'), ('food', 'NN'), ('to', 'TO'), ('eat', 'VB')]
['orange']
('food -> ', [])
candidates to check:
5
broccoli
broccoli broccoli 30
[('hey', 'NN'), ('don', 'NN'), ('t', 'NN'), ('cover', 'VB'), ('up', 'RP'), ('the', 'DT'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
3
candidates to check:
2
broccoli
broccoli broccoli 30
[('you', 'PRP'), ('want', 'VBP'), ('more', 'JJR'), ('broccoli', 'NNS')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
6
candidates to check:
2
candidates to check:
2
broccoli
broccoli broccoli 30
[('i', 'NN'), ('ll', 'VBP'), ('bring', 'NN'), ('you', 'PRP'), ('some', 'DT'), ('broccoli', 'NNS')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
4
broccoli
broccoli broccoli 30
[('chi', 'NN'), ('wants', 'VBZ'), ('to', 'TO'), ('try', 'VB'), ('a', 'DT'), ('little', 'JJ'), ('tree', 'NN'), ('of', 'IN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
10
descended from food: [['NN'], 'food', 73, 77]
candidates to check:
1
candidates to check:
2
candidates to check:
5
descended from food: [['NNS'], 'peas', 74, 78]
peas
peas peas 116
[('you', 'PRP'), ('always', 'RB'), ('tell', 'VB'), ('me', 'PRP'), ('that', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('your', 'PRP$'), ('salad', 'NN'), ('and', 'CC'), ('your', 'PRP$'), ('carrots', 'NNS'), ('and', 'CC'), ('peas', 'NNS')]
['peas']
('food -> ', [['peas', 'Legumes and Legume Products']])
carrots
carrots carrots 35
[('you', 'PRP'), ('always', 'RB'), ('tell', 'VB'), ('me', 'PRP'), ('that', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('your', 'PRP$'), ('salad', 'NN'), ('and', 'CC'), ('your', 'PRP$'), ('carrots', 'NNS'), ('and', 'CC'), ('peas', 'NNS')]
['carrots']
('food -> ', [['peas', 'Legumes and Legume Products']])
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
broccoli
broccoli broccoli 30
[('go', 'VB'), ('on', 'IN'), ('in', 'IN'), ('there', 'EX'), ('i', 'JJ'), ('ll', 'VBP'), ('bring', 'VBG'), ('you', 'PRP'), ('a', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('it', 'PRP'), ('broccoli', 'VB')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
6
candidates to check:
5
candidates to check:
4
candidates to check:
5
candidates to check:
2
broccoli
broccoli broccoli 30
[('a', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
broccoli
broccoli broccoli 30
[('why', 'WRB'), ('don', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('sit', 'VBP'), ('down', 'RP'), ('and', 'CC'), ('try', 'VB'), ('that', 'DT'), ('broccoli', 'NN'), ('now', 'RB')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
4
descended from food: [['NN'], 'dinner', 17, 23]
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8d13170>)
[('not', 'RB'), ('at', 'IN'), ('the', 'DT'), ('dinner', 'NN'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'candy', 6, 11]
candidates to check:
2
candidates to check:
5
candidates to check:
3
descended from food: [['NN'], 'chocolate', 61, 70]
descended from food: [['NNS'], 'lollipops', 21, 30]
chocolate
chocolate chocolate 598
[('you', 'PRP'), ('know', 'VBP'), ('those', 'DT'), ('lollipops', 'NNS'), ('that', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('and', 'CC'), ('then', 'RB'), ('there', 'EX'), ('s', 'JJ'), ('chocolate', 'NN'), ('inside', 'IN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
5
candidates to check:
7
candidates to check:
6
descended from food: [['NN'], 'chocolate', 10, 19]
chocolate
chocolate chocolate 598
[('but', 'CC'), ('chocolate', 'NN'), ('gives', 'VBZ'), ('me', 'PRP'), ('a', 'DT'), ('tummy', 'NN'), ('ache', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
4
candidates to check:
7
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'chocolate', 6, 15]
chocolate
chocolate chocolate 598
[('chocolate', 'NN'), ('gives', 'VBZ'), ('him', 'PRP'), ('a', 'DT'), ('tummy', 'NN'), ('ache', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
5
candidates to check:
2
descended from food: [['NN'], 'chocolate', 19, 28]
chocolate
chocolate chocolate 598
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('chocolate', 'NN'), ('xxx', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
6
candidates to check:
1
candidates to check:
7
descended from food: [['NN'], 'chocolate', 27, 36]
broccoli
broccoli broccoli 30
[('you', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('chocolate', 'NN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
chocolate
chocolate chocolate 598
[('you', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('chocolate', 'NN'), ('broccoli', 'NN')]
['chocolate']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products'], ['chocolate', 'Sweets']])
candidates to check:
1
candidates to check:
3
chocolate cake
chocolate cake chocolate cake 371
[('i', 'NNS'), ('like', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['chocolate', 'cake']
('food -> ', [['chocolate cake', 'Baked Products']])
chocolate
chocolate chocolate 598
[('i', 'NNS'), ('like', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['chocolate']
('food -> ', [['chocolate cake', 'Baked Products'], ['chocolate', 'Sweets']])
cake
cake cake 412
[('i', 'NNS'), ('like', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['cake']
('food -> ', [['chocolate cake', 'Baked Products'], ['chocolate', 'Sweets'], ['cake', 'Baked Products']])
candidates to check:
4
descended from food: [['NN'], 'chocolate', 20, 29]
chocolate cake
chocolate cake chocolate cake 371
[('you', 'PRP'), ('only', 'RB'), ('want', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['chocolate', 'cake']
('food -> ', [['chocolate cake', 'Baked Products']])
chocolate
chocolate chocolate 598
[('you', 'PRP'), ('only', 'RB'), ('want', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['chocolate']
('food -> ', [['chocolate cake', 'Baked Products'], ['chocolate', 'Sweets']])
cake
cake cake 412
[('you', 'PRP'), ('only', 'RB'), ('want', 'VBP'), ('chocolate', 'NN'), ('cake', 'NN')]
['cake']
('food -> ', [['chocolate cake', 'Baked Products'], ['chocolate', 'Sweets'], ['cake', 'Baked Products']])
candidates to check:
2
chocolate cake
chocolate cake chocolate cake 371
[('well', 'RB'), ('it', 'PRP'), ('has', 'VBZ'), ('got', 'VBN'), ('chocolate', 'JJ'), ('cake', 'NN'), ('sprinkled', 'VBD'), ('inside', 'IN'), ('it', 'PRP')]
['chocolate', 'cake']
('food -> ', [['chocolate cake', 'Baked Products']])
chocolate
chocolate chocolate 598
[('well', 'RB'), ('it', 'PRP'), ('has', 'VBZ'), ('got', 'VBN'), ('chocolate', 'JJ'), ('cake', 'NN'), ('sprinkled', 'VBD'), ('inside', 'IN'), ('it', 'PRP')]
['chocolate']
('food -> ', [['chocolate cake', 'Baked Products'], ['chocolate', 'Sweets']])
cake
cake cake 412
[('well', 'RB'), ('it', 'PRP'), ('has', 'VBZ'), ('got', 'VBN'), ('chocolate', 'JJ'), ('cake', 'NN'), ('sprinkled', 'VBD'), ('inside', 'IN'), ('it', 'PRP')]
['cake']
('food -> ', [['chocolate cake', 'Baked Products'], ['chocolate', 'Sweets'], ['cake', 'Baked Products']])
candidates to check:
4
descended from food: [['NN'], 'chocolate', 19, 28]
chocolate
chocolate chocolate 598
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
6
candidates to check:
7
descended from food: [['NN'], 'food', 120, 124]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
7
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
6
broccoli
broccoli broccoli 30
[('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('that', 'DT'), ('delicious', 'JJ'), ('broccoli', 'NN'), ('huh', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
cantaloupe
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8c83368>)
[('you', 'PRP'), ('don', 'VBP'), ('t', 'VB'), ('any', 'DT'), ('more', 'JJR'), ('cantaloupe', 'NN')]
['cantaloupe']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'supper', 36, 42]
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
loading solution set
calculating
set([(189, (51, 61)), (2278, (6, 11)), (2339, (27, 45)), (1253, (26, 35)), (2304, (10, 19)), (1868, (43, 51)), (657, (61, 68)), (103, (38, 48)), (231, (6, 11)), (634, (10, 18)), (2048, (17, 25)), (1262, (36, 45)), (324, (36, 44)), (1904, (44, 52)), (2541, (48, 56)), (1887, (26, 34)), (1936, (62, 69)), (1012, (6, 11)), (2347, (13, 27)), (2350, (20, 34)), (221, (16, 24)), (2288, (21, 29)), (958, (41, 51)), (1876, (20, 28)), (565, (32, 40)), (1852, (38, 48)), (2270, (17, 22)), (1536, (40, 45)), (2354, (22, 36)), (845, (25, 35)), (2319, (6, 15)), (1936, (43, 48)), (2556, (29, 39)), (585, (25, 32)), (2285, (17, 29)), (321, (18, 26)), (609, (24, 31)), (1936, (74, 78)), (1209, (39, 49)), (2359, (19, 28)), (2006, (53, 61)), (2326, (19, 28)), (830, (11, 19)), (1528, (29, 39)), (2288, (61, 70)), (973, (31, 36)), (1019, (22, 27)), (968, (17, 27)), (2084, (42, 50)), (289, (17, 22))])
[((103, (38, 48)), "*MOT:\tsave some and don't eat all the cantaloupe .\n"), ((189, (51, 61)), '*MOT:\twell if it hurts that much (.) just eat your cantaloupe .\n'), ((221, (16, 24)), '*MOT:\twant some broccoli ?\n'), ((231, (6, 11)), '*MOT:\tlemon [<] !\n'), ((289, (17, 22)), '*FAT:\twatch your juice [>] .\n'), ((321, (18, 26)), '*FAT:\tthat was my ice cube .\n'), ((324, (36, 44)), '*FAT:\tthat little (.) squeal was my ice cube .\n'), ((565, (32, 40)), '*FAT:\t<here have> [<] some more sandwich .\n'), ((585, (25, 32)), '*MOT:\twanna [<] try some chicken ?\n'), ((609, (24, 31)), '*CHI:\tthat [/] that was chicken .\n'), ((634, (10, 18)), '*FAT:\t+, <sandwich then Chi> [<] .\n'), ((657, (61, 68)), '*MOT:\tthat was a couple o(f) weeks [!] ago that you ate that chicken .\n'), ((830, (11, 19)), '*FAT:\tgood sandwich though huh ?\n'), ((845, (25, 35)), "*FAT:\tdon't you want any cantaloupe ?\n"), ((958, (41, 51)), "*MOT:\tdon't you even want your delicious cantaloupe ?\n"), ((968, (17, 27)), '*MOT:\tnice juicy cantaloupe ?\n'), ((973, (31, 36)), "*MOT:\twhy don't you drink your juice at least ?\n"), ((1012, (6, 11)), '*CHI:\twater [!] ?\n'), ((1019, (22, 27)), "*MOT:\tthat's not even water is it ?\n"), ((1209, (39, 49)), "*MOT:\tmaybe it'll eat the rest of your cantaloupe .\n"), ((1253, (26, 35)), '*MOT:\thad a hankering for egg salad did you &=laughs ?\n'), ((1262, (36, 45)), "*FAT:\t<it looks so good (.) all the egg salad's> [<] popping out of the sandwiches .\n"), ((1528, (29, 39)), '*MOT:\tare you gonna eat your cantaloupe ?\n'), ((1536, (40, 45)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1852, (38, 48)), '*FAT:\there you want some more of this cantaloupe Chi ?\n'), ((1868, (43, 51)), "*CHI:\they [!] <don't cover> [<] up (.) the broccoli !\n"), ((1876, (20, 28)), '*MOT:\tyou want more broccoli ?\n'), ((1887, (26, 34)), "*MOT:\tI'll bring you some broccoli .\n"), ((1904, (44, 52)), '*MOT:\tChi wants to try a little (.) tree of broccoli .\n'), ((1936, (43, 48)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (62, 69)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (74, 78)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((2006, (53, 61)), "*FAT:\tgo on in there I'll bring you a piece of it [= broccoli] .\n"), ((2048, (17, 25)), '*FAT:\ta piece of broccoli .\n'), ((2084, (42, 50)), "*MOT:\twhy don't you sit down and try that broccoli now ?\n"), ((2270, (17, 22)), '*MOT:\tit has got candy inside .\n'), ((2278, (6, 11)), '*CHI:\tcandy inside ?\n'), ((2285, (17, 29)), '*FAT:\tyeah chewy Tootsie Roll .\n'), ((2288, (21, 29)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2288, (61, 70)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2304, (10, 19)), '*CHI:\tbut chocolate <gives me a tummy+ache> [>] .\n'), ((2319, (6, 15)), '*FAT:\tchocolate gives him a tummy+ache ?\n'), ((2326, (19, 28)), "*CHI:\tI don't like chocolate xxx [>] .\n"), ((2339, (27, 45)), "*MOT:\t<you don't like> [<] chocolate broccoli ?\n"), ((2347, (13, 27)), '*CHI:\tI like chocolate cake .\n'), ((2350, (20, 34)), '*MOT:\tyou only want chocolate cake ?\n'), ((2354, (22, 36)), '*MOT:\twell it has got chocolate cake sprinkled inside it .\n'), ((2359, (19, 28)), "*CHI:\tI don't like chocolate [?] .\n"), ((2541, (48, 56)), "*FAT:\tyou don't want any more of that delicious broccoli huh ?\n"), ((2556, (29, 39)), "*MOT:\tyou [<] don't any more cantaloupe ?\n")]
set([(2347, (13, 27)), (528, (30, 34)), (189, (51, 61)), (1289, (31, 40)), (643, (21, 25)), (369, (21, 25)), (802, (41, 45)), (2304, (10, 19)), (1447, (104, 109)), (1868, (43, 51)), (2252, (17, 23)), (2252, (24, 29)), (1238, (30, 36)), (1503, (83, 87)), (657, (61, 68)), (1536, (25, 28)), (103, (38, 48)), (231, (6, 11)), (1536, (12, 15)), (2278, (6, 11)), (958, (41, 51)), (181, (19, 23)), (1400, (14, 19)), (2048, (17, 25)), (2006, (53, 61)), (2339, (37, 45)), (982, (33, 43)), (1536, (40, 45)), (1496, (10, 15)), (2354, (22, 36)), (1887, (26, 34)), (1936, (62, 69)), (1862, (6, 12)), (2288, (61, 70)), (767, (28, 32)), (1262, (72, 82)), (541, (18, 22)), (534, (38, 42)), (1925, (73, 77)), (2350, (20, 34)), (1209, (39, 49)), (796, (21, 24)), (1852, (38, 48)), (767, (74, 78)), (2326, (19, 28)), (1012, (6, 11)), (2556, (29, 39)), (1296, (29, 35)), (845, (25, 35)), (2319, (6, 15)), (2288, (21, 30)), (1397, (46, 51)), (1503, (63, 67)), (585, (25, 32)), (1876, (20, 28)), (1862, (13, 17)), (2541, (48, 56)), (609, (24, 31)), (1936, (74, 78)), (1253, (30, 35)), (221, (16, 24)), (2359, (19, 28)), (2429, (120, 124)), (2566, (36, 42)), (1253, (26, 29)), (1862, (39, 44)), (1904, (44, 52)), (64, (22, 28)), (149, (25, 29)), (1725, (43, 52)), (2084, (42, 50)), (2339, (27, 36)), (830, (11, 19)), (1518, (58, 62)), (1528, (29, 39)), (1293, (31, 36)), (973, (31, 36)), (435, (20, 24)), (1019, (22, 27)), (159, (11, 17)), (968, (17, 27)), (1262, (36, 39)), (1447, (97, 103)), (289, (17, 22))])
[((64, (22, 28)), "*MOT:\t(..) how's your supper ?\n"), ((103, (38, 48)), "*MOT:\tsave some and don't eat all the cantaloupe .\n"), ((149, (25, 29)), "*MOT:\tdon't squish it so hard that it comes out !\n"), ((159, (11, 17)), '*FAT:\tgood supper huh ?\n'), ((181, (19, 23)), '*FAT:\tchew up your food really good (.) okay ?\n'), ((189, (51, 61)), '*MOT:\twell if it hurts that much (.) just eat your cantaloupe .\n'), ((221, (16, 24)), '*MOT:\twant some broccoli ?\n'), ((231, (6, 11)), '*MOT:\tlemon [<] !\n'), ((289, (17, 22)), '*FAT:\twatch your juice [>] .\n'), ((369, (21, 25)), "*MOT:\tdidn't we play Fish ?\n"), ((435, (20, 24)), '*CHI:\tand we played Fish .\n'), ((528, (30, 34)), '*CHI:\t<we did> [//] we played Fish !\n'), ((534, (38, 42)), '*CHI:\t<and we> [>] (.) played another Fish right ?\n'), ((541, (18, 22)), '*MOT:\tdid we play Fish twice ?\n'), ((585, (25, 32)), '*MOT:\twanna [<] try some chicken ?\n'), ((609, (24, 31)), '*CHI:\tthat [/] that was chicken .\n'), ((643, (21, 25)), '*FAT:\thave some more food you [/] you might +//.\n'), ((657, (61, 68)), '*MOT:\tthat was a couple o(f) weeks [!] ago that you ate that chicken .\n'), ((767, (28, 32)), "*MOT:\t<it's really [!]> [<] hard to understand you (.) when you talk with food in your mouth though okay ?\n"), ((767, (74, 78)), "*MOT:\t<it's really [!]> [<] hard to understand you (.) when you talk with food in your mouth though okay ?\n"), ((796, (21, 24)), '*FAT:\toh Chi not the fan !\n'), ((802, (41, 45)), "*FAT:\t<it'll cool &o> [/] it'll cool our meal off too quickly [>] .\n"), ((830, (11, 19)), '*FAT:\tgood sandwich though huh ?\n'), ((845, (25, 35)), "*FAT:\tdon't you want any cantaloupe ?\n"), ((958, (41, 51)), "*MOT:\tdon't you even want your delicious cantaloupe ?\n"), ((968, (17, 27)), '*MOT:\tnice juicy cantaloupe ?\n'), ((973, (31, 36)), "*MOT:\twhy don't you drink your juice at least ?\n"), ((982, (33, 43)), "*MOT:\tI'm afraid you're becoming dehydrated .\n"), ((1012, (6, 11)), '*CHI:\twater [!] ?\n'), ((1019, (22, 27)), "*MOT:\tthat's not even water is it ?\n"), ((1209, (39, 49)), "*MOT:\tmaybe it'll eat the rest of your cantaloupe .\n"), ((1238, (30, 36)), '*CHI:\tyou can help me with my supper .\n'), ((1253, (26, 29)), '*MOT:\thad a hankering for egg salad did you &=laughs ?\n'), ((1253, (30, 35)), '*MOT:\thad a hankering for egg salad did you &=laughs ?\n'), ((1262, (36, 39)), "*FAT:\t<it looks so good (.) all the egg salad's> [<] popping out of the sandwiches .\n"), ((1262, (72, 82)), "*FAT:\t<it looks so good (.) all the egg salad's> [<] popping out of the sandwiches .\n"), ((1289, (31, 40)), '*MOT:\thad about three bites of breakfast .\n'), ((1293, (31, 36)), '*MOT:\thad about two bites o(f) lunch .\n'), ((1296, (29, 35)), '*MOT:\tand <two bites> [>] of supper .\n'), ((1397, (46, 51)), '*CHI:\t<<and someone> [/] and> [<] someone can shake his hand .\n'), ((1400, (14, 19)), '*CHI:\tyou can shake his hand .\n'), ((1447, (97, 103)), "*MOT:\tbecause I don't think it's funny and I don't think it's the correct thing to do (.) at the dinner table or at your mother .\n"), ((1447, (104, 109)), "*MOT:\tbecause I don't think it's funny and I don't think it's the correct thing to do (.) at the dinner table or at your mother .\n"), ((1496, (10, 15)), '*CHI:\txxx table .\n'), ((1503, (63, 67)), "*MOT:\tokay well look don't eat anymore with your mouth full of food (be)cause it's hard to understand .\n"), ((1503, (83, 87)), "*MOT:\tokay well look don't eat anymore with your mouth full of food (be)cause it's hard to understand .\n"), ((1518, (58, 62)), "*MOT:\tdon't talk anymore with your mouth &=laughs full of food okay ?\n"), ((1528, (29, 39)), '*MOT:\tare you gonna eat your cantaloupe ?\n'), ((1536, (12, 15)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1536, (25, 28)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1536, (40, 45)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1725, (43, 52)), '*MOT:\tand we pretended that we were having breakfast in the cafeteria at school [!] huh ?\n'), ((1852, (38, 48)), '*FAT:\there you want some more of this cantaloupe Chi ?\n'), ((1862, (6, 12)), '*MOT:\torange food is almost as good as green food to eat .\n'), ((1862, (13, 17)), '*MOT:\torange food is almost as good as green food to eat .\n'), ((1862, (39, 44)), '*MOT:\torange food is almost as good as green food to eat .\n'), ((1868, (43, 51)), "*CHI:\they [!] <don't cover> [<] up (.) the broccoli !\n"), ((1876, (20, 28)), '*MOT:\tyou want more broccoli ?\n'), ((1887, (26, 34)), "*MOT:\tI'll bring you some broccoli .\n"), ((1904, (44, 52)), '*MOT:\tChi wants to try a little (.) tree of broccoli .\n'), ((1925, (73, 77)), '*MOT:\t<(be)cause at> [<] school they told me that you always [!] try new food .\n'), ((1936, (62, 69)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (74, 78)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((2006, (53, 61)), "*FAT:\tgo on in there I'll bring you a piece of it [= broccoli] .\n"), ((2048, (17, 25)), '*FAT:\ta piece of broccoli .\n'), ((2084, (42, 50)), "*MOT:\twhy don't you sit down and try that broccoli now ?\n"), ((2252, (17, 23)), '*MOT:\tnot at the dinner table .\n'), ((2252, (24, 29)), '*MOT:\tnot at the dinner table .\n'), ((2278, (6, 11)), '*CHI:\tcandy inside ?\n'), ((2288, (21, 30)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2288, (61, 70)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2304, (10, 19)), '*CHI:\tbut chocolate <gives me a tummy+ache> [>] .\n'), ((2319, (6, 15)), '*FAT:\tchocolate gives him a tummy+ache ?\n'), ((2326, (19, 28)), "*CHI:\tI don't like chocolate xxx [>] .\n"), ((2339, (27, 36)), "*MOT:\t<you don't like> [<] chocolate broccoli ?\n"), ((2339, (37, 45)), "*MOT:\t<you don't like> [<] chocolate broccoli ?\n"), ((2347, (13, 27)), '*CHI:\tI like chocolate cake .\n'), ((2350, (20, 34)), '*MOT:\tyou only want chocolate cake ?\n'), ((2354, (22, 36)), '*MOT:\twell it has got chocolate cake sprinkled inside it .\n'), ((2359, (19, 28)), "*CHI:\tI don't like chocolate [?] .\n"), ((2429, (120, 124)), '*MOT:\tand your muscles (.) the only way they can develop and get bigger is for you to (.) <give it> [//] give them some food .\n'), ((2541, (48, 56)), "*FAT:\tyou don't want any more of that delicious broccoli huh ?\n"), ((2556, (29, 39)), "*MOT:\tyou [<] don't any more cantaloupe ?\n"), ((2566, (36, 42)), '*FAT:\tthanks Mommy that was a great supper !\n')]
calculating accuracy and recall
correct labels:
set(['cantaloupe', 'sandwich', 'lemon', 'salad', 'tootsie roll', 'carrots', 'egg salad', 'candy', 'peas', 'water', 'juice', 'lollipop', 'chocolate broccoli', 'ice cube', 'chocolate cake', 'chicken', 'chocolate', 'broccoli'])
predicted labels:
set(['fish', 'hard', 'juice', 'shake', 'table', 'breakfast', 'chicken', 'lemon', 'carrots', 'dehydrated', 'sandwiches', 'orange', 'cantaloupe', 'sandwich', 'lollipops', 'food', 'peas', 'chocolate', 'water', 'lunch', 'fan', 'supper', 'chocolate cake', 'broccoli', 'salad', 'dip', 'candy', 'dinner', 'green', 'egg', 'meal'])
file:HSLLD/HV1/MT//davmt1.cha
precision: 0.41935483871
recall: 0.722222222222
true positives:['broccoli', 'candy', 'cantaloupe', 'carrots', 'chicken', 'chocolate', 'chocolate cake', 'juice', 'lemon', 'peas', 'salad', 'sandwich', 'water']
false positives: ['breakfast', 'dehydrated', 'dinner', 'dip', 'egg', 'fan', 'fish', 'food', 'green', 'hard', 'lollipops', 'lunch', 'meal', 'orange', 'sandwiches', 'shake', 'supper', 'table']
false negatives: ['chocolate broccoli', 'egg salad', 'ice cube', 'lollipop', 'tootsie roll']
# true pos: 13
# false pos: 18
# false neg: 5
HSLLD/HV1/MT//raumt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//raumt1.cha
HSLLD/HV1/MT//catmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//catmt1.cha
HSLLD/HV1/MT//admmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
4
descended from food: [['NNS'], 'peas', 34, 38]
peas
peas peas 116
[('kim', 'NNS'), ('got', 'VBD'), ('lots', 'NNS'), ('of', 'IN'), ('carrots', 'NNS'), ('and', 'CC'), ('peas', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('xxx', 'NN')]
['peas']
('food -> ', [['peas', 'Legumes and Legume Products']])
carrots
carrots carrots 35
[('kim', 'NNS'), ('got', 'VBD'), ('lots', 'NNS'), ('of', 'IN'), ('carrots', 'NNS'), ('and', 'CC'), ('peas', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('xxx', 'NN')]
['carrots']
('food -> ', [['peas', 'Legumes and Legume Products']])
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
4
beef stew
beef stew beef stew 99
[('adam', 'RB'), ('s', 'VBZ'), ('not', 'RB'), ('gon', 'VB'), ('na', 'TO'), ('eat', 'VB'), ('her', 'PRP$'), ('beef', 'NN'), ('stew', 'NN')]
['beef', 'stew']
('food -> ', [['beef stew', 'Meals, Entrees, and Side Dishes']])
stew
stew stew 32
[('adam', 'RB'), ('s', 'VBZ'), ('not', 'RB'), ('gon', 'VB'), ('na', 'TO'), ('eat', 'VB'), ('her', 'PRP$'), ('beef', 'NN'), ('stew', 'NN')]
['stew']
('food -> ', [['beef stew', 'Meals, Entrees, and Side Dishes'], ['stew', 'American Indian/Alaska Native Foods']])
beef
beef beef 310
[('adam', 'RB'), ('s', 'VBZ'), ('not', 'RB'), ('gon', 'VB'), ('na', 'TO'), ('eat', 'VB'), ('her', 'PRP$'), ('beef', 'NN'), ('stew', 'NN')]
['beef']
('food -> ', [['beef stew', 'Meals, Entrees, and Side Dishes'], ['stew', 'American Indian/Alaska Native Foods'], ['beef', 'Sausages and Luncheon Meats']])
candidates to check:
2
carrots
carrots carrots 35
[('see', 'VB'), ('the', 'DT'), ('carrots', 'NNS'), ('in', 'IN'), ('there', 'EX')]
['carrots']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
8
carrots
carrots carrots 35
[('i', 'NN'), ('have', 'VBP'), ('my', 'PRP$'), ('xxx', 'JJ'), ('carrots', 'NNS')]
['carrots']
('food -> ', [])
candidates to check:
2
candidates to check:
2
carrots
carrots carrots 35
[('see', 'VB'), ('if', 'IN'), ('we', 'PRP'), ('can', 'MD'), ('find', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('the', 'DT'), ('carrots', 'NNS'), ('in', 'IN'), ('here', 'RB')]
['carrots']
('food -> ', [])
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
3
carrots
carrots carrots 35
[('here', 'RB'), ('you', 'PRP'), ('go', 'VBP'), ('here', 'RB'), ('s', 'RB'), ('some', 'DT'), ('of', 'IN'), ('the', 'DT'), ('carrots', 'NNS'), ('right', 'RB'), ('on', 'IN'), ('top', 'JJ')]
['carrots']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
5
carrot
carrot carrot 341
[('i', 'NNS'), ('have', 'VBP'), ('a', 'DT'), ('carrot', 'NN'), ('haha', 'NN'), ('x', 'VBD'), ('2', 'CD'), ('singing', 'NN')]
['carrot']
('food -> ', [['carrot', 'Vegetables and Vegetable Products']])
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
4
descended from food: [['NN'], 'butter', 25, 31]
descended from food: [['NN'], 'bread', 32, 37]
bread
bread bread 186
[('adam', 'IN'), ('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('butter', 'NN'), ('bread', 'NN')]
['bread']
('food -> ', [])
butter
butter butter 499
[('adam', 'IN'), ('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('butter', 'NN'), ('bread', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
9
candidates to check:
2
descended from food: [['NN'], 'honey', 38, 43]
honey
honey honey 304
[('there', 'EX'), ('s', 'VBZ'), ('no', 'DT'), ('kids', 'NNS'), ('out', 'RP'), ('there', 'RB'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
salt
salt salt 0
[('let', 'VB'), ('me', 'PRP'), ('see', 'VB'), ('the', 'DT'), ('salt', 'NN'), ('and', 'CC'), ('pepper', 'NN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
pepper
pepper pepper 27
[('let', 'VB'), ('me', 'PRP'), ('see', 'VB'), ('the', 'DT'), ('salt', 'NN'), ('and', 'CC'), ('pepper', 'NN')]
['pepper']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
3
candidates to check:
4
descended from food: [['NN'], 'butter', 30, 36]
descended from food: [['NN'], 'bread', 41, 46]
bread
bread bread 186
[('sure', 'RB'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('butter', 'NN'), ('and', 'CC'), ('bread', 'NN'), ('adam', 'NN')]
['bread']
('food -> ', [])
butter
butter butter 499
[('sure', 'RB'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('butter', 'NN'), ('and', 'CC'), ('bread', 'NN'), ('adam', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'bread', 22, 27]
bread
bread bread 186
[('you', 'PRP'), ('want', 'VBP'), ('butter', 'JJR'), ('bread', 'NN')]
['bread']
('food -> ', [])
butter
butter butter 499
[('you', 'PRP'), ('want', 'VBP'), ('butter', 'JJR'), ('bread', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
3
descended from food: [['NN'], 'bread', 20, 25]
descended from food: [['NN'], 'butter', 30, 36]
bread
bread bread 186
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['bread']
('food -> ', [])
butter
butter butter 499
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
5
candidates to check:
4
descended from food: [['NN'], 'bread', 50, 55]
descended from food: [['NN'], 'butter', 60, 66]
bread
bread bread 186
[('eat', 'VB'), ('some', 'DT'), ('carrots', 'NNS'), ('on', 'IN'), ('there', 'EX'), ('i', 'JJ'), ('ll', 'VBP'), ('give', 'VB'), ('you', 'PRP'), ('the', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['bread']
('food -> ', [])
carrots
carrots carrots 35
[('eat', 'VB'), ('some', 'DT'), ('carrots', 'NNS'), ('on', 'IN'), ('there', 'EX'), ('i', 'JJ'), ('ll', 'VBP'), ('give', 'VB'), ('you', 'PRP'), ('the', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['carrots']
('food -> ', [])
butter
butter butter 499
[('eat', 'VB'), ('some', 'DT'), ('carrots', 'NNS'), ('on', 'IN'), ('there', 'EX'), ('i', 'JJ'), ('ll', 'VBP'), ('give', 'VB'), ('you', 'PRP'), ('the', 'DT'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'bread', 19, 24]
descended from food: [['NN'], 'butter', 29, 35]
bread
bread bread 186
[('there', 'RB'), ('s', 'VB'), ('your', 'PRP$'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN'), ('right', 'RB'), ('there', 'RB')]
['bread']
('food -> ', [])
butter
butter butter 499
[('there', 'RB'), ('s', 'VB'), ('your', 'PRP$'), ('bread', 'NN'), ('and', 'CC'), ('butter', 'NN'), ('right', 'RB'), ('there', 'RB')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
ground
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8bd15f0>)
[('we', 'PRP'), ('hit', 'VBD'), ('the', 'DT'), ('balloon', 'NN'), ('and', 'CC'), ('we', 'PRP'), ('tried', 'VBD'), ('not', 'RB'), ('to', 'TO'), ('let', 'VB'), ('it', 'PRP'), ('hit', 'VB'), ('the', 'DT'), ('ground', 'NN')]
['ground']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
8
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
7
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
6
descended from food: [['NN'], 'potato', 6, 12]
descended from food: [['NNS'], 'chips', 13, 18]
potato chips
potato chips potato chips 487
[('potato', 'NN'), ('chips', 'NNS'), ('and', 'CC'), ('coke', 'NN')]
['potato', 'chips']
('food -> ', [['potato chips', 'Snacks']])
potato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8b2db48>)
[('potato', 'NN'), ('chips', 'NNS'), ('and', 'CC'), ('coke', 'NN')]
['potato']
('food -> ', [['potato chips', 'Snacks']])
candidates to check:
3
descended from food: [['NN'], 'cookie', 18, 24]
descended from food: [['NN'], 'cookie', 18, 24]
cookie
cookie cookie 507
[('mommy', 'NN'), ('ate', 'VB'), ('a', 'DT'), ('cookie', 'NN'), ('and', 'CC'), ('i', 'JJ'), ('ate', 'VBP'), ('a', 'DT'), ('cookie', 'NN')]
['cookie']
('food -> ', [['cookie', 'Baked Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
10
candidates to check:
11
candidates to check:
11
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
honey
honey honey 304
[('i', 'NN'), ('ll', 'VBP'), ('eat', 'NN'), ('it', 'PRP'), ('honey', 'VBD')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'bread', 55, 60]
bread
bread bread 186
[('yep', 'NN'), ('alright', 'RB'), ('well', 'RB'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('to', 'TO'), ('skitch', 'VB'), ('f', 'VB'), ('your', 'PRP$'), ('bread', 'NN'), ('in', 'IN'), ('it', 'PRP'), ('just', 'RB'), ('put', 'VBD'), ('it', 'PRP'), ('on', 'IN'), ('the', 'DT'), ('table', 'NN'), ('if', 'IN'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('it', 'PRP'), ('kim', 'VB')]
['bread']
('food -> ', [])
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8aa2fc8>)
[('yep', 'NN'), ('alright', 'RB'), ('well', 'RB'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('to', 'TO'), ('skitch', 'VB'), ('f', 'VB'), ('your', 'PRP$'), ('bread', 'NN'), ('in', 'IN'), ('it', 'PRP'), ('just', 'RB'), ('put', 'VBD'), ('it', 'PRP'), ('on', 'IN'), ('the', 'DT'), ('table', 'NN'), ('if', 'IN'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('it', 'PRP'), ('kim', 'VB')]
['table']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'dinner', 36, 42]
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'chicken', 16, 23]
chicken
chicken chicken 234
[('i', 'NN'), ('have', 'VBP'), ('my', 'PRP$'), ('chicken', 'NN'), ('spices', 'NNS')]
['chicken']
('food -> ', [])
spices
spices spices 312
[('i', 'NN'), ('have', 'VBP'), ('my', 'PRP$'), ('chicken', 'NN'), ('spices', 'NNS')]
['spices']
('food -> ', [['spices', 'Spices and Herbs']])
loading solution set
calculating
set([(196, (25, 37)), (79, (34, 38)), (651, (18, 24)), (869, (16, 23)), (644, (27, 31)), (308, (30, 36)), (115, (21, 28)), (284, (30, 36)), (329, (29, 35)), (121, (48, 55)), (155, (15, 21)), (644, (6, 18)), (79, (22, 29)), (284, (41, 46)), (276, (27, 31)), (810, (55, 60)), (314, (50, 55)), (134, (37, 44)), (276, (36, 42)), (329, (19, 24)), (634, (8, 15)), (314, (60, 66)), (308, (20, 25)), (99, (31, 40)), (651, (37, 43)), (631, (8, 15)), (104, (14, 21)), (305, (15, 27)), (314, (15, 22))])
[((79, (22, 29)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((79, (34, 38)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((99, (31, 40)), "*FAT:\tAdam's not gonna eat her beef stew .\n"), ((104, (14, 21)), '*MOT:\tsee the carrots in there ?\n'), ((115, (21, 28)), '*CHI:\t<I have my xxx carrots> [<] .\n'), ((121, (48, 55)), '*MOT:\tsee if we can <find some more of> [>] the carrots in here .\n'), ((134, (37, 44)), "*MOT:\there you go here's some of the carrots right on top !\n"), ((155, (15, 21)), '*CHI:\tI have a carrot haha [x 2] &=singing .\n'), ((196, (25, 37)), '*MOT:\tAdam you want some butter bread ?\n'), ((276, (27, 31)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((276, (36, 42)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((284, (30, 36)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((284, (41, 46)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((305, (15, 27)), '*MOT:\tyou want butter bread ?\n'), ((308, (20, 25)), '*MOT:\tyou want some bread and butter ?\n'), ((308, (30, 36)), '*MOT:\tyou want some bread and butter ?\n'), ((314, (15, 22)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (50, 55)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (60, 66)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((329, (19, 24)), "*MOT:\tthere's your bread and butter right there .\n"), ((329, (29, 35)), "*MOT:\tthere's your bread and butter right there .\n"), ((631, (8, 15)), '*CHI:\ta brownie .\n'), ((634, (8, 15)), '*CHI:\ta brownie .\n'), ((644, (6, 18)), '*CHI:\tpotato chips (.) and coke .\n'), ((644, (27, 31)), '*CHI:\tpotato chips (.) and coke .\n'), ((651, (18, 24)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((651, (37, 43)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((810, (55, 60)), "*FAT:\tyep alright well you don't have_to skitch@f your bread in it just put it on the table if you don't want it Kim .\n"), ((869, (16, 23)), '*SIS:\tI have my chicken Spices.\n')]
set([(253, (38, 43)), (79, (34, 38)), (651, (18, 24)), (79, (22, 29)), (869, (16, 23)), (308, (30, 36)), (115, (21, 28)), (196, (32, 37)), (284, (30, 36)), (381, (60, 66)), (305, (15, 21)), (196, (25, 31)), (329, (29, 35)), (121, (48, 55)), (155, (15, 21)), (644, (6, 18)), (305, (22, 27)), (284, (41, 46)), (276, (27, 31)), (810, (86, 91)), (314, (50, 55)), (134, (37, 44)), (276, (36, 42)), (806, (18, 23)), (329, (19, 24)), (314, (60, 66)), (308, (20, 25)), (99, (31, 40)), (651, (37, 43)), (104, (14, 21)), (314, (15, 22)), (810, (55, 60)), (853, (36, 42)), (869, (24, 30))])
[((79, (22, 29)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((79, (34, 38)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((99, (31, 40)), "*FAT:\tAdam's not gonna eat her beef stew .\n"), ((104, (14, 21)), '*MOT:\tsee the carrots in there ?\n'), ((115, (21, 28)), '*CHI:\t<I have my xxx carrots> [<] .\n'), ((121, (48, 55)), '*MOT:\tsee if we can <find some more of> [>] the carrots in here .\n'), ((134, (37, 44)), "*MOT:\there you go here's some of the carrots right on top !\n"), ((155, (15, 21)), '*CHI:\tI have a carrot haha [x 2] &=singing .\n'), ((196, (25, 31)), '*MOT:\tAdam you want some butter bread ?\n'), ((196, (32, 37)), '*MOT:\tAdam you want some butter bread ?\n'), ((253, (38, 43)), "*MOT:\t<there's no kids out> [<] there honey .\n"), ((276, (27, 31)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((276, (36, 42)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((284, (30, 36)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((284, (41, 46)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((305, (15, 21)), '*MOT:\tyou want butter bread ?\n'), ((305, (22, 27)), '*MOT:\tyou want butter bread ?\n'), ((308, (20, 25)), '*MOT:\tyou want some bread and butter ?\n'), ((308, (30, 36)), '*MOT:\tyou want some bread and butter ?\n'), ((314, (15, 22)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (50, 55)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (60, 66)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((329, (19, 24)), "*MOT:\tthere's your bread and butter right there .\n"), ((329, (29, 35)), "*MOT:\tthere's your bread and butter right there .\n"), ((381, (60, 66)), '*MOT:\twe hit the balloon and we tried not to let it hit the ground .\n'), ((644, (6, 18)), '*CHI:\tpotato chips (.) and coke .\n'), ((651, (18, 24)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((651, (37, 43)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((806, (18, 23)), "*FAT:\tI'll eat it honey .\n"), ((810, (55, 60)), "*FAT:\tyep alright well you don't have_to skitch@f your bread in it just put it on the table if you don't want it Kim .\n"), ((810, (86, 91)), "*FAT:\tyep alright well you don't have_to skitch@f your bread in it just put it on the table if you don't want it Kim .\n"), ((853, (36, 42)), "*MOT:\tAdam if you don't finish your dinner (.) you don't get anything else to eat tonight .\n"), ((869, (16, 23)), '*SIS:\tI have my chicken Spices.\n'), ((869, (24, 30)), '*SIS:\tI have my chicken Spices.\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'pepper', 'potato chips', 'coke', 'carrots', 'butter bread', 'peas', 'brownie', 'carrot', 'cookie', 'chicken', 'salt', 'beef stew', 'bread'])
predicted labels:
set(['butter', 'pepper', 'spices', 'carrots', 'potato chips', 'peas', 'honey', 'dinner', 'carrot', 'cookie', 'table', 'chicken', 'ground', 'salt', 'beef stew', 'bread'])
file:HSLLD/HV1/MT//admmt1.cha
precision: 0.6875
recall: 0.785714285714
true positives:['beef stew', 'bread', 'butter', 'carrot', 'carrots', 'chicken', 'cookie', 'peas', 'pepper', 'potato chips', 'salt']
false positives: ['dinner', 'ground', 'honey', 'spices', 'table']
false negatives: ['brownie', 'butter bread', 'coke']
# true pos: 11
# false pos: 5
# false neg: 3
HSLLD/HV1/MT//annmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
8
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
8
candidates to check:
11
candidates to check:
1
candidates to check:
6
sunshine
sunshine sunshine 416
[('you', 'PRP'), ('are', 'VBP'), ('my', 'PRP$'), ('sunshine', 'JJ'), ('my', 'PRP$'), ('only', 'JJ'), ('sunshine', 'NN')]
['sunshine']
('food -> ', [['sunshine', 'Baked Products']])
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
1
descended from food: [['NN'], 'honey', 11, 16]
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
2
descended from food: [['NNS'], 'meatballs', 29, 38]
meatballs
meatballs meatballs 197
[('bob', 'NN'), ('you', 'PRP'), ('made', 'VBD'), ('good', 'JJ'), ('meatballs', 'NNS')]
['meatballs']
('food -> ', [['meatballs', 'Legumes and Legume Products']])
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'bread', 25, 30]
bread
bread bread 186
[('i', 'JJ'), ('m', 'VBP'), ('gettin', 'JJ'), ('g', 'NN'), ('more', 'RBR'), ('bread', 'NN')]
['bread']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
cherries
cherries cherries 83
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('more', 'JJR'), ('cherries', 'NNS')]
['cherries']
('food -> ', [['cherries', 'Fruits and Fruit Juices']])
candidates to check:
5
descended from food: [['NN'], 'honey', 11, 16]
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN'), ('xxx', 'NN'), ('anna', 'IN'), ('finish', 'JJ'), ('your', 'PRP$'), ('supper', 'JJ'), ('please', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'supper', 29, 35]
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
7
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
descended from food: [['NN'], 'honey', 11, 16]
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
7
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
8
candidates to check:
3
candidates to check:
5
candidates to check:
1
descended from food: [['NN'], 'tomato', 10, 16]
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b895a098>)
[('yeah', 'NN'), ('xxx', 'NN'), ('spoiled', 'VBD'), ('rotten', 'JJ'), ('little', 'JJ'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
8
tea
tea tea 2
[('who', 'WP'), ('else', 'VBP'), ('gives', 'VBZ'), ('you', 'PRP'), ('tea', 'JJ'), ('parties', 'NNS'), ('at', 'IN'), ('eleven', 'RB'), ('o', 'JJ'), ('clock', 'NN'), ('at', 'IN'), ('night', 'NN'), ('huh', 'NN')]
['tea']
('food -> ', [['tea', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
4
tea
tea tea 2
[('nana', 'JJ'), ('lets', 'NNS'), ('you', 'PRP'), ('have', 'VBP'), ('tea', 'VBN'), ('parties', 'NNS'), ('at', 'IN'), ('night', 'NN'), ('like', 'IN'), ('i', 'NN'), ('do', 'VBP')]
['tea']
('food -> ', [['tea', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
6
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b892e5f0>)
[('get', 'VB'), ('up', 'RP'), ('on', 'IN'), ('the', 'DT'), ('table', 'NN'), ('and', 'CC'), ('we', 'PRP'), ('ll', 'VBP'), ('wash', 'JJ')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
6
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8931f38>)
[('mm', 'NN'), ('i', 'NN'), ('used', 'VBN'), ('to', 'TO'), ('have', 'VB'), ('to', 'TO'), ('say', 'VB'), ('that', 'IN'), ('when', 'WRB'), ('i', 'NN'), ('was', 'VBD'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
3
milk
milk milk 46
[('the', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
5
descended from food: [['NN'], 'milk', 27, 31]
milk
milk milk 46
[('well', 'RB'), ('then', 'RB'), ('it', 'PRP'), ('s', 'VBZ'), ('gross', 'JJ'), ('milk', 'NN'), ('don', 'NN'), ('t', 'NN'), ('buy', 'VB'), ('it', 'PRP'), ('anymore', 'RB')]
['milk']
('food -> ', [])
candidates to check:
3
candidates to check:
5
descended from food: [['NN'], 'milk', 19, 23]
milk
milk milk 46
[('no', 'DT'), ('it', 'PRP'), ('s', 'VBZ'), ('skim', 'JJ'), ('milk', 'NN'), ('it', 'PRP'), ('s', 'VBD'), ('good', 'JJ')]
['milk']
('food -> ', [])
candidates to check:
8
descended from food: [['NN'], 'milk', 11, 15]
descended from food: [['NN'], 'milk', 11, 15]
milk
milk milk 46
[('skim', 'JJ'), ('milk', 'NN'), ('i', 'NN'), ('know', 'VBP'), ('that', 'IN'), ('s', 'VBP'), ('what', 'WP'), ('skim', 'VBP'), ('milk', 'NN'), ('tastes', 'NNS'), ('like', 'IN')]
['milk']
('food -> ', [])
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
6
descended from food: [['NN'], 'food', 27, 31]
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'dessert', 28, 35]
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b88e3248>)
[('you', 'PRP'), ('said', 'VBD'), ('i', 'NN'), ('could', 'MD'), ('have', 'VB'), ('dessert', 'NN')]
['dessert']
('food -> ', [])
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'pie', 52, 55]
pie
pie pie 290
[('you', 'PRP'), ('said', 'VBD'), ('you', 'PRP'), ('she', 'PRP'), ('could', 'MD'), ('help', 'VB'), ('you', 'PRP'), ('make', 'VB'), ('the', 'DT'), ('pie', 'NN')]
['pie']
('food -> ', [['pie', 'Baked Products']])
candidates to check:
1
descended from food: [['NN'], 'dessert', 66, 73]
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b88e7758>)
[('well', 'RB'), ('i', 'JJ'), ('didn', 'VBP'), ('t', 'NNS'), ('make', 'VBP'), ('it', 'PRP'), ('though', 'IN'), ('did', 'VBD'), ('i', 'VB'), ('so', 'RB'), ('there', 'RB'), ('obviously', 'RB'), ('is', 'VBZ'), ('no', 'DT'), ('dessert', 'NN'), ('then', 'RB'), ('if', 'IN'), ('i', 'NNS'), ('did', 'VBD'), ('not', 'RB'), ('make', 'VB'), ('it', 'PRP')]
['dessert']
('food -> ', [])
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
7
candidates to check:
2
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'honey', 6, 11]
honey
honey honey 304
[('honey', 'NN'), ('i', 'NN'), ('don', 'VBP'), ('t', 'NN'), ('know', 'VBP'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'WDT'), ('have', 'VBP'), ('the', 'DT'), ('time', 'NN'), ('you', 'PRP'), ('know', 'VBP')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
7
candidates to check:
1
loading solution set
calculating
set([(183, (25, 30)), (226, (27, 35)), (655, (27, 31)), (640, (11, 15)), (734, (52, 55)), (166, (29, 38)), (667, (35, 44)), (384, (10, 16)), (662, (14, 23)), (667, (6, 15))])
[((166, (29, 38)), '*CHI:\t(..) Bob you made good meatballs .\n'), ((183, (25, 30)), "*CHI:\tI'm gettin(g) more bread .\n"), ((226, (27, 35)), '*CHI:\t(..) can I have more cherries ?\n'), ((384, (10, 16)), '*CHI:\txxx tomato .\n'), ((640, (11, 15)), '*MOT:\t<the milk> [<] ?\n'), ((655, (27, 31)), "*MA1:\twell then it's gross milk don't buy it anymore .\n"), ((662, (14, 23)), "*MOT:\tno it's skim milk it's good !\n"), ((667, (6, 15)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((667, (35, 44)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((734, (52, 55)), '*MA1:\tyou said you [//] she could help you make the pie .\n')]
set([(183, (25, 30)), (111, (40, 48)), (655, (27, 31)), (230, (11, 16)), (667, (40, 44)), (454, (43, 47)), (241, (29, 35)), (384, (10, 16)), (111, (18, 26)), (226, (27, 35)), (166, (29, 38)), (739, (66, 73)), (662, (19, 23)), (734, (52, 55)), (147, (11, 16)), (667, (11, 15)), (798, (6, 11)), (469, (25, 28)), (728, (28, 35)), (313, (11, 16)), (587, (58, 63)), (640, (11, 15)), (565, (20, 25)), (460, (25, 28)), (681, (27, 31))])
[((111, (18, 26)), '*CHI:\t<you are my sunshine my> [<] only sunshine .\n'), ((111, (40, 48)), '*CHI:\t<you are my sunshine my> [<] only sunshine .\n'), ((147, (11, 16)), '*FE1:\twhat honey ?\n'), ((166, (29, 38)), '*CHI:\t(..) Bob you made good meatballs .\n'), ((183, (25, 30)), "*CHI:\tI'm gettin(g) more bread .\n"), ((226, (27, 35)), '*CHI:\t(..) can I have more cherries ?\n'), ((230, (11, 16)), '*MOT:\twhat honey xxx Anna finish your supper please .\n'), ((241, (29, 35)), '*MOT:\tafter [!] you eat your supper .\n'), ((313, (11, 16)), '*FE1:\twhat honey ?\n'), ((384, (10, 16)), '*CHI:\txxx tomato .\n'), ((454, (43, 47)), '*MA1:\t<yeah xxx> [<] spoiled rotten little baby .\n'), ((460, (25, 28)), "*MOT:\twho else gives you tea parties at eleven o'clock at night huh ?\n"), ((469, (25, 28)), '*MOT:\tNana lets you have tea parties at night like I do ?\n'), ((565, (20, 25)), "*MA1:\tget up on the table and we'll wash .\n"), ((587, (58, 63)), '*MA1:\tmm (.) I used to have_to say that when I was at the table .\n'), ((640, (11, 15)), '*MOT:\t<the milk> [<] ?\n'), ((655, (27, 31)), "*MA1:\twell then it's gross milk don't buy it anymore .\n"), ((662, (19, 23)), "*MOT:\tno it's skim milk it's good !\n"), ((667, (11, 15)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((667, (40, 44)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((681, (27, 31)), "*MOT:\tlike it's a <kind of food or somethin(g)> [>] .\n"), ((728, (28, 35)), '*CHI:\tyou said I could have dessert .\n'), ((734, (52, 55)), '*MA1:\tyou said you [//] she could help you make the pie .\n'), ((739, (66, 73)), "*MOT:\twell I didn't make it though did I so there obviously is no dessert then if I did not make it !\n"), ((798, (6, 11)), "*MOT:\thoney I don't know (.) I don't have the time you know ?\n")]
calculating accuracy and recall
correct labels:
set(['tomato', 'skim milk', 'meatballs', 'pie', 'cherries', 'milk', 'bread'])
predicted labels:
set(['tomato', 'food', 'tea', 'sunshine', 'meatballs', 'pie', 'honey', 'cherries', 'dessert', 'supper', 'baby', 'table', 'milk', 'bread'])
file:HSLLD/HV1/MT//annmt1.cha
precision: 0.428571428571
recall: 0.857142857143
true positives:['bread', 'cherries', 'meatballs', 'milk', 'pie', 'tomato']
false positives: ['baby', 'dessert', 'food', 'honey', 'sunshine', 'supper', 'table', 'tea']
false negatives: ['skim milk']
# true pos: 6
# false pos: 8
# false neg: 1
HSLLD/HV1/MT//jammt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jammt1.cha
HSLLD/HV1/MT//vicmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//vicmt1.cha
HSLLD/HV1/MT//stnmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//stnmt1.cha
HSLLD/HV1/MT//jeamt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jeamt1.cha
HSLLD/HV1/MT//astmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//astmt1.cha
HSLLD/HV1/MT//casmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'milk', 25, 29]
descended from food: [['NN'], 'milk', 25, 29]
descended from food: [['NNS'], 'pepsi', -1, 4]
milk
milk milk 46
[('xxx', 'NN'), ('when', 'WRB'), ('they', 'PRP'), ('need', 'VBP'), ('milk', 'NN'), ('they', 'PRP'), ('mix', 'VBP'), ('pepsi', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'milk', 23, 27]
milk
milk milk 46
[('xxx', 'JJ'), ('pepsi', 'NN'), ('in', 'IN'), ('the', 'DT'), ('milk', 'NN'), ('get', 'VB'), ('it', 'PRP')]
['milk']
('food -> ', [])
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'candy', 31, 36]
popcorn
popcorn popcorn 429
[('i', 'NN'), ('got', 'VBD'), ('popcorn', 'JJ'), ('and', 'CC'), ('cotton', 'NN'), ('candy', 'NN')]
['popcorn']
('food -> ', [])
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
popcorn
popcorn popcorn 429
[('the', 'DT'), ('popcorn', 'NN'), ('was', 'VBD'), ('a', 'DT'), ('dollar', 'NN')]
['popcorn']
('food -> ', [])
candidates to check:
3
candidates to check:
5
descended from food: [['NN'], 'candy', 21, 26]
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
descended from food: [['NN'], 'candy', 39, 44]
candidates to check:
9
descended from food: [['NN'], 'candy', 24, 29]
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'candy', 20, 25]
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'sugar', 21, 26]
sugar
sugar sugar 399
[('it', 'PRP'), ('s', 'VBZ'), ('all', 'DT'), ('sugar', 'NN'), ('it', 'PRP'), ('s', 'VBZ'), ('not', 'RB'), ('good', 'JJ'), ('for', 'IN'), ('you', 'PRP')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
10
candidates to check:
8
chinese
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b87f1680>)
[('my', 'PRP$'), ('favorite', 'JJ'), ('thing', 'NN'), ('was', 'VBD'), ('a', 'DT'), ('chinese', 'JJ'), ('boy', 'NN'), ('a', 'DT'), ('chinese', 'JJ'), ('girl', 'NN'), ('and', 'CC'), ('another', 'DT'), ('chinese', 'JJ'), ('boy', 'NN')]
['chinese']
('food -> ', [])
candidates to check:
2
candidates to check:
6
round
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b87c19e0>)
[('they', 'PRP'), ('they', 'PRP'), ('full', 'JJ'), ('they', 'PRP'), ('fill', 'VBP'), ('up', 'RP'), ('they', 'PRP'), ('filled', 'VBD'), ('up', 'RP'), ('a', 'DT'), ('two', 'CD'), ('little', 'JJ'), ('round', 'RB'), ('small', 'JJ'), ('things', 'NNS')]
['round']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
4
water
water water 18
[('the', 'DT'), ('stuff', 'NN'), ('didn', 'NN'), ('t', 'NN'), ('come', 'VBP'), ('out', 'IN'), ('like', 'IN'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
7
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
12
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
8
candidates to check:
2
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'apple', 21, 26]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
6
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
4
descended from food: [['NNS'], 'tomatoes', 31, 39]
tomatoes
tomatoes tomatoes 213
[('hey', 'NN'), ('where', 'WRB'), ('s', 'NN'), ('my', 'PRP$'), ('xxx', 'NN'), ('tomatoes', 'NNS')]
['tomatoes']
('food -> ', [['tomatoes', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['NNS'], 'potatoes', 6, 14]
potatoes
potatoes potatoes 62
[('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
1
descended from food: [['NNS'], 'tomatoes', 32, 40]
tomatoes
tomatoes tomatoes 213
[('no', 'DT'), ('casey', 'NN'), ('there', 'RB'), ('wasn', 'JJ'), ('t', 'NN'), ('any', 'DT'), ('tomatoes', 'NNS'), ('left', 'VBD')]
['tomatoes']
('food -> ', [['tomatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
7
descended from food: [['NN'], 'honey', 21, 26]
honey
honey honey 304
[('there', 'EX'), ('was', 'VBD'), ('none', 'NN'), ('honey', 'NN'), ('for', 'IN'), ('the', 'DT'), ('salad', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'tomato', 53, 59]
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NNS'], 'tomatoes', 54, 62]
tomatoes
tomatoes tomatoes 213
[('i', 'NN'), ('know', 'VBP'), ('that', 'IN'), ('s', 'VBP'), ('one', 'CD'), ('of', 'IN'), ('your', 'PRP$'), ('favorites', 'NNS'), ('right', 'RB'), ('casey', 'NN'), ('tomatoes', 'NNS')]
['tomatoes']
('food -> ', [['tomatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NNS'], 'fries', 13, 18]
french
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b87fe440>)
[('french', 'JJ'), ('fries', 'NNS')]
['french']
('food -> ', [])
candidates to check:
2
descended from food: [['NN'], 'salad', 11, 16]
candidates to check:
1
descended from food: [['NN'], 'vegetable', 8, 17]
candidates to check:
2
descended from food: [['NNS'], 'croutons', 6, 14]
croutons
croutons croutons 465
[('croutons', 'NNS')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
2
descended from food: [['NNS'], 'croutons', 6, 14]
croutons
croutons croutons 465
[('croutons', 'NNS')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
1
vegetables
vegetables vegetables 37
[('they', 'PRP'), ('re', 'VBP'), ('not', 'RB'), ('vegetables', 'NNS')]
['vegetables']
('food -> ', [])
candidates to check:
2
descended from food: [['NNS'], 'salads', 20, 26]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
5
doughnuts
doughnuts doughnuts 403
[('it', 'PRP'), ('was', 'VBD'), ('just', 'RB'), ('like', 'JJ'), ('doughnuts', 'NNS'), ('like', 'IN'), ('except', 'IN'), ('the', 'DT'), ('xxx', 'NNP'), ('really', 'RB'), ('taste', 'VBP'), ('like', 'IN'), ('doughnuts', 'NNS'), ('they', 'PRP'), ('were', 'VBD'), ('xxx', 'NNP'), ('they', 'PRP'), ('was', 'VBD'), ('and', 'CC'), ('the', 'DT'), ('light', 'NN'), ('was', 'VBD'), ('in', 'IN'), ('it', 'PRP')]
['doughnuts']
('food -> ', [['doughnuts', 'Baked Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
corn
corn corn 419
[('eat', 'VB'), ('your', 'PRP$'), ('corn', 'NN'), ('brian', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
4
descended from food: [['NNS'], 'croutons', 33, 41]
croutons
croutons croutons 465
[('you', 'PRP'), ('re', 'VBP'), ('going', 'VBG'), ('to', 'TO'), ('get', 'VB'), ('in', 'IN'), ('the', 'DT'), ('croutons', 'NNS'), ('brian', 'VBP')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
1
candidates to check:
2
corn
corn corn 419
[('the', 'DT'), ('corn', 'NN'), ('eat', 'VB'), ('your', 'PRP$'), ('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
2
descended from food: [['NNS'], 'croutons', 6, 14]
croutons
croutons croutons 465
[('croutons', 'NNS')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
1
descended from food: [['NNS'], 'croutons', 36, 44]
croutons
croutons croutons 465
[('brian', 'NN'), ('will', 'MD'), ('you', 'PRP'), ('give', 'VB'), ('the', 'DT'), ('croutons', 'NNS'), ('to', 'TO'), ('me', 'PRP')]
['croutons']
('food -> ', [['croutons', 'Baked Products']])
candidates to check:
4
candidates to check:
3
descended from food: [['NN'], 'salad', 32, 37]
candidates to check:
4
descended from food: [['NN'], 'salad', 46, 51]
candidates to check:
1
candidates to check:
1
corn
corn corn 419
[('eat', 'NN'), ('the', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
7
descended from food: [['NNS'], 'crackers', 39, 47]
crackers
crackers crackers 453
[('the', 'DT'), ('fire', 'NN'), ('the', 'DT'), ('fire', 'NN'), ('crackers', 'VBZ'), ('the', 'DT'), ('fire', 'NN'), ('crackers', 'NNS'), ('were', 'VBD')]
['crackers']
('food -> ', [['crackers', 'Baked Products']])
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
duck
duck duck 84
[('i', 'NN'), ('didn', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('to', 'TO'), ('duck', 'VB'), ('to', 'TO'), ('follow', 'VB'), ('rockets', 'NNS'), ('like', 'IN'), ('you', 'PRP'), ('guys', 'VBP')]
['duck']
('food -> ', [])
candidates to check:
2
candidates to check:
5
candidates to check:
6
candidates to check:
4
candidates to check:
10
descended from food: [['NNS'], 'crackers', 48, 56]
crackers
crackers crackers 453
[('when', 'WRB'), ('you', 'PRP'), ('see', 'VBP'), ('when', 'WRB'), ('you', 'PRP'), ('see', 'VBP'), ('two', 'CD'), ('fire', 'NN'), ('crackers', 'NNS'), ('come', 'VBP'), ('out', 'IN'), ('of', 'IN'), ('these', 'DT'), ('kids', 'NNS'), ('hands', 'NNS')]
['crackers']
('food -> ', [['crackers', 'Baked Products']])
candidates to check:
8
crackers
crackers crackers 453
[('the', 'DT'), ('fire', 'NN'), ('crackers', 'VBZ'), ('the', 'DT'), ('firecrackers', 'NNS'), ('were', 'VBD'), ('going', 'VBG'), ('all', 'DT'), ('over', 'IN'), ('the', 'DT'), ('place', 'NN'), ('they', 'PRP'), ('were', 'VBD'), ('firing', 'VBG'), ('they', 'PRP'), ('were', 'VBD'), ('firing', 'VBG'), ('in', 'IN'), ('the', 'DT'), ('grass', 'NN')]
['crackers']
('food -> ', [['crackers', 'Baked Products']])
candidates to check:
7
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
7
descended from food: [['NNS'], 'beers', 35, 40]
descended from food: [['NNS'], 'beers', 35, 40]
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'booze', 6, 11]
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8702710>)
[('the', 'DT'), ('baby', 'NN'), ('would', 'MD'), ('be', 'VB'), ('xxx', 'JJ')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
loading solution set
calculating
set([(641, (33, 41)), (446, (20, 26)), (697, (14, 18)), (176, (37, 42)), (17, (25, 29)), (26, (10, 15)), (73, (10, 17)), (52, (12, 19)), (428, (6, 18)), (689, (46, 51)), (654, (6, 14)), (17, (52, 56)), (354, (6, 14)), (119, (13, 25)), (125, (21, 26)), (440, (6, 14)), (17, (39, 44)), (377, (21, 26)), (437, (6, 14)), (481, (71, 80)), (647, (30, 34)), (52, (24, 36)), (343, (31, 39)), (407, (54, 62)), (364, (32, 40)), (443, (18, 28)), (819, (35, 40)), (677, (36, 44)), (26, (23, 27)), (392, (53, 59)), (819, (49, 54)), (481, (23, 32)), (593, (15, 19))])
[((17, (25, 29)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (39, 44)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (52, 56)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((26, (10, 15)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((26, (23, 27)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((52, (12, 19)), '*BRI:\tI got popcorn and cotton candy .\n'), ((52, (24, 36)), '*BRI:\tI got popcorn and cotton candy .\n'), ((73, (10, 17)), '*BRI:\tthe popcorn was a dollar .\n'), ((119, (13, 25)), '*CHI:\tI love cotton candy .\n'), ((125, (21, 26)), "*MOT:\t<it's> [<] all sugar it's not good for you .\n"), ((176, (37, 42)), "*BRI:\tthe stuff didn't come out like water .\n"), ((343, (31, 39)), "*CHI:\t<hey where's> [<] my xxx tomatoes ?\n"), ((354, (6, 14)), '*CHI:\tpotatoes [>] ?\n'), ((364, (32, 40)), "*MOT:\tno Casey there wasn't any tomatoes left .\n"), ((377, (21, 26)), '*MOT:\tthere was none honey for <the salad> [>] .\n'), ((392, (53, 59)), "*MOT:\tI'll go shopping tomorrow and I'll get you one tomato okay ?\n"), ((407, (54, 62)), "*MOT:\tI know that's one of your favorites right Casey tomatoes ?\n"), ((428, (6, 18)), '*MOT:\tfrench fries .\n'), ((437, (6, 14)), '*BRI:\tcroutons [?] .\n'), ((440, (6, 14)), '*MOT:\tcroutons .\n'), ((443, (18, 28)), "*MOT:\tthey're not vegetables .\n"), ((446, (20, 26)), '*MOT:\tthey go on in salads then .\n'), ((481, (23, 32)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((481, (71, 80)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((593, (15, 19)), '*FAT:\teat your corn Brian .\n'), ((641, (33, 41)), "*FAT:\tyou're going to get in the croutons Brian .\n"), ((647, (30, 34)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((654, (6, 14)), '*FAT:\tcroutons .\n'), ((677, (36, 44)), '*CHI:\t<Brian> [<] will you give the croutons to me ?\n'), ((689, (46, 51)), "*FAT:\tyou know a whole bunch there that's the salad .\n"), ((697, (14, 18)), '*FAT:\teat the corn .\n'), ((819, (35, 40)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n'), ((819, (49, 54)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n')]
set([(641, (33, 41)), (446, (20, 26)), (697, (14, 18)), (176, (37, 42)), (109, (24, 29)), (17, (25, 29)), (727, (39, 47)), (148, (50, 57)), (52, (31, 36)), (880, (10, 14)), (103, (39, 44)), (52, (12, 19)), (689, (46, 51)), (654, (6, 14)), (17, (52, 56)), (354, (6, 14)), (73, (10, 17)), (751, (23, 27)), (428, (6, 12)), (148, (36, 43)), (647, (11, 15)), (727, (63, 71)), (17, (-1, 4)), (775, (16, 24)), (79, (21, 26)), (125, (21, 26)), (841, (6, 11)), (26, (23, 27)), (148, (75, 82)), (377, (21, 26)), (270, (21, 26)), (431, (11, 16)), (428, (13, 18)), (593, (15, 19)), (481, (23, 32)), (685, (32, 37)), (119, (20, 25)), (647, (30, 34)), (343, (31, 39)), (155, (81, 86)), (407, (54, 62)), (364, (32, 40)), (443, (18, 28)), (819, (35, 40)), (677, (36, 44)), (437, (6, 14)), (440, (6, 14)), (392, (53, 59)), (434, (8, 17)), (770, (48, 56)), (481, (71, 80)), (775, (38, 46))])
[((17, (-1, 4)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (25, 29)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (52, 56)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((26, (23, 27)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((52, (12, 19)), '*BRI:\tI got popcorn and cotton candy .\n'), ((52, (31, 36)), '*BRI:\tI got popcorn and cotton candy .\n'), ((73, (10, 17)), '*BRI:\tthe popcorn was a dollar .\n'), ((79, (21, 26)), '*BRI:\tand the cotton candy was a dollar .\n'), ((103, (39, 44)), "*MOT:\tyou think you'd be with all that candy .\n"), ((109, (24, 29)), '*CHI:\tI love [!] cotton candy when I go to the circus with the xxx act and everything .\n'), ((119, (20, 25)), '*CHI:\tI love cotton candy .\n'), ((125, (21, 26)), "*MOT:\t<it's> [<] all sugar it's not good for you .\n"), ((148, (36, 43)), '*BRI:\t<my favorite> [<] thing was a Chinese boy a Chinese girl and another Chinese boy .\n'), ((148, (50, 57)), '*BRI:\t<my favorite> [<] thing was a Chinese boy a Chinese girl and another Chinese boy .\n'), ((148, (75, 82)), '*BRI:\t<my favorite> [<] thing was a Chinese boy a Chinese girl and another Chinese boy .\n'), ((155, (81, 86)), '*BRI:\tthey [//] <they full> [//] <they fill up> [//] they filled up a two little round small things .\n'), ((176, (37, 42)), "*BRI:\tthe stuff didn't come out like water .\n"), ((270, (21, 26)), '*FAT:\txxx at [?] the apple circus Brian .\n'), ((343, (31, 39)), "*CHI:\t<hey where's> [<] my xxx tomatoes ?\n"), ((354, (6, 14)), '*CHI:\tpotatoes [>] ?\n'), ((364, (32, 40)), "*MOT:\tno Casey there wasn't any tomatoes left .\n"), ((377, (21, 26)), '*MOT:\tthere was none honey for <the salad> [>] .\n'), ((392, (53, 59)), "*MOT:\tI'll go shopping tomorrow and I'll get you one tomato okay ?\n"), ((407, (54, 62)), "*MOT:\tI know that's one of your favorites right Casey tomatoes ?\n"), ((428, (6, 12)), '*MOT:\tfrench fries .\n'), ((428, (13, 18)), '*MOT:\tfrench fries .\n'), ((431, (11, 16)), '*MOT:\tin a salad ?\n'), ((434, (8, 17)), '*MOT:\ta vegetable ?\n'), ((437, (6, 14)), '*BRI:\tcroutons [?] .\n'), ((440, (6, 14)), '*MOT:\tcroutons .\n'), ((443, (18, 28)), "*MOT:\tthey're not vegetables .\n"), ((446, (20, 26)), '*MOT:\tthey go on in salads then .\n'), ((481, (23, 32)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((481, (71, 80)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((593, (15, 19)), '*FAT:\teat your corn Brian .\n'), ((641, (33, 41)), "*FAT:\tyou're going to get in the croutons Brian .\n"), ((647, (11, 15)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((647, (30, 34)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((654, (6, 14)), '*FAT:\tcroutons .\n'), ((677, (36, 44)), '*CHI:\t<Brian> [<] will you give the croutons to me ?\n'), ((685, (32, 37)), "*MOT:\tyou're the one who wanted salad .\n"), ((689, (46, 51)), "*FAT:\tyou know a whole bunch there that's the salad .\n"), ((697, (14, 18)), '*FAT:\teat the corn .\n'), ((727, (39, 47)), '*CHI:\t<the fire> [<][>] [//] <the fire crackers> [//] the fire crackers were [/] .\n'), ((727, (63, 71)), '*CHI:\t<the fire> [<][>] [//] <the fire crackers> [//] the fire crackers were [/] .\n'), ((751, (23, 27)), "*FAT:\tI didn't have_to duck to follow rockets [?] like you guys .\n"), ((770, (48, 56)), '*FAT:\t<when you see> [/] <when you see two fire crackers [?]> [>] come out of these kids hands [?] +...\n'), ((775, (16, 24)), '*CHI:\t<the fire crackers> [<] the firecrackers were going all over the place <they were firing> [/] they were firing <in the grass> [>] .\n'), ((775, (38, 46)), '*CHI:\t<the fire crackers> [<] the firecrackers were going all over the place <they were firing> [/] they were firing <in the grass> [>] .\n'), ((819, (35, 40)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n'), ((841, (6, 11)), '*FAT:\tbooze Brian (.) .\n'), ((880, (10, 14)), '*MOT:\tthe baby would be xxx .\n')]
calculating accuracy and recall
correct labels:
set(['tomato', 'honey', 'salad', 'corn', 'potatoes', 'cotton candy', 'vegetables', 'doughnuts', 'french fries', 'sugar', 'water', 'croutons', 'beers', 'pepsi', 'popcorn', 'salads', 'milk', 'tomatoes'])
predicted labels:
set(['', 'apple', 'chinese', 'doughnuts', 'honey', 'booze', 'duck', 'salads', 'milk', 'vegetables', 'sugar', 'vegetable', 'croutons', 'tomatoes', 'corn', 'french', 'water', 'beers', 'baby', 'tomato', 'salad', 'potatoes', 'fries', 'candy', 'popcorn', 'crackers', 'round'])
file:HSLLD/HV1/MT//casmt1.cha
precision: 0.555555555556
recall: 0.833333333333
true positives:['beers', 'corn', 'croutons', 'doughnuts', 'honey', 'milk', 'popcorn', 'potatoes', 'salad', 'salads', 'sugar', 'tomato', 'tomatoes', 'vegetables', 'water']
false positives: ['', 'apple', 'baby', 'booze', 'candy', 'chinese', 'crackers', 'duck', 'french', 'fries', 'round', 'vegetable']
false negatives: ['cotton candy', 'french fries', 'pepsi']
# true pos: 15
# false pos: 12
# false neg: 3
HSLLD/HV1/MT//mitmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//mitmt1.cha
HSLLD/HV1/MT//devmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//devmt1.cha
HSLLD/HV1/MT//monmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//monmt1.cha
HSLLD/HV1/MT//jebmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jebmt1.cha
HSLLD/HV1/MT//jesmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jesmt1.cha
HSLLD/HV1/MT//megmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//megmt1.cha
HSLLD/HV1/MT//zenmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//zenmt1.cha
HSLLD/HV1/MT//bramt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
9
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
6
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
7
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
2
descended from food: [['NN'], 'butter', 16, 22]
margarine
margarine margarine 717
[('you', 'PRP'), ('want', 'VBP'), ('butter', 'NN'), ('or', 'CC'), ('margarine', 'NN')]
['margarine']
('food -> ', [['margarine', 'Fats and Oils']])
butter
butter butter 499
[('you', 'PRP'), ('want', 'VBP'), ('butter', 'NN'), ('or', 'CC'), ('margarine', 'NN')]
['butter']
('food -> ', [['margarine', 'Fats and Oils'], ['butter', 'Fats and Oils']])
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'butter', 6, 12]
butter
butter butter 499
[('butter', 'NN'), ('please', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
1
candidates to check:
1
butter
butter butter 499
[('butter', 'NN'), ('xxx', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
9
descended from food: [['NN'], 'butter', 51, 57]
butter
butter butter 499
[('oh', 'IN'), ('no', 'DT'), ('i', 'NN'), ('like', 'IN'), ('m', 'NN'), ('i', 'NN'), ('don', 'VBP'), ('t', 'NN'), ('like', 'IN'), ('my', 'PRP$'), ('butter', 'NN'), ('that', 'WDT'), ('has', 'VBZ'), ('been', 'VBN'), ('left', 'VBN'), ('open', 'JJ'), ('like', 'IN'), ('that', 'DT'), ('thank', 'NN'), ('you', 'PRP'), ('very', 'RB'), ('much', 'RB')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
catsup
catsup catsup 101
[('you', 'PRP'), ('want', 'VBP'), ('catsup', 'NNS')]
['catsup']
('food -> ', [['catsup', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
3
fish
fish fish 305
[('on', 'IN'), ('your', 'PRP$'), ('fish', 'JJ'), ('cakes', 'NNS')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
5
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'juice', 6, 11]
juice
juice juice 52
[('juice', 'NN'), ('me', 'PRP'), ('me', 'PRP')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
bread
bread bread 186
[('um', 'IN'), ('the', 'DT'), ('brown', 'JJ'), ('bread', 'NN'), ('s', 'NN'), ('in', 'IN'), ('there', 'EX')]
['bread']
('food -> ', [])
brown
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8612cf8>)
[('um', 'IN'), ('the', 'DT'), ('brown', 'JJ'), ('bread', 'NN'), ('s', 'NN'), ('in', 'IN'), ('there', 'EX')]
['brown']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'supper', 15, 21]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
8
descended from food: [['NN'], 'lunch', 19, 24]
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
6
descended from food: [['NN'], 'sauce', 46, 51]
tartar
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b862c8c0>)
[('brad', 'NN'), ('made', 'VBD'), ('helped', 'VBD'), ('make', 'VB'), ('the', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['tartar']
('food -> ', [])
tartar sauce
tartar sauce tartar sauce 211
[('brad', 'NN'), ('made', 'VBD'), ('helped', 'VBD'), ('make', 'VB'), ('the', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['tartar', 'sauce']
('food -> ', [['tartar sauce', 'Soups, Sauces, and Gravies']])
sauce
sauce sauce 29
[('brad', 'NN'), ('made', 'VBD'), ('helped', 'VBD'), ('make', 'VB'), ('the', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['sauce']
('food -> ', [['tartar sauce', 'Soups, Sauces, and Gravies'], ['sauce', 'Soups, Sauces, and Gravies']])
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'mayonnaise', 14, 24]
mayonnaise
mayonnaise mayonnaise 231
[('all', 'PDT'), ('the', 'DT'), ('mayonnaise', 'NN'), ('in', 'IN'), ('the', 'DT'), ('jar', 'NN')]
['mayonnaise']
('food -> ', [['mayonnaise', 'Fats and Oils']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN'), ('first', 'RB')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['NN'], 'juice', 11, 16]
juice
juice juice 52
[('then', 'RB'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
4
butter
butter butter 499
[('perhaps', 'RB'), ('i', 'JJ'), ('ll', 'VBP'), ('butter', 'VB'), ('your', 'PRP$'), ('piece', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
3
descended from food: [['NN'], 'juice', 12, 17]
juice
juice juice 52
[('first', 'RB'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
descended from food: [['NNS'], 'beans', 20, 25]
beans
beans beans 105
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('beans', 'NNS')]
['beans']
('food -> ', [['beans', 'Legumes and Legume Products']])
candidates to check:
1
descended from food: [['NN'], 'juice', 10, 15]
juice
juice juice 52
[('the', 'DT'), ('juice', 'NN'), ('first', 'RB')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
descended from food: [['NNS'], 'beans', 20, 25]
beans
beans beans 105
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('beans', 'NNS')]
['beans']
('food -> ', [['beans', 'Legumes and Legume Products']])
candidates to check:
2
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'juice', 6, 11]
juice
juice juice 52
[('juice', 'NN'), ('please', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
3
juice
juice juice 52
[('enough', 'JJ'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
4
flowers
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b85c96c8>)
[('so', 'RB'), ('did', 'VBD'), ('you', 'PRP'), ('and', 'CC'), ('mommy', 'VB'), ('see', 'NN'), ('flowers', 'NNS'), ('today', 'NN')]
['flowers']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NNS'], 'tomatoes', 6, 14]
tomatoes
tomatoes tomatoes 213
[('tomatoes', 'NNS')]
['tomatoes']
('food -> ', [['tomatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
horse
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b85fb3f8>)
[('the', 'DT'), ('horse', 'NN')]
['horse']
('food -> ', [])
candidates to check:
5
candidates to check:
5
candidates to check:
5
horse
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b85fbe18>)
[('the', 'DT'), ('horse', 'NN'), ('was', 'VBD'), ('collecting', 'VBG'), ('the', 'DT'), ('money', 'NN')]
['horse']
('food -> ', [])
candidates to check:
2
horse
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8581128>)
[('how', 'WRB'), ('was', 'VBD'), ('the', 'DT'), ('horse', 'NN'), ('collecting', 'VBG'), ('the', 'DT'), ('money', 'NN')]
['horse']
('food -> ', [])
candidates to check:
7
candidates to check:
2
candidates to check:
2
candidates to check:
2
horse
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b858b878>)
[('in', 'IN'), ('the', 'DT'), ('horse', 'NN'), ('s', 'NN'), ('mouth', 'NN')]
['horse']
('food -> ', [])
candidates to check:
4
candidates to check:
5
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
7
candidates to check:
6
candidates to check:
2
candidates to check:
5
candidates to check:
6
descended from food: [['NN'], 'sauce', 21, 26]
tartar
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b85a51b8>)
[('oh', 'UH'), ('this', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['tartar']
('food -> ', [])
tartar sauce
tartar sauce tartar sauce 211
[('oh', 'UH'), ('this', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['tartar', 'sauce']
('food -> ', [['tartar sauce', 'Soups, Sauces, and Gravies']])
sauce
sauce sauce 29
[('oh', 'UH'), ('this', 'DT'), ('tartar', 'NN'), ('sauce', 'NN')]
['sauce']
('food -> ', [['tartar sauce', 'Soups, Sauces, and Gravies'], ['sauce', 'Soups, Sauces, and Gravies']])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'candy', 18, 23]
candidates to check:
2
descended from food: [['NN'], 'candy', 17, 22]
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
6
fish
fish fish 305
[('you', 'PRP'), ('want', 'VBP'), ('me', 'PRP'), ('to', 'TO'), ('cut', 'VB'), ('your', 'PRP$'), ('fish', 'JJ'), ('cake', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
cake
cake cake 412
[('you', 'PRP'), ('want', 'VBP'), ('me', 'PRP'), ('to', 'TO'), ('cut', 'VB'), ('your', 'PRP$'), ('fish', 'JJ'), ('cake', 'NN')]
['cake']
('food -> ', [['fish', 'Finfish and Shellfish Products'], ['cake', 'Baked Products']])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['NNS'], 'beans', 23, 28]
beans
beans beans 105
[('did', 'VBD'), ('you', 'PRP'), ('eat', 'VB'), ('some', 'DT'), ('beans', 'NNS')]
['beans']
('food -> ', [['beans', 'Legumes and Legume Products']])
candidates to check:
4
candidates to check:
5
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'bread', 36, 41]
bread
bread bread 186
[('you', 'PRP'), ('want', 'VBP'), ('me', 'PRP'), ('to', 'TO'), ('cut', 'VB'), ('your', 'PRP$'), ('brown', 'JJ'), ('bread', 'NN')]
['bread']
('food -> ', [])
brown
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8546e18>)
[('you', 'PRP'), ('want', 'VBP'), ('me', 'PRP'), ('to', 'TO'), ('cut', 'VB'), ('your', 'PRP$'), ('brown', 'JJ'), ('bread', 'NN')]
['brown']
('food -> ', [])
candidates to check:
5
candidates to check:
5
candidates to check:
5
fish
fish fish 305
[('okay', 'NN'), ('i', 'NN'), ('cut', 'VBD'), ('one', 'CD'), ('fish', 'NN'), ('stick', 'NN'), ('xxx', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
rolls
rolls rolls 276
[('a', 'DT'), ('couple', 'NN'), ('of', 'IN'), ('times', 'NNS'), ('he', 'PRP'), ('fell', 'VBD'), ('and', 'CC'), ('rolls', 'NNS')]
['rolls']
('food -> ', [['rolls', 'Baked Products']])
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
flowers
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b850b1b8>)
[('how', 'WRB'), ('did', 'VBD'), ('the', 'DT'), ('flowers', 'NNS'), ('smell', 'VBP')]
['flowers']
('food -> ', [])
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
8
pink
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8516050>)
[('purple', 'JJ'), ('ones', 'NNS'), ('and', 'CC'), ('pink', 'VB'), ('ones', 'NNS'), ('and', 'CC'), ('white', 'JJ'), ('ones', 'NNS'), ('and', 'CC'), ('lilac', 'NN'), ('ones', 'NNS')]
['pink']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
grapes
grapes grapes 76
[('looked', 'VBN'), ('like', 'IN'), ('a', 'DT'), ('bunch', 'NN'), ('of', 'IN'), ('concord', 'NN'), ('grapes', 'NNS')]
['grapes']
('food -> ', [['grapes', 'Fruits and Fruit Juices']])
candidates to check:
5
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
7
candidates to check:
5
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
7
candidates to check:
6
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
fish
fish fish 305
[('i', 'NN'), ('want', 'VBP'), ('to', 'TO'), ('go', 'VB'), ('to', 'TO'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
5
candidates to check:
6
fish
fish fish 305
[('did', 'VBD'), ('you', 'PRP'), ('see', 'VB'), ('the', 'DT'), ('fish', 'JJ'), ('man', 'NN'), ('go', 'VBP'), ('home', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
3
fish
fish fish 305
[('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('to', 'TO'), ('go', 'VB'), ('to', 'TO'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
fish
fish fish 305
[('we', 'PRP'), ('can', 'MD'), ('we', 'PRP'), ('can', 'MD'), ('run', 'VB'), ('to', 'TO'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
4
feet
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b84879e0>)
[('then', 'RB'), ('we', 'PRP'), ('can', 'MD'), ('run', 'VB'), ('back', 'RB'), ('home', 'NN'), ('with', 'IN'), ('our', 'PRP$'), ('feet', 'NNS'), ('like', 'IN'), ('like', 'IN'), ('like', 'IN'), ('like', 'IN'), ('i', 'NN'), ('always', 'RB'), ('do', 'VBP')]
['feet']
('food -> ', [])
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
3
bear
bear bear 130
[('brad', 'NN'), ('should', 'MD'), ('get', 'VB'), ('out', 'RP'), ('his', 'PRP$'), ('berenstein', 'NN'), ('bear', 'IN'), ('oh', 'JJ'), ('i', 'NN'), ('m', 'VBP'), ('going', 'VBG'), ('t', 'NN'), ('a', 'DT'), ('have', 'VBP'), ('to', 'TO'), ('let', 'VB'), ('ma', 'PRP'), ('read', 'VB'), ('it', 'PRP'), ('and', 'CC'), ('that', 'IN'), ('ll', 'NN'), ('tell', 'VB'), ('her', 'PRP$'), ('what', 'WP'), ('thunder', 'NN'), ('is', 'VBZ'), ('huh', 'JJ')]
['bear']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
3
candidates to check:
4
candidates to check:
5
candidates to check:
6
candidates to check:
4
candidates to check:
6
candidates to check:
9
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b84b9ea8>)
[('and', 'CC'), ('i', 'NN'), ('was', 'VBD'), ('trying', 'VBG'), ('to', 'TO'), ('find', 'VB'), ('something', 'NN'), ('that', 'WDT'), ('was', 'VBD'), ('yellow', 'JJ'), ('outside', 'RB'), ('in', 'IN'), ('the', 'DT'), ('dark', 'NN'), ('all', 'DT'), ('by', 'IN'), ('itself', 'PRP')]
['yellow']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
2
descended from food: [['NN'], 'milk', 52, 56]
milk
milk milk 46
[('i', 'JJ'), ('m', 'VBP'), ('all', 'DT'), ('i', 'JJ'), ('m', 'VBP'), ('all', 'DT'), ('done', 'VBN'), ('though', 'IN'), ('i', 'NN'), ('want', 'VBP'), ('some', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
descended from food: [['NN'], 'milk', 18, 22]
milk
milk milk 46
[('here', 'RB'), ('s', 'VB'), ('your', 'PRP$'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
honey
honey honey 304
[('well', 'RB'), ('honey', 'NN'), ('i', 'NN'), ('don', 'VBP'), ('t', 'JJ'), ('think', 'VBP'), ('we', 'PRP'), ('should', 'MD'), ('go', 'VB')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
4
fish
fish fish 305
[('yyy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
3
candidates to check:
1
candidates to check:
10
descended from food: [['NN'], 'dinner', 62, 68]
descended from food: [['NN'], 'candy', 98, 103]
candidates to check:
6
descended from food: [['NN'], 'candy', 21, 26]
candidates to check:
5
cream
cream cream 72
[('mommy', 'NN'), ('i', 'NN'), ('m', 'VBP'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('mommy', 'NN'), ('i', 'NN'), ('m', 'VBP'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
candidates to check:
2
candidates to check:
11
cream
cream cream 72
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN'), ('bar', 'NN')]
['cream']
('food -> ', [])
ice cream bar
ice cream bar ice cream bar 303
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN'), ('bar', 'NN')]
['ice', 'cream', 'bar']
('food -> ', [['ice cream bar', 'Dairy and Egg Products']])
ice cream
ice cream ice cream 265
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('ice', 'JJ'), ('cream', 'NN'), ('bar', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream bar', 'Dairy and Egg Products'], ['ice cream', 'Dairy and Egg Products']])
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
10
cream
cream cream 72
[('want', 'VB'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('too', 'RB')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('want', 'VB'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('too', 'RB')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
candidates to check:
3
candidates to check:
5
cream
cream cream 72
[('ice', 'NN'), ('cream', 'NN'), ('is', 'VBZ'), ('better', 'RBR')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('ice', 'NN'), ('cream', 'NN'), ('is', 'VBZ'), ('better', 'RBR')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
candidates to check:
9
cream
cream cream 72
[('ma', 'NN'), ('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('ma', 'NN'), ('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
candidates to check:
4
candidates to check:
2
descended from food: [['NN'], 'candy', 18, 23]
candidates to check:
9
cream
cream cream 72
[('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('fish', 'JJ'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['cream']
('food -> ', [])
fish
fish fish 305
[('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('fish', 'JJ'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
ice cream
ice cream ice cream 265
[('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('fish', 'JJ'), ('store', 'NN'), ('and', 'CC'), ('get', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN')]
['ice', 'cream']
('food -> ', [['fish', 'Finfish and Shellfish Products'], ['ice cream', 'Dairy and Egg Products']])
candidates to check:
3
candidates to check:
1
descended from food: [['NN'], 'candy', 9, 14]
candidates to check:
4
candidates to check:
3
fish
fish fish 305
[('ma', 'NN'), ('you', 'PRP'), ('wan', 'VBP'), ('t', 'RB'), ('go', 'VBP'), ('to', 'TO'), ('the', 'DT'), ('fish', 'JJ'), ('store', 'NN'), ('with', 'IN'), ('me', 'PRP'), ('and', 'CC'), ('my', 'PRP$'), ('mama', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
8
water
water water 18
[('um', 'JJ'), ('mommy', 'NN'), ('i', 'NN'), ('wan', 'VBP'), ('t', 'NN'), ('t', 'NN'), ('a', 'DT'), ('bring', 'NN'), ('my', 'PRP$'), ('new', 'JJ'), ('water', 'NN'), ('gun', 'NN'), ('to', 'TO'), ('the', 'DT'), ('preschool', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
3
candidates to check:
1
candidates to check:
6
descended from food: [['NN'], 'candy', 57, 62]
cream
cream cream 72
[('do', 'VB'), ('you', 'PRP'), ('wan', 'VB'), ('t', 'JJ'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('i', 'JJ'), ('won', 'VBD'), ('t', 'JJ'), ('get', 'NN'), ('candy', 'NN'), ('and', 'CC'), ('i', 'NN'), ('ll', 'VBP'), ('get', 'VB'), ('just', 'RB'), ('ice', 'JJ'), ('cream', 'NN'), ('or', 'CC'), ('cake', 'VB')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('do', 'VB'), ('you', 'PRP'), ('wan', 'VB'), ('t', 'JJ'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('i', 'JJ'), ('won', 'VBD'), ('t', 'JJ'), ('get', 'NN'), ('candy', 'NN'), ('and', 'CC'), ('i', 'NN'), ('ll', 'VBP'), ('get', 'VB'), ('just', 'RB'), ('ice', 'JJ'), ('cream', 'NN'), ('or', 'CC'), ('cake', 'VB')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
cake
cake cake 412
[('do', 'VB'), ('you', 'PRP'), ('wan', 'VB'), ('t', 'JJ'), ('t', 'NN'), ('a', 'DT'), ('go', 'NN'), ('to', 'TO'), ('the', 'DT'), ('store', 'NN'), ('and', 'CC'), ('i', 'JJ'), ('won', 'VBD'), ('t', 'JJ'), ('get', 'NN'), ('candy', 'NN'), ('and', 'CC'), ('i', 'NN'), ('ll', 'VBP'), ('get', 'VB'), ('just', 'RB'), ('ice', 'JJ'), ('cream', 'NN'), ('or', 'CC'), ('cake', 'VB')]
['cake']
('food -> ', [['ice cream', 'Dairy and Egg Products'], ['cake', 'Baked Products']])
candidates to check:
5
candidates to check:
4
descended from food: [['NN'], 'milk', 34, 38]
milk
milk milk 46
[('come', 'VB'), ('up', 'RP'), ('here', 'RB'), ('and', 'CC'), ('drink', 'VB'), ('your', 'PRP$'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
8
blue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83dd710>)
[('we', 'PRP'), ('were', 'VBD'), ('about', 'RB'), ('to', 'TO'), ('find', 'VB'), ('out', 'RP'), ('what', 'WP'), ('the', 'DT'), ('name', 'NN'), ('of', 'IN'), ('the', 'DT'), ('little', 'JJ'), ('bells', 'NNS'), ('flower', 'NN'), ('is', 'VBZ'), ('xxx', 'PDT'), ('a', 'DT'), ('man', 'NN'), ('going', 'VBG'), ('by', 'IN'), ('me', 'PRP'), ('says', 'VBZ'), ('xxx', 'JJ'), ('blue', 'NN'), ('bells', 'NNS')]
['blue']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
brown
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b84b9e60>)
[('but', 'CC'), ('i', 'NN'), ('want', 'VBP'), ('my', 'PRP$'), ('brown', 'JJ'), ('boots', 'NNS')]
['brown']
('food -> ', [])
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
5
candidates to check:
5
blue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83eee18>)
[('you', 'PRP'), ('had', 'VBD'), ('red', 'VBN'), ('ones', 'NNS'), ('and', 'CC'), ('you', 'PRP'), ('had', 'VBD'), ('blue', 'VBN'), ('ones', 'NNS')]
['blue']
('food -> ', [])
candidates to check:
2
candidates to check:
3
brown
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83eeef0>)
[('you', 'PRP'), ('never', 'RB'), ('had', 'VBD'), ('any', 'DT'), ('brown', 'JJ'), ('boots', 'NNS')]
['brown']
('food -> ', [])
candidates to check:
2
candidates to check:
6
candidates to check:
5
brown
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83aa0e0>)
[('the', 'DT'), ('brown', 'JJ'), ('work', 'NN'), ('shoes', 'NNS')]
['brown']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
8
candidates to check:
2
candidates to check:
2
candidates to check:
9
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
3
feet
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83ace18>)
[('you', 'PRP'), ('got', 'VBD'), ('them', 'PRP'), ('on', 'IN'), ('the', 'DT'), ('wrong', 'JJ'), ('feet', 'NNS')]
['feet']
('food -> ', [])
candidates to check:
4
feet
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83b91b8>)
[('you', 'PRP'), ('got', 'VBD'), ('the', 'DT'), ('shoes', 'NNS'), ('on', 'IN'), ('the', 'DT'), ('wrong', 'JJ'), ('feet', 'NNS')]
['feet']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
feet
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83b9050>)
[('mommy', 'NN'), ('is', 'VBZ'), ('this', 'DT'), ('the', 'DT'), ('right', 'JJ'), ('feet', 'NNS')]
['feet']
('food -> ', [])
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
5
feet
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83b9710>)
[('is', 'VBZ'), ('it', 'PRP'), ('is', 'VBZ'), ('this', 'DT'), ('the', 'DT'), ('right', 'JJ'), ('feet', 'NNS')]
['feet']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
5
feet
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83b99e0>)
[('is', 'VBZ'), ('this', 'DT'), ('the', 'DT'), ('right', 'JJ'), ('feet', 'NNS')]
['feet']
('food -> ', [])
candidates to check:
1
hard
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83aa710>)
[('he', 'PRP'), ('knows', 'VBZ'), ('them', 'PRP'), ('and', 'CC'), ('they', 'PRP'), ('re', 'VBP'), ('not', 'RB'), ('hard', 'JJ')]
['hard']
('food -> ', [])
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
10
cream
cream cream 72
[('kind', 'NN'), ('of', 'IN'), ('ice', 'NN'), ('cream', 'NN'), ('you', 'PRP'), ('going', 'VBG'), ('t', 'VB'), ('a', 'DT'), ('get', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['cream']
('food -> ', [])
fish
fish fish 305
[('kind', 'NN'), ('of', 'IN'), ('ice', 'NN'), ('cream', 'NN'), ('you', 'PRP'), ('going', 'VBG'), ('t', 'VB'), ('a', 'DT'), ('get', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
ice cream
ice cream ice cream 265
[('kind', 'NN'), ('of', 'IN'), ('ice', 'NN'), ('cream', 'NN'), ('you', 'PRP'), ('going', 'VBG'), ('t', 'VB'), ('a', 'DT'), ('get', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'NN'), ('store', 'NN')]
['ice', 'cream']
('food -> ', [['fish', 'Finfish and Shellfish Products'], ['ice cream', 'Dairy and Egg Products']])
candidates to check:
2
loading solution set
calculating
set([(454, (20, 25)), (220, (16, 22)), (1537, (20, 33)), (433, (11, 16)), (1413, (52, 56)), (471, (6, 11)), (2121, (14, 23)), (457, (10, 15)), (181, (7, 13)), (725, (17, 22)), (1585, (54, 63)), (477, (14, 19)), (1726, (34, 38)), (271, (15, 26)), (1519, (98, 103)), (159, (16, 22)), (159, (26, 35)), (1713, (81, 90)), (249, (6, 11)), (1562, (15, 24)), (721, (18, 23)), (429, (6, 10)), (1713, (94, 98)), (1573, (53, 62)), (1579, (14, 19)), (461, (20, 25)), (451, (12, 17)), (228, (14, 24)), (830, (21, 31)), (1017, (30, 44)), (1469, (18, 22)), (1524, (21, 26)), (793, (23, 28)), (1713, (57, 62)), (513, (6, 14)), (1593, (9, 14)), (185, (51, 57)), (379, (14, 24)), (1528, (26, 35)), (675, (14, 26)), (1569, (6, 15)), (775, (30, 39)), (373, (39, 51)), (438, (20, 26)), (813, (30, 41)), (169, (6, 12)), (1582, (18, 23))])
[((159, (16, 22)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((159, (26, 35)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((169, (6, 12)), '*GMA:\tbutter please .\n'), ((181, (7, 13)), '*CHI:\t<butter xxx> [>] .\n'), ((185, (51, 57)), "*GMA:\t<oh no> [<] I like <&m> [//] I don't like my butter that has been left open like that thank <you very much> [>] .\n"), ((220, (16, 22)), '*MOT:\t<you want catsup> [<] ?\n'), ((228, (14, 24)), '*MOT:\ton your fish cakes ?\n'), ((249, (6, 11)), '*CHI:\tjuice me [!] me .\n'), ((271, (15, 26)), "*MOT:\t&-um the brown bread's in there .\n"), ((373, (39, 51)), '*MOT:\t<Brad made> [//] helped make the tartar sauce .\n'), ((379, (14, 24)), '*MOT:\tall the mayonnaise in the jar .\n'), ((429, (6, 10)), '*MOT:\tmilk first ?\n'), ((433, (11, 16)), '*MOT:\tthen juice ?\n'), ((438, (20, 26)), "*GMA:\tperhaps I'll <butter your piece> [>] ?\n"), ((451, (12, 17)), '*CHI:\tfirst juice .\n'), ((454, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((457, (10, 15)), '*MOT:\tthe juice first ?\n'), ((461, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((471, (6, 11)), '*CHI:\tjuice please [?] .\n'), ((477, (14, 19)), '*CHI:\t<enough juice> [>] .\n'), ((513, (6, 14)), '*GPA:\ttomatoes ?\n'), ((675, (14, 26)), '*MOT:\toh this tartar sauce (..) +...\n'), ((721, (18, 23)), '*CHI:\tyou gave me candy .\n'), ((725, (17, 22)), '*MOT:\tI gave you candy .\n'), ((775, (30, 39)), '*MOT:\tyou want me to cut your fish cake (.) ?\n'), ((793, (23, 28)), '*MOT:\tdid you eat some beans ?\n'), ((813, (30, 41)), '*MOT:\tyou want me to cut your brown bread ?\n'), ((830, (21, 31)), '*MOT:\tokay I cut one fish stick [?] xxx .\n'), ((1017, (30, 44)), '*GMA:\tlooked like a bunch of <Concord grapes> [>] .\n'), ((1413, (52, 56)), "*CHI:\t<I'm all> [/] I'm all done though I want some milk .\n"), ((1469, (18, 22)), "*MOT:\there's your milk .\n"), ((1519, (98, 103)), "*GMA:\tand <you really [!] shouldn't> [//] you didn't have any dinner you really [!] shouldn't eat candy .\n"), ((1524, (21, 26)), '*GMA:\tyou had enough candy today Lovey .\n'), ((1528, (26, 35)), "*CHI:\tMommy I'm gonna get ice cream .\n"), ((1537, (20, 33)), "*CHI:\tI'm gonna get ice cream bar[!] (.) .\n"), ((1562, (15, 24)), '*MOT:\t<want an ice cream too> [>] .\n'), ((1569, (6, 15)), '*GMA:\tice cream is better .\n'), ((1573, (53, 62)), '*CHI:\tMa I wan(t) (t)a go to the store and get <some ice cream> [>] .\n'), ((1579, (14, 19)), '*GMA:\t<but no candy> [<] .\n'), ((1582, (18, 23)), '*CHI:\tno just [?] candy .\n'), ((1585, (54, 63)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1593, (9, 14)), '*GMA:\tno candy .\n'), ((1713, (57, 62)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (81, 90)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (94, 98)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1726, (34, 38)), '*MOT:\tcome up here and drink your milk (.) .\n'), ((2121, (14, 23)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n')]
set([(1585, (30, 34)), (454, (20, 25)), (1169, (30, 34)), (220, (16, 22)), (1164, (22, 26)), (1537, (20, 33)), (1153, (28, 32)), (1519, (98, 103)), (433, (11, 16)), (1413, (52, 56)), (471, (6, 11)), (830, (21, 25)), (1218, (37, 41)), (457, (10, 15)), (271, (15, 20)), (1506, (27, 31)), (181, (7, 13)), (1759, (107, 111)), (2081, (25, 29)), (1639, (44, 49)), (562, (11, 16)), (725, (17, 22)), (1524, (21, 26)), (1713, (94, 98)), (1585, (54, 63)), (477, (14, 19)), (1726, (34, 38)), (321, (19, 24)), (1519, (62, 68)), (1332, (56, 62)), (1017, (38, 44)), (2121, (50, 54)), (159, (16, 22)), (159, (26, 35)), (1713, (81, 90)), (551, (10, 15)), (1713, (57, 62)), (1469, (18, 22)), (2039, (30, 34)), (859, (37, 42)), (249, (6, 11)), (1562, (15, 24)), (1944, (10, 15)), (721, (18, 23)), (1896, (20, 25)), (429, (6, 10)), (304, (15, 21)), (967, (18, 25)), (1569, (6, 15)), (1573, (53, 62)), (1599, (30, 34)), (501, (31, 38)), (461, (20, 25)), (2085, (36, 40)), (451, (12, 17)), (775, (35, 39)), (813, (36, 41)), (2021, (37, 41)), (1582, (18, 23)), (813, (30, 35)), (1221, (41, 45)), (1935, (24, 29)), (775, (30, 34)), (1263, (41, 45)), (793, (23, 28)), (228, (14, 18)), (513, (6, 14)), (2064, (36, 40)), (1929, (41, 45)), (1593, (9, 14)), (185, (51, 57)), (1002, (26, 30)), (1702, (11, 16)), (379, (14, 24)), (1528, (26, 35)), (1500, (12, 17)), (567, (18, 23)), (675, (14, 26)), (591, (14, 19)), (271, (21, 26)), (373, (39, 51)), (438, (20, 26)), (2017, (32, 36)), (169, (6, 12)), (2121, (14, 23))])
[((159, (16, 22)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((159, (26, 35)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((169, (6, 12)), '*GMA:\tbutter please .\n'), ((181, (7, 13)), '*CHI:\t<butter xxx> [>] .\n'), ((185, (51, 57)), "*GMA:\t<oh no> [<] I like <&m> [//] I don't like my butter that has been left open like that thank <you very much> [>] .\n"), ((220, (16, 22)), '*MOT:\t<you want catsup> [<] ?\n'), ((228, (14, 18)), '*MOT:\ton your fish cakes ?\n'), ((249, (6, 11)), '*CHI:\tjuice me [!] me .\n'), ((271, (15, 20)), "*MOT:\t&-um the brown bread's in there .\n"), ((271, (21, 26)), "*MOT:\t&-um the brown bread's in there .\n"), ((304, (15, 21)), '*CHI:\ttime for supper .\n'), ((321, (19, 24)), '*CHI:\ttime [<] for lunch (.) !\n'), ((373, (39, 51)), '*MOT:\t<Brad made> [//] helped make the tartar sauce .\n'), ((379, (14, 24)), '*MOT:\tall the mayonnaise in the jar .\n'), ((429, (6, 10)), '*MOT:\tmilk first ?\n'), ((433, (11, 16)), '*MOT:\tthen juice ?\n'), ((438, (20, 26)), "*GMA:\tperhaps I'll <butter your piece> [>] ?\n"), ((451, (12, 17)), '*CHI:\tfirst juice .\n'), ((454, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((457, (10, 15)), '*MOT:\tthe juice first ?\n'), ((461, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((471, (6, 11)), '*CHI:\tjuice please [?] .\n'), ((477, (14, 19)), '*CHI:\t<enough juice> [>] .\n'), ((501, (31, 38)), '*GPA:\tso did you and Mommy see flowers today ?\n'), ((513, (6, 14)), '*GPA:\ttomatoes ?\n'), ((551, (10, 15)), '*CHI:\tthe horse .\n'), ((562, (11, 16)), '*MOT:\t<the horse was collecting the money> [<] ?\n'), ((567, (18, 23)), '*GPA:\thow was the horse collecting the money ?\n'), ((591, (14, 19)), "*GMA:\tin the <horse's> [>] mouth .\n"), ((675, (14, 26)), '*MOT:\toh this tartar sauce (..) +...\n'), ((721, (18, 23)), '*CHI:\tyou gave me candy .\n'), ((725, (17, 22)), '*MOT:\tI gave you candy .\n'), ((775, (30, 34)), '*MOT:\tyou want me to cut your fish cake (.) ?\n'), ((775, (35, 39)), '*MOT:\tyou want me to cut your fish cake (.) ?\n'), ((793, (23, 28)), '*MOT:\tdid you eat some beans ?\n'), ((813, (30, 35)), '*MOT:\tyou want me to cut your brown bread ?\n'), ((813, (36, 41)), '*MOT:\tyou want me to cut your brown bread ?\n'), ((830, (21, 25)), '*MOT:\tokay I cut one fish stick [?] xxx .\n'), ((859, (37, 42)), '*GMA:\t<a couple of times he fell and rolls> [>] +...\n'), ((967, (18, 25)), '*GPA:\thow did the flowers [?] smell ?\n'), ((1002, (26, 30)), '*GMA:\tpurple ones (.) and pink ones and white ones and lilac ones .\n'), ((1017, (38, 44)), '*GMA:\tlooked like a bunch of <Concord grapes> [>] .\n'), ((1153, (28, 32)), '*CHI:\tI want (to) go to the fish store .\n'), ((1164, (22, 26)), '*CHI:\tdid you see the fish man go home (.) ?\n'), ((1169, (30, 34)), '*CHI:\tI wan(t) (to) go to the fish store .\n'), ((1218, (37, 41)), '*CHI:\t<we can> [/] we can run to the fish store .\n'), ((1221, (41, 45)), '*CHI:\tthen we can run back home with our feet like [/] like [/] like [/] like I always do (.) ?\n'), ((1263, (41, 45)), "*MOT:\tBrad should get out his Berenstein Bear [?] [///] oh I'm going (t)a have_to let Ma read it and that'll tell her what thunder is huh ?\n"), ((1332, (56, 62)), '*CHI:\t<and I> [<] was trying to find something that was yellow outside in the dark all by itself .\n'), ((1413, (52, 56)), "*CHI:\t<I'm all> [/] I'm all done though I want some milk .\n"), ((1469, (18, 22)), "*MOT:\there's your milk .\n"), ((1500, (12, 17)), "*MOT:\t<well Honey> [<] I don't think we should go .\n"), ((1506, (27, 31)), '*CHI:\tyyy I want go to the fish store .\n'), ((1519, (62, 68)), "*GMA:\tand <you really [!] shouldn't> [//] you didn't have any dinner you really [!] shouldn't eat candy .\n"), ((1519, (98, 103)), "*GMA:\tand <you really [!] shouldn't> [//] you didn't have any dinner you really [!] shouldn't eat candy .\n"), ((1524, (21, 26)), '*GMA:\tyou had enough candy today Lovey .\n'), ((1528, (26, 35)), "*CHI:\tMommy I'm gonna get ice cream .\n"), ((1537, (20, 33)), "*CHI:\tI'm gonna get ice cream bar[!] (.) .\n"), ((1562, (15, 24)), '*MOT:\t<want an ice cream too> [>] .\n'), ((1569, (6, 15)), '*GMA:\tice cream is better .\n'), ((1573, (53, 62)), '*CHI:\tMa I wan(t) (t)a go to the store and get <some ice cream> [>] .\n'), ((1582, (18, 23)), '*CHI:\tno just [?] candy .\n'), ((1585, (30, 34)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1585, (54, 63)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1593, (9, 14)), '*GMA:\tno candy .\n'), ((1599, (30, 34)), '*CHI:\tMa you wan(t) go to the fish store with me and my Mama ?\n'), ((1639, (44, 49)), '*CHI:\t&-um Mommy I wan(t) (t)a bring my new water gun to the preschool [>] .\n'), ((1702, (11, 16)), '*MOT:\twhat Honey ?\n'), ((1713, (57, 62)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (81, 90)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (94, 98)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1726, (34, 38)), '*MOT:\tcome up here and drink your milk (.) .\n'), ((1759, (107, 111)), '*GMA:\twe were about to find out what the name of the little bells flower is xxx a man going by me says xxx blue bells .\n'), ((1896, (20, 25)), '*CHI:\tbut I want my brown boots .\n'), ((1929, (41, 45)), '*GPA:\tyou had red ones and <you had> [>] blue ones .\n'), ((1935, (24, 29)), '*GPA:\tyou never had any brown boots .\n'), ((1944, (10, 15)), '*GPA:\tthe brown work shoes ?\n'), ((2017, (32, 36)), '*GPA:\tyou got them on the wrong feet .\n'), ((2021, (37, 41)), '*GPA:\tyou got the shoes on the wrong feet .\n'), ((2039, (30, 34)), '*CHI:\tMommy is this the right feet ?\n'), ((2064, (36, 40)), '*CHI:\t<is it> [<] is this the right feet ?\n'), ((2081, (25, 29)), '*CHI:\t<is this the right feet> [<] ?\n'), ((2085, (36, 40)), "*GMA:\the knows them and they're not hard .\n"), ((2121, (14, 23)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n'), ((2121, (50, 54)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'fish cakes', 'brown bread', 'catsup', 'tartar sauce', 'cake', 'ice cream bar', 'candy', 'ice cream', 'juice', 'beans', 'concord grapes', 'fish cake', 'fish stick', 'margarine', 'mayonnaise', 'milk', 'tomatoes'])
predicted labels:
set(['fish', 'hard', 'yellow', 'feet', 'juice', 'margarine', 'rolls', 'ice cream', 'pink', 'horse', 'ice cream bar', 'milk', 'mayonnaise', 'tomatoes', 'brown', 'catsup', 'blue', 'bear', 'water', 'lunch', 'grapes', 'supper', 'flowers', 'bread', 'butter', 'honey', 'tartar sauce', 'candy', 'dinner', 'beans', 'cake'])
file:HSLLD/HV1/MT//bramt1.cha
precision: 0.41935483871
recall: 0.722222222222
true positives:['beans', 'butter', 'cake', 'candy', 'catsup', 'ice cream', 'ice cream bar', 'juice', 'margarine', 'mayonnaise', 'milk', 'tartar sauce', 'tomatoes']
false positives: ['bear', 'blue', 'bread', 'brown', 'dinner', 'feet', 'fish', 'flowers', 'grapes', 'hard', 'honey', 'horse', 'lunch', 'pink', 'rolls', 'supper', 'water', 'yellow']
false negatives: ['brown bread', 'concord grapes', 'fish cake', 'fish cakes', 'fish stick']
# true pos: 13
# false pos: 18
# false neg: 5
HSLLD/HV1/MT//kurmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//kurmt1.cha
HSLLD/HV1/MT//termt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//termt1.cha
HSLLD/HV1/MT//brnmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
2
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b835b7a0>)
[('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('sing', 'NN'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
8
candidates to check:
6
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
7
candidates to check:
2
candidates to check:
7
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'food', 40, 44]
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
6
descended from food: [['NN'], 'food', 38, 42]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
salt
salt salt 0
[('um', 'JJ'), ('i', 'NN'), ('m', 'VBP'), ('takin', 'NN'), ('g', 'NN'), ('the', 'DT'), ('salt', 'NN'), ('off', 'IN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
1
salt
salt salt 0
[('i', 'JJ'), ('hate', 'VBP'), ('salt', 'NN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'food', 81, 85]
candidates to check:
2
candidates to check:
9
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
7
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
4
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83560e0>)
[('it', 'PRP'), ('was', 'VBD'), ('big', 'JJ'), ('it', 'PRP'), ('it', 'PRP'), ('was', 'VBD'), ('bigger', 'JJR'), ('than', 'IN'), ('a', 'DT'), ('chair', 'NN'), ('or', 'CC'), ('a', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b83357e8>)
[('it', 'PRP'), ('was', 'VBD'), ('a', 'DT'), ('green', 'JJ'), ('door', 'NN')]
['green']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
15
candidates to check:
8
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
8
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
descended from food: [['NN'], 'meat', 50, 54]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b82c5c20>)
[('you', 'PRP'), ('know', 'VBP'), ('how', 'WRB'), ('to', 'TO'), ('eat', 'VB'), ('that', 'DT'), ('fat', 'JJ'), ('um', 'NN'), ('that', 'IN'), ('meat', 'NN'), ('brenda', 'NN'), ('xxx', 'NN')]
['meat']
('food -> ', [])
fat
fat fat 900
[('you', 'PRP'), ('know', 'VBP'), ('how', 'WRB'), ('to', 'TO'), ('eat', 'VB'), ('that', 'DT'), ('fat', 'JJ'), ('um', 'NN'), ('that', 'IN'), ('meat', 'NN'), ('brenda', 'NN'), ('xxx', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
6
fat
fat fat 900
[('and', 'CC'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('eat', 'NN'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
3
descended from food: [['NN'], 'meat', 52, 56]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b82d5e18>)
[('you', 'PRP'), ('need', 'VBP'), ('fat', 'JJ'), ('bren', 'NNS'), ('so', 'IN'), ('you', 'PRP'), ('know', 'VBP'), ('how', 'WRB'), ('to', 'TO'), ('eat', 'VB'), ('that', 'DT'), ('meat', 'NN'), ('here', 'RB')]
['meat']
('food -> ', [])
fat
fat fat 900
[('you', 'PRP'), ('need', 'VBP'), ('fat', 'JJ'), ('bren', 'NNS'), ('so', 'IN'), ('you', 'PRP'), ('know', 'VBP'), ('how', 'WRB'), ('to', 'TO'), ('eat', 'VB'), ('that', 'DT'), ('meat', 'NN'), ('here', 'RB')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
fat
fat fat 900
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
5
fat
fat fat 900
[('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('don', 'NN'), ('t', 'NN'), ('worry', 'VBP'), ('about', 'IN'), ('fat', 'NN'), ('i', 'NN'), ('ain', 'VBP'), ('t', 'NN'), ('nothing', 'NN'), ('to', 'TO'), ('explain', 'VB'), ('it', 'PRP'), ('to', 'TO'), ('you', 'PRP'), ('be', 'VB'), ('cause', 'VBN'), ('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('eat', 'NN'), ('it', 'PRP'), ('here', 'RB')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
2
fat
fat fat 900
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('eat', 'NN'), ('no', 'DT'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
2
candidates to check:
2
fat
fat fat 900
[('xxx', 'JJ'), ('eat', 'NN'), ('no', 'DT'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
candidates to check:
2
candidates to check:
9
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
fat
fat fat 900
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('eat', 'NN'), ('fat', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
3
onions
onions onions 26
[('no', 'DT'), ('onions', 'NNS')]
['onions']
('food -> ', [['onions', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
2
corn
corn corn 419
[('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
7
descended from food: [['NN'], 'food', 30, 34]
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
4
descended from food: [['NN'], 'food', 47, 51]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'food', 20, 24]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
6
candidates to check:
4
candidates to check:
7
descended from food: [['NN'], 'food', 45, 49]
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
8
fish
fish fish 305
[('so', 'IN'), ('me', 'PRP'), ('and', 'CC'), ('carmen', 'NNS'), ('just', 'RB'), ('look', 'VBP'), ('out', 'RP'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'JJ'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('wat', 'NN'), ('er', 'NN'), ('and', 'CC'), ('guess', 'VB'), ('what', 'WP'), ('i', 'NN'), ('saw', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('in', 'IN'), ('the', 'DT'), ('water', 'NN')]
['fish']
('food -> ', [['fish', 'Finfish and Shellfish Products']])
water
water water 18
[('so', 'IN'), ('me', 'PRP'), ('and', 'CC'), ('carmen', 'NNS'), ('just', 'RB'), ('look', 'VBP'), ('out', 'RP'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'JJ'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('wat', 'NN'), ('er', 'NN'), ('and', 'CC'), ('guess', 'VB'), ('what', 'WP'), ('i', 'NN'), ('saw', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('in', 'IN'), ('the', 'DT'), ('water', 'NN')]
['water']
('food -> ', [['fish', 'Finfish and Shellfish Products'], ['water', 'Beverages']])
duck
duck duck 84
[('so', 'IN'), ('me', 'PRP'), ('and', 'CC'), ('carmen', 'NNS'), ('just', 'RB'), ('look', 'VBP'), ('out', 'RP'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('fish', 'JJ'), ('look', 'NN'), ('at', 'IN'), ('the', 'DT'), ('wat', 'NN'), ('er', 'NN'), ('and', 'CC'), ('guess', 'VB'), ('what', 'WP'), ('i', 'NN'), ('saw', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('in', 'IN'), ('the', 'DT'), ('water', 'NN')]
['duck']
('food -> ', [['fish', 'Finfish and Shellfish Products'], ['water', 'Beverages']])
candidates to check:
2
candidates to check:
5
descended from food: [['NNS'], 'lobsters', 40, 48]
water
water water 18
[('that', 'DT'), ('water', 'NN'), ('is', 'VBZ'), ('deep', 'JJ'), ('and', 'CC'), ('it', 'PRP'), ('had', 'VBD'), ('lobsters', 'NNS'), ('in', 'IN'), ('it', 'PRP')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
descended from food: [['NNS'], 'lobsters', 14, 22]
candidates to check:
2
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b82faf80>)
[('be', 'VB'), ('cause', 'VBN'), ('the', 'DT'), ('water', 'NN'), ('was', 'VBD'), ('green', 'JJ')]
['green']
('food -> ', [])
water
water water 18
[('be', 'VB'), ('cause', 'VBN'), ('the', 'DT'), ('water', 'NN'), ('was', 'VBD'), ('green', 'JJ')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
3
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8287560>)
[('green', 'JJ'), ('water', 'NN'), ('you', 'PRP'), ('can', 'MD'), ('t', 'VB'), ('see', 'VB')]
['green']
('food -> ', [])
water
water water 18
[('green', 'JJ'), ('water', 'NN'), ('you', 'PRP'), ('can', 'MD'), ('t', 'VB'), ('see', 'VB')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
3
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8287cb0>)
[('want', 'VB'), ('me', 'PRP'), ('to', 'TO'), ('treat', 'VB'), ('you', 'PRP'), ('like', 'IN'), ('a', 'DT'), ('little', 'JJ'), ('bitty', 'JJ'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'food', 36, 40]
candidates to check:
1
descended from food: [['NN'], 'food', 10, 14]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
corn
corn corn 419
[('i', 'JJ'), ('hate', 'VBP'), ('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
descended from food: [['NN'], 'rice', 20, 24]
rice
rice rice 147
[('i', 'JJ'), ('eat', 'VBP'), ('all', 'PDT'), ('the', 'DT'), ('rice', 'NN')]
['rice']
('food -> ', [['rice', 'Cereal Grains and Pasta']])
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'rice', 23, 27]
rice
rice rice 147
[('look', 'NN'), ('at', 'IN'), ('all', 'PDT'), ('that', 'DT'), ('rice', 'NN')]
['rice']
('food -> ', [['rice', 'Cereal Grains and Pasta']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'rice', 40, 44]
rice
rice rice 147
[('put', 'VB'), ('it', 'PRP'), ('over', 'IN'), ('here', 'RB'), ('and', 'CC'), ('you', 'PRP'), ('eat', 'VBP'), ('that', 'IN'), ('rice', 'NN'), ('and', 'CC'), ('corn', 'NN')]
['rice']
('food -> ', [['rice', 'Cereal Grains and Pasta']])
corn
corn corn 419
[('put', 'VB'), ('it', 'PRP'), ('over', 'IN'), ('here', 'RB'), ('and', 'CC'), ('you', 'PRP'), ('eat', 'VBP'), ('that', 'IN'), ('rice', 'NN'), ('and', 'CC'), ('corn', 'NN')]
['corn']
('food -> ', [['rice', 'Cereal Grains and Pasta'], ['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'rice', 15, 19]
rice
rice rice 147
[('eat', 'VB'), ('your', 'PRP$'), ('rice', 'NN'), ('and', 'CC'), ('corn', 'NN'), ('then', 'RB')]
['rice']
('food -> ', [['rice', 'Cereal Grains and Pasta']])
corn
corn corn 419
[('eat', 'VB'), ('your', 'PRP$'), ('rice', 'NN'), ('and', 'CC'), ('corn', 'NN'), ('then', 'RB')]
['corn']
('food -> ', [['rice', 'Cereal Grains and Pasta'], ['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
3
candidates to check:
1
loading solution set
calculating
set([(1148, (13, 17)), (1151, (20, 24)), (1233, (24, 28)), (209, (30, 34)), (713, (10, 16)), (1215, (49, 53)), (637, (31, 34)), (719, (6, 10)), (1233, (15, 19)), (187, (13, 17)), (1169, (23, 27)), (184, (32, 36)), (190, (36, 40)), (1215, (40, 44))])
[((184, (32, 36)), "*SIS:\t(.) &-um I'm takin(g) the salt off .\n"), ((187, (13, 17)), '*SIS:\tI hate salt [>] .\n'), ((190, (36, 40)), '*CHI:\t<mommy I drink my> [<] [/] my soda ?\n'), ((209, (30, 34)), '*CHI:\twell Mom I drink all my soda .\n'), ((637, (31, 34)), '*MOT:\tyou know how to eat that fat [//] &-um that meat Brenda xxx .\n'), ((713, (10, 16)), '*MOT:\t<no onions> [<] ?\n'), ((719, (6, 10)), '*MOT:\tcorn .\n'), ((1148, (13, 17)), '*SIS:\tI hate corn .\n'), ((1151, (20, 24)), '*SIS:\tI eat all the rice .\n'), ((1169, (23, 27)), '*MOT:\tlook at all that rice .\n'), ((1215, (40, 44)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1215, (49, 53)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1233, (15, 19)), '*MOT:\teat your rice and corn then .\n'), ((1233, (24, 28)), '*MOT:\teat your rice and corn then .\n')]
set([(400, (21, 26)), (645, (52, 56)), (915, (20, 25)), (713, (10, 16)), (255, (81, 85)), (645, (15, 18)), (1148, (13, 17)), (658, (40, 43)), (895, (118, 123)), (1151, (20, 24)), (122, (40, 44)), (940, (47, 51)), (187, (13, 17)), (1233, (24, 28)), (1169, (23, 27)), (184, (32, 36)), (321, (66, 71)), (1045, (10, 14)), (19, (28, 33)), (653, (14, 17)), (668, (21, 24)), (1041, (36, 40)), (166, (38, 42)), (895, (106, 110)), (637, (31, 34)), (719, (6, 10)), (907, (40, 48)), (921, (12, 17)), (637, (50, 54)), (921, (6, 11)), (1215, (49, 53)), (852, (45, 49)), (915, (30, 35)), (907, (11, 16)), (761, (30, 34)), (1215, (40, 44)), (912, (14, 22)), (694, (18, 21)), (814, (20, 24)), (895, (56, 60)), (642, (28, 31)), (784, (47, 51)), (674, (17, 20)), (1233, (15, 19))])
[((19, (28, 33)), "*MOT:\tyou don't sing at the table .\n"), ((122, (40, 44)), '*CHI:\t<(be)cause> [/] (.) (be)cause xxx food .\n'), ((166, (38, 42)), "*MOT:\tyou're supposed to eat all your food (.) .\n"), ((184, (32, 36)), "*SIS:\t(.) &-um I'm takin(g) the salt off .\n"), ((187, (13, 17)), '*SIS:\tI hate salt [>] .\n'), ((255, (81, 85)), "*SIS:\twe do that at the church <when it's a> [//] when [/] when God give us some food you supposed to do that .\n"), ((321, (66, 71)), '*SIS:\tit was <big it [/] it was> [>] bigger than a chair or [!] a table .\n'), ((400, (21, 26)), '*SIS:\tit <was a> [>] green door .\n'), ((637, (31, 34)), '*MOT:\tyou know how to eat that fat [//] &-um that meat Brenda xxx .\n'), ((637, (50, 54)), '*MOT:\tyou know how to eat that fat [//] &-um that meat Brenda xxx .\n'), ((642, (28, 31)), "*MOT:\tand you [>] don't eat fat .\n"), ((645, (15, 18)), '*MOT:\tyou need fat Bren so you know how to eat that meat here .\n'), ((645, (52, 56)), '*MOT:\tyou need fat Bren so you know how to eat that meat here .\n'), ((653, (14, 17)), "*CHI:\tI don't fat .\n"), ((658, (40, 43)), "*MOT:\tyou <don't> [/] don't worry about fat I ain't nothing to explain it to you (be)cause you don't eat it here .\n"), ((668, (21, 24)), "*CHI:\tI don't eat no fat .\n"), ((674, (17, 20)), '*CHI:\txxx eat no fat .\n'), ((694, (18, 21)), "*CHI:\tI don't eat fat .\n"), ((713, (10, 16)), '*MOT:\t<no onions> [<] ?\n'), ((719, (6, 10)), '*MOT:\tcorn .\n'), ((761, (30, 34)), "*MOT:\tif you have no room for food you don't have no room &f for drink .\n"), ((784, (47, 51)), "*MOT:\tsee you don't need [//] have no room for food you xxx Shay .\n"), ((814, (20, 24)), '*MOT:\tspoon full of food ?\n'), ((852, (45, 49)), '*SIS:\tthis [//] that boat had a xxx a lot of food and a lot of chairs and tables .\n'), ((895, (56, 60)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((895, (106, 110)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((895, (118, 123)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((907, (11, 16)), '*SIS:\tthat water is deep [!] and it had lobsters in it .\n'), ((907, (40, 48)), '*SIS:\tthat water is deep [!] and it had lobsters in it .\n'), ((912, (14, 22)), '*MOT:\tyou saw lobsters ?\n'), ((915, (20, 25)), '*SIS:\t(be)cause the water was green .\n'), ((915, (30, 35)), '*SIS:\t(be)cause the water was green .\n'), ((921, (6, 11)), "*SIS:\tgreen water you can't see .\n"), ((921, (12, 17)), "*SIS:\tgreen water you can't see .\n"), ((940, (47, 51)), '*MOT:\twant me to treat you like a little bitty baby ?\n'), ((1041, (36, 40)), '*SIS:\tand he knows what the [/] the food is ?\n'), ((1045, (10, 14)), '*SIS:\tthe food called ?\n'), ((1148, (13, 17)), '*SIS:\tI hate corn .\n'), ((1151, (20, 24)), '*SIS:\tI eat all the rice .\n'), ((1169, (23, 27)), '*MOT:\tlook at all that rice .\n'), ((1215, (40, 44)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1215, (49, 53)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1233, (15, 19)), '*MOT:\teat your rice and corn then .\n'), ((1233, (24, 28)), '*MOT:\teat your rice and corn then .\n')]
calculating accuracy and recall
correct labels:
set(['salt', 'corn', 'fat', 'soda', 'rice', 'onions'])
predicted labels:
set(['lobsters', 'meat', 'food', 'onions', 'corn', 'fat', 'water', 'green', 'duck', 'baby', 'table', 'rice', 'salt', 'fish'])
file:HSLLD/HV1/MT//brnmt1.cha
precision: 0.357142857143
recall: 0.833333333333
true positives:['corn', 'fat', 'onions', 'rice', 'salt']
false positives: ['baby', 'duck', 'fish', 'food', 'green', 'lobsters', 'meat', 'table', 'water']
false negatives: ['soda']
# true pos: 5
# false pos: 9
# false neg: 1
HSLLD/HV1/MT//guymt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
descended from food: [['NN'], 'food', 32, 36]
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'rice', 27, 31]
rice
rice rice 147
[('okay', 'IN'), ('you', 'PRP'), ('d', 'VBP'), ('like', 'IN'), ('your', 'PRP$'), ('rice', 'NN')]
['rice']
('food -> ', [['rice', 'Cereal Grains and Pasta']])
candidates to check:
1
candidates to check:
3
candidates to check:
2
descended from food: [['NN'], 'meat', 28, 32]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8264290>)
[('oh', 'UH'), ('got', 'VBD'), ('ta', 'JJ'), ('look', 'NN'), ('for', 'IN'), ('the', 'DT'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
descended from food: [['NN'], 'meat', 20, 24]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b82640e0>)
[('you', 'PRP'), ('like', 'IN'), ('your', 'PRP$'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
9
descended from food: [['NN'], 'food', 57, 61]
candidates to check:
2
spinach
spinach spinach 34
[('popeye', 'NN'), ('eats', 'NNS'), ('spinach', 'VBP')]
['spinach']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
spinach
spinach spinach 34
[('his', 'PRP$'), ('his', 'PRP$'), ('spinach', 'NN')]
['spinach']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
5
descended from food: [['NN'], 'food', 53, 57]
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'lunch', 27, 32]
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'lunch', 28, 33]
candidates to check:
6
descended from food: [['NN'], 'lunch', 12, 17]
descended from food: [['NN'], 'orange', 36, 42]
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8269f38>)
[('i', 'NN'), ('had', 'VBD'), ('lunch', 'NN'), ('and', 'CC'), ('i', 'NN'), ('had', 'VBD'), ('0an', 'CD'), ('orange', 'NN'), ('in', 'IN'), ('my', 'PRP$'), ('book', 'NN'), ('bag', 'NN')]
['orange']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'food', 25, 29]
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'food', 27, 31]
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'ketchup', 22, 29]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'juice', 17, 22]
juice
juice juice 52
[('drink', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
3
candidates to check:
1
descended from food: [['NN'], 'juice', 17, 22]
juice
juice juice 52
[('drink', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
loading solution set
calculating
set([(21, (27, 31)), (63, (18, 25)), (38, (20, 24)), (35, (28, 32)), (262, (17, 22)), (139, (36, 42)), (99, (18, 25)), (255, (17, 22))])
[((21, (27, 31)), "*MOT:\tokay you'd like your rice ?\n"), ((35, (28, 32)), '*CHI:\toh gotta look for the meat .\n'), ((38, (20, 24)), '*MOT:\tyou like your meat ?\n'), ((63, (18, 25)), '*CHI:\tPopeye eats spinach .\n'), ((99, (18, 25)), '*MOT:\this [/] his spinach ?\n'), ((139, (36, 42)), '*CHI:\tI had lunch (.) and I had 0an orange in my book bag .\n'), ((255, (17, 22)), '*MOT:\tdrink your juice .\n'), ((262, (17, 22)), '*MOT:\tdrink your juice .\n')]
set([(135, (28, 33)), (21, (27, 31)), (63, (18, 25)), (128, (27, 32)), (38, (20, 24)), (226, (27, 31)), (218, (25, 29)), (262, (17, 22)), (35, (28, 32)), (235, (22, 29)), (255, (17, 22)), (139, (36, 42)), (139, (12, 17)), (57, (57, 61)), (99, (18, 25)), (120, (53, 57)), (14, (32, 36))])
[((14, (32, 36)), '*MOT:\txxx sit down and eat your food .\n'), ((21, (27, 31)), "*MOT:\tokay you'd like your rice ?\n"), ((35, (28, 32)), '*CHI:\toh gotta look for the meat .\n'), ((38, (20, 24)), '*MOT:\tyou like your meat ?\n'), ((57, (57, 61)), "*MOT:\tyeah you're gonna be strong (.) so eat up all your food .\n"), ((63, (18, 25)), '*CHI:\tPopeye eats spinach .\n'), ((99, (18, 25)), '*MOT:\this [/] his spinach ?\n'), ((120, (53, 57)), '*CHI:\thm: (.) <I was eatin(g)> [/] I was eatin(g) my food up .\n'), ((128, (27, 32)), '*MOT:\tdid you eat all your lunch ?\n'), ((135, (28, 33)), '*MOT:\twhat did you have for lunch ?\n'), ((139, (12, 17)), '*CHI:\tI had lunch (.) and I had 0an orange in my book bag .\n'), ((139, (36, 42)), '*CHI:\tI had lunch (.) and I had 0an orange in my book bag .\n'), ((218, (25, 29)), '*CHI:\tMommy I eat all my food .\n'), ((226, (27, 31)), "*MOT:\tdon't play with your food and eat it up Chi .\n"), ((235, (22, 29)), '*CHI:\tmommy I found a ketchup in it .\n'), ((255, (17, 22)), '*MOT:\tdrink your juice .\n'), ((262, (17, 22)), '*MOT:\tdrink your juice .\n')]
calculating accuracy and recall
correct labels:
set(['orange', 'juice', 'rice', 'meat', 'spinach'])
predicted labels:
set(['juice', 'meat', 'spinach', 'food', 'lunch', 'orange', 'rice', 'ketchup'])
file:HSLLD/HV1/MT//guymt1.cha
precision: 0.625
recall: 1.0
true positives:['juice', 'meat', 'orange', 'rice', 'spinach']
false positives: ['food', 'ketchup', 'lunch']
false negatives: []
# true pos: 5
# false pos: 3
# false neg: 0
HSLLD/HV1/MT//maymt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//maymt1.cha
HSLLD/HV1/MT//mormt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//mormt1.cha
HSLLD/HV1/MT//geomt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
3
candidates to check:
2
pumpkin
pumpkin pumpkin 15
[('pumpkin', 'NN')]
['pumpkin']
('food -> ', [['pumpkin', 'Vegetables and Vegetable Products']])
candidates to check:
3
pumpkin
pumpkin pumpkin 15
[('pumpkin', 'NN')]
['pumpkin']
('food -> ', [['pumpkin', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'sausage', 18, 25]
sausage
sausage sausage 324
[('is', 'VBZ'), ('that', 'DT'), ('sausage', 'NN')]
['sausage']
('food -> ', [['sausage', 'Meals, Entrees, and Side Dishes']])
candidates to check:
2
descended from food: [['NNS'], 'meatballs', 25, 34]
meatballs
meatballs meatballs 197
[('no', 'DT'), ('that', 'WDT'), ('s', 'VBZ'), ('xxx', 'NNP'), ('meatballs', 'NNS')]
['meatballs']
('food -> ', [['meatballs', 'Legumes and Legume Products']])
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'meat', 14, 18]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8176f80>)
[('is', 'VBZ'), ('that', 'IN'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'meat', 17, 21]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b817b518>)
[('yes', 'NNS'), ('that', 'WDT'), ('s', 'VBP'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
6
descended from food: [['NNS'], 'meatballs', 21, 30]
meatballs
meatballs meatballs 197
[('is', 'VBZ'), ('this', 'DT'), ('m', 'NN'), ('meatballs', 'NNS')]
['meatballs']
('food -> ', [['meatballs', 'Legumes and Legume Products']])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NNS'], 'hamburgers', 27, 37]
candidates to check:
1
candidates to check:
4
candidates to check:
2
descended from food: [['NN'], 'food', 40, 44]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
7
bacon
bacon bacon 309
[('with', 'IN'), ('with', 'IN'), ('the', 'DT'), ('t', 'NN'), ('toy', 'NN'), ('toy', 'NN'), ('bakin', 'NN'), ('g', 'NN'), ('bacon', 'NN')]
['bacon']
('food -> ', [['bacon', 'Legumes and Legume Products']])
candidates to check:
6
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'food', 23, 27]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
7
candidates to check:
7
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
9
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'food', 15, 19]
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'supper', 15, 21]
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
6
candidates to check:
3
candidates to check:
5
candidates to check:
7
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8136dd0>)
[('because', 'IN'), ('she', 'PRP'), ('misses', 'VBZ'), ('her', 'PRP'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
1
candidates to check:
4
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b813a128>)
[('what', 'WP'), ('s', 'VBD'), ('her', 'PRP'), ('baby', 'NN'), ('s', 'NN'), ('name', 'NN')]
['baby']
('food -> ', [])
candidates to check:
3
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b813a560>)
[('does', 'VBZ'), ('xxx', 'VB'), ('baby', 'NN'), ('needs', 'VBZ'), ('his', 'PRP$'), ('name', 'NN')]
['baby']
('food -> ', [])
candidates to check:
1
candidates to check:
3
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b813a8c0>)
[('her', 'PRP$'), ('baby', 'NN'), ('s', 'NN'), ('name', 'NN'), ('is', 'VBZ'), ('stevie', 'JJ')]
['baby']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
4
candidates to check:
8
candidates to check:
3
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
8
candidates to check:
1
candidates to check:
3
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
feet
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b808a248>)
[('sit', 'NN'), ('up', 'RP'), ('please', 'VB'), ('your', 'PRP$'), ('feet', 'NNS')]
['feet']
('food -> ', [])
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
8
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
hard
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b809fea8>)
[('you', 'PRP'), ('can', 'MD'), ('t', 'VB'), ('hug', 'NN'), ('that', 'WDT'), ('hard', 'JJ'), ('chi', 'NN')]
['hard']
('food -> ', [])
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
descended from food: [['NN'], 'food', 61, 65]
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'meatball', 22, 30]
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
1
duck
duck duck 84
[('a', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [])
candidates to check:
3
candidates to check:
4
duck
duck duck 84
[('did', 'VBD'), ('he', 'PRP'), ('take', 'VB'), ('a', 'DT'), ('little', 'JJ'), ('bite', 'NN'), ('of', 'IN'), ('the', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['NN'], 'supper', 35, 41]
candidates to check:
5
candidates to check:
4
candidates to check:
2
pepper
pepper pepper 27
[('and', 'CC'), ('put', 'VB'), ('pepper', 'NN'), ('on', 'IN'), ('her', 'PRP$')]
['pepper']
('food -> ', [])
candidates to check:
4
salt
salt salt 0
[('and', 'CC'), ('and', 'CC'), ('and', 'CC'), ('salt', 'NN'), ('on', 'IN'), ('her', 'PRP$')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
7
duck
duck duck 84
[('you', 'PRP'), ('had', 'VBD'), ('better', 'JJR'), ('be', 'VB'), ('hungry', 'JJ'), ('to', 'TO'), ('eat', 'VB'), ('a', 'DT'), ('whole', 'JJ'), ('duck', 'NN'), ('huh', 'NN')]
['duck']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'food', 18, 22]
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
4
shoots
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b80785a8>)
[('because', 'IN'), ('because', 'IN'), ('anthony', 'NN'), ('s', 'VBD'), ('the', 'DT'), ('bad', 'JJ'), ('because', 'IN'), ('he', 'PRP'), ('shoots', 'VBZ'), ('people', 'NNS')]
['shoots']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
7
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
5
candidates to check:
2
egg
egg egg 357
[('egg', 'NN')]
['egg']
('food -> ', [])
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
duck
duck duck 84
[('he', 'PRP'), ('ate', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('alive', 'JJ')]
['duck']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
feet
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b8024c68>)
[('put', 'VB'), ('your', 'PRP$'), ('feet', 'NNS'), ('down', 'RP'), ('please', 'NN')]
['feet']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
9
candidates to check:
2
candidates to check:
7
candidates to check:
9
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
8
candidates to check:
6
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
8
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
8
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
duck
duck duck 84
[('um', 'JJ'), ('um', 'IN'), ('the', 'DT'), ('wolf', 'NN'), ('ate', 'VBD'), ('the', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
7
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
9
candidates to check:
6
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
9
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
7
shake
shake shake 148
[('yeah', 'NN'), ('but', 'CC'), ('he', 'PRP'), ('didn', 'VBZ'), ('t', 'JJ'), ('shake', 'VB'), ('my', 'PRP$'), ('hand', 'NN'), ('when', 'WRB'), ('when', 'WRB'), ('i', 'NN'), ('was', 'VBD'), ('when', 'WRB'), ('i', 'NN'), ('was', 'VBD'), ('up', 'RB'), ('the', 'DT'), ('hill', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
2
candidates to check:
4
candidates to check:
2
shake
shake shake 148
[('because', 'IN'), ('he', 'PRP'), ('didn', 'VBZ'), ('t', 'JJ'), ('shake', 'VB'), ('my', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
3
shake
shake shake 148
[('be', 'VB'), ('cause', 'NN'), ('he', 'PRP'), ('didn', 'VBZ'), ('t', 'CC'), ('come', 'VB'), ('up', 'RP'), ('the', 'DT'), ('hill', 'NN'), ('and', 'CC'), ('shake', 'VB'), ('my', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
4
candidates to check:
1
candidates to check:
2
shake
shake shake 148
[('then', 'RB'), ('i', 'VB'), ('shake', 'VB'), ('his', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
candidates to check:
1
candidates to check:
7
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
4
shake
shake shake 148
[('be', 'VB'), ('cause', 'NN'), ('you', 'PRP'), ('went', 'VBD'), ('up', 'RB'), ('to', 'TO'), ('him', 'PRP'), ('and', 'CC'), ('you', 'PRP'), ('asked', 'VBD'), ('him', 'PRP'), ('if', 'IN'), ('he', 'PRP'), ('would', 'MD'), ('shake', 'VB'), ('your', 'PRP$'), ('hand', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'food', 32, 36]
candidates to check:
5
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7fb5e18>)
[('and', 'CC'), ('what', 'WP'), ('was', 'VBD'), ('the', 'DT'), ('baby', 'NN'), ('s', 'NN'), ('name', 'NN')]
['baby']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
brownies
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7f44e18>)
[('mostly', 'RB'), ('be', 'VB'), ('cause', 'NN'), ('he', 'PRP'), ('wanted', 'VBD'), ('more', 'JJR'), ('brownies', 'NNS')]
['brownies']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'food', 30, 34]
candidates to check:
5
descended from food: [['NN'], 'cookie', 58, 64]
descended from food: [['NNS'], 'cupcakes', 28, 36]
cookie
cookie cookie 507
[('because', 'IN'), ('kenny', 'NN'), ('saw', 'VBD'), ('the', 'DT'), ('cupcakes', 'NNS'), ('and', 'CC'), ('he', 'PRP'), ('dropped', 'VBD'), ('a', 'DT'), ('cookie', 'NN')]
['cookie']
('food -> ', [['cookie', 'Baked Products']])
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'cupcake', 21, 28]
descended from food: [['NN'], 'cookie', 46, 52]
cookie
cookie cookie 507
[('he', 'PRP'), ('saw', 'VBD'), ('the', 'DT'), ('cupcake', 'NN'), ('and', 'CC'), ('he', 'PRP'), ('dropped', 'VBD'), ('a', 'DT'), ('cookie', 'NN')]
['cookie']
('food -> ', [['cookie', 'Baked Products']])
candidates to check:
4
descended from food: [['NN'], 'cookie', 24, 30]
cookie
cookie cookie 507
[('why', 'WRB'), ('d', 'NN'), ('he', 'PRP'), ('drop', 'VBZ'), ('the', 'DT'), ('cookie', 'NN')]
['cookie']
('food -> ', [['cookie', 'Baked Products']])
candidates to check:
5
descended from food: [['NNS'], 'cupcakes', 36, 44]
candidates to check:
1
descended from food: [['NN'], 'cupcake', 48, 55]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
hard
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7f73c20>)
[('yeah', 'RB'), ('real', 'JJ'), ('hard', 'JJ'), ('like', 'IN'), ('this', 'DT')]
['hard']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'candy', 55, 60]
candidates to check:
2
descended from food: [['NN'], 'gum', 21, 24]
candidates to check:
3
descended from food: [['NN'], 'gum', 30, 33]
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'gum', 25, 28]
candidates to check:
1
candidates to check:
3
descended from food: [['NNS'], 'gums', 18, 22]
gums
gums gums 332
[('you', 'PRP'), ('got', 'VBD'), ('two', 'CD'), ('gums', 'NNS'), ('and', 'CC'), ('anything', 'NN'), ('else', 'RB')]
['gums']
('food -> ', [['gums', 'Sweets']])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
7
turtle
turtle turtle 89
[('and', 'CC'), ('and', 'CC'), ('uh', 'JJ'), ('and', 'CC'), ('a', 'DT'), ('pretend', 'JJ'), ('turtle', 'NN'), ('couldn', 'NN'), ('t', 'NN'), ('get', 'VB'), ('me', 'PRP')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
1
candidates to check:
4
turtle
turtle turtle 89
[('and', 'CC'), ('you', 'PRP'), ('held', 'VBP'), ('on', 'IN'), ('like', 'IN'), ('that', 'DT'), ('and', 'CC'), ('the', 'DT'), ('turtle', 'NN'), ('couldn', 'NN'), ('t', 'NN'), ('get', 'NN'), ('you', 'PRP')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
2
candidates to check:
2
turtle
turtle turtle 89
[('where', 'WRB'), ('was', 'VBD'), ('the', 'DT'), ('turtle', 'NN')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
3
ground
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7f2c4d0>)
[('he', 'PRP'), ('he', 'PRP'), ('was', 'VBD'), ('way', 'NN'), ('down', 'IN'), ('to', 'TO'), ('the', 'DT'), ('ground', 'NN')]
['ground']
('food -> ', [])
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
4
candidates to check:
5
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
7
turtle
turtle turtle 89
[('a', 'DT'), ('nice', 'JJ'), ('turtle', 'NN'), ('turtle', 'JJ'), ('n', 'JJ'), ('nice', 'JJ'), ('turtle', 'NN'), ('toys', 'NNS')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
7
turtle
turtle turtle 89
[('yeah', 'NN'), ('nice', 'JJ'), ('turtle', 'JJ'), ('things', 'NNS'), ('toys', 'NNS')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
turtle
turtle turtle 89
[('and', 'CC'), ('the', 'DT'), ('turtle', 'JJ'), ('turtle', 'NN'), ('is', 'VBZ'), ('a', 'DT'), ('bum', 'NN'), ('bum', 'NN')]
['turtle']
('food -> ', [['turtle', 'Finfish and Shellfish Products']])
candidates to check:
1
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7f240e0>)
[('how', 'WRB'), ('s', 'JJ'), ('your', 'PRP$'), ('baby', 'NN'), ('stacie', 'NN')]
['baby']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'meatball', 8, 16]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
8
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
7
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
8
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
17
candidates to check:
20
candidates to check:
8
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
4
snap
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7eef998>)
[('watch', 'NN'), ('this', 'DT'), ('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('snap', 'VB')]
['snap']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
snap
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7ef30e0>)
[('want', 'NN'), ('to', 'TO'), ('hear', 'VB'), ('me', 'PRP'), ('snap', 'VB')]
['snap']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
loading solution set
calculating
set([(98, (18, 25)), (1048, (52, 56)), (1343, (9, 12)), (944, (8, 12)), (2963, (46, 54)), (121, (21, 30)), (2419, (58, 64)), (951, (49, 53)), (25, (6, 13)), (111, (14, 18)), (102, (25, 34)), (142, (27, 37)), (2433, (24, 30)), (987, (28, 32)), (2441, (48, 55)), (1801, (37, 41)), (22, (6, 13)), (118, (17, 21)), (1523, (17, 21)), (2437, (36, 44)), (909, (22, 30)), (2428, (46, 52)), (2555, (18, 22)), (2934, (8, 16)), (984, (14, 20)), (182, (52, 57))])
[((22, (6, 13)), '*CHI:\tpumpkin .\n'), ((25, (6, 13)), '*MOT:\tpumpkin ?\n'), ((98, (18, 25)), '*CHI:\t(.) is that sausage ?\n'), ((102, (25, 34)), "*MOT:\tno that's xxx [//] meatballs .\n"), ((111, (14, 18)), '*CHI:\tis that meat ?\n'), ((118, (17, 21)), "*MOT:\tyes that's meat .\n"), ((121, (21, 30)), '*CHI:\tis this [!] &m meatballs ?\n'), ((142, (27, 37)), '*CHI:\tGrandma [?] can make hamburgers ?\n'), ((182, (52, 57)), '*CHI:\twith [/] with the &t toy [/] toy bakin(g) [=? bacon] .\n'), ((909, (22, 30)), '*CHI:\t(..) I want the meatball .\n'), ((944, (8, 12)), '*CHI:\ta duck .\n'), ((951, (49, 53)), '*MOT:\t<did he take> [<] a little [!] bite of the duck ?\n'), ((984, (14, 20)), '*CHI:\tand put pepper on her ?\n'), ((987, (28, 32)), '*CHI:\t<and (.) and> [/] and salt on her ?\n'), ((1048, (52, 56)), '*MOT:\t<you had better be hungry to eat a whole> [>] duck huh ?\n'), ((1343, (9, 12)), '*CHI:\t++ egg [<] [?] .\n'), ((1523, (17, 21)), '*CHI:\the ate the duck alive .\n'), ((1801, (37, 41)), '*CHI:\t&-um [/] &-um the wolf ate the duck .\n'), ((2419, (58, 64)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2428, (46, 52)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2433, (24, 30)), "*MOT:\twhy'd he drop the cookie ?\n"), ((2437, (36, 44)), '*CHI:\t<when he> [/] when he saw the cupcakes ?\n'), ((2441, (48, 55)), '*MOT:\toh because he decided he wanted to have a cupcake instead ?\n'), ((2555, (18, 22)), '*MOT:\tyou got two gums and anything else ?\n'), ((2934, (8, 16)), '*MOT:\ta meatball you dropped on the floor &=laughs .\n'), ((2963, (46, 54)), '*MOT:\t(.) we had to step on the rest of it [= meatball] .\n')]
set([(2414, (30, 34)), (2838, (54, 60)), (98, (18, 25)), (1099, (55, 61)), (1048, (52, 56)), (573, (10, 14)), (2838, (22, 28)), (2160, (32, 36)), (155, (40, 44)), (2140, (65, 70)), (732, (25, 29)), (2844, (16, 22)), (550, (33, 37)), (2390, (38, 46)), (1343, (9, 12)), (944, (8, 12)), (951, (49, 53)), (121, (21, 30)), (2076, (24, 29)), (2838, (33, 39)), (2713, (44, 50)), (111, (14, 18)), (2428, (21, 28)), (1069, (18, 22)), (877, (61, 65)), (2895, (22, 26)), (3407, (22, 26)), (102, (25, 34)), (2057, (25, 30)), (566, (19, 23)), (2437, (36, 44)), (2080, (47, 52)), (142, (27, 37)), (2433, (24, 30)), (2738, (36, 42)), (2419, (28, 36)), (987, (28, 32)), (2891, (18, 24)), (2441, (48, 55)), (1801, (37, 41)), (2539, (21, 24)), (22, (6, 13)), (118, (17, 21)), (1523, (17, 21)), (409, (15, 19)), (562, (17, 21)), (231, (23, 27)), (2891, (29, 35)), (968, (35, 41)), (2419, (58, 64)), (2722, (40, 46)), (2094, (13, 18)), (909, (22, 30)), (25, (6, 13)), (2555, (18, 22)), (2298, (23, 27)), (2428, (46, 52)), (1557, (15, 19)), (2542, (30, 33)), (3393, (32, 36)), (2934, (8, 16)), (807, (25, 29)), (984, (14, 20)), (182, (52, 57)), (2734, (20, 26)), (2517, (16, 20)), (470, (15, 21)), (2548, (25, 28)), (2533, (55, 60))])
[((22, (6, 13)), '*CHI:\tpumpkin .\n'), ((25, (6, 13)), '*MOT:\tpumpkin ?\n'), ((98, (18, 25)), '*CHI:\t(.) is that sausage ?\n'), ((102, (25, 34)), "*MOT:\tno that's xxx [//] meatballs .\n"), ((111, (14, 18)), '*CHI:\tis that meat ?\n'), ((118, (17, 21)), "*MOT:\tyes that's meat .\n"), ((121, (21, 30)), '*CHI:\tis this [!] &m meatballs ?\n'), ((142, (27, 37)), '*CHI:\tGrandma [?] can make hamburgers ?\n'), ((155, (40, 44)), "*MOT:\twhy don't you finish chewing your food so I can understand you .\n"), ((182, (52, 57)), '*CHI:\twith [/] with the &t toy [/] toy bakin(g) [=? bacon] .\n'), ((231, (23, 27)), '*CHI:\tan it got on her food .\n'), ((409, (15, 19)), '*MOT:\teat your food .\n'), ((470, (15, 21)), '*MOT:\tfor your supper ?\n'), ((550, (33, 37)), '*CHI:\tbecause she misses (.) her baby ?\n'), ((562, (17, 21)), "*MOT:\twhat's her baby's name ?\n"), ((566, (19, 23)), '*CHI:\tdoes (.) xxx baby needs his name [?] ?\n'), ((573, (10, 14)), "*MOT:\ther baby's name is Stevie ?\n"), ((732, (25, 29)), '*MOT:\tsit up please your feet .\n'), ((807, (25, 29)), "*MOT:\tyou can't hug that hard Chi .\n"), ((877, (61, 65)), "*CHI:\tI'm gonna sit on your [/] your lap and I'm bringing my food over here .\n"), ((909, (22, 30)), '*CHI:\t(..) I want the meatball .\n'), ((944, (8, 12)), '*CHI:\ta duck .\n'), ((951, (49, 53)), '*MOT:\t<did he take> [<] a little [!] bite of the duck ?\n'), ((968, (35, 41)), '*MOT:\twell why are you eating your supper ?\n'), ((984, (14, 20)), '*CHI:\tand put pepper on her ?\n'), ((987, (28, 32)), '*CHI:\t<and (.) and> [/] and salt on her ?\n'), ((1048, (52, 56)), '*MOT:\t<you had better be hungry to eat a whole> [>] duck huh ?\n'), ((1069, (18, 22)), '*MOT:\tfinish your food .\n'), ((1099, (55, 61)), "*CHI:\tbecause [/] because Anthony's the bad because he shoots [!] people .\n"), ((1343, (9, 12)), '*CHI:\t++ egg [<] [?] .\n'), ((1523, (17, 21)), '*CHI:\the ate the duck alive .\n'), ((1557, (15, 19)), '*MOT:\tput your feet down please .\n'), ((1801, (37, 41)), '*CHI:\t&-um [/] &-um the wolf ate the duck .\n'), ((2057, (25, 30)), "*CHI:\tyeah but he didn't shake my hand when [/] <when I was> [/] when I was up the hill .\n"), ((2076, (24, 29)), "*CHI:\tbecause he didn't shake my hand .\n"), ((2080, (47, 52)), "*CHI:\t(be)cause he didn't come up the hill and shake my hand .\n"), ((2094, (13, 18)), '*CHI:\tthen I shake his hand .\n'), ((2140, (65, 70)), '*MOT:\t(be)cause you went up to him and you asked him if he would shake your hand ?\n'), ((2160, (32, 36)), "*MOT:\twhy don't you (.) get the food in there first ?\n"), ((2298, (23, 27)), "*MOT:\tand what was the baby's name ?\n"), ((2390, (38, 46)), '*MOT:\tmostly (be)cause he wanted more brownies .\n'), ((2414, (30, 34)), '*MOT:\t(be)cause he likes junk food .\n'), ((2419, (28, 36)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2419, (58, 64)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2428, (21, 28)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2428, (46, 52)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2433, (24, 30)), "*MOT:\twhy'd he drop the cookie ?\n"), ((2437, (36, 44)), '*CHI:\t<when he> [/] when he saw the cupcakes ?\n'), ((2441, (48, 55)), '*MOT:\toh because he decided he wanted to have a cupcake instead ?\n'), ((2517, (16, 20)), '*CHI:\tyeah real hard like this .\n'), ((2533, (55, 60)), '*CHI:\tand [/] and the and they dropped all [/] all the candy .\n'), ((2539, (21, 24)), '*CHI:\tand I got some gum .\n'), ((2542, (30, 33)), '*CHI:\tand I got some more [!] gum .\n'), ((2548, (25, 28)), '*CHI:\tI got some (.) two gum .\n'), ((2555, (18, 22)), '*MOT:\tyou got two gums and anything else ?\n'), ((2713, (44, 50)), "*CHI:\t<and [/] and &-uh> [//] and a pretend turtle couldn't get me .\n"), ((2722, (40, 46)), "*MOT:\tand you held on like that and the turtle couldn't get you ?\n"), ((2734, (20, 26)), '*MOT:\twhere was the turtle ?\n'), ((2738, (36, 42)), '*CHI:\the [/] he was way down to the ground .\n'), ((2838, (22, 28)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2838, (33, 39)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2838, (54, 60)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2844, (16, 22)), '*CHI:\tyeah nice turtle (.) things [//] toys .\n'), ((2891, (18, 24)), '*CHI:\t(.) and the turtle [/] turtle is a bum+bum .\n'), ((2891, (29, 35)), '*CHI:\t(.) and the turtle [/] turtle is a bum+bum .\n'), ((2895, (22, 26)), "*MOT:\t(..) how's your baby Stacie ?\n"), ((2934, (8, 16)), '*MOT:\ta meatball you dropped on the floor &=laughs .\n'), ((3393, (32, 36)), "*CHI:\t(..) watch this I'm gonna snap .\n"), ((3407, (22, 26)), '*CHI:\twant to hear me snap ?\n')]
calculating accuracy and recall
correct labels:
set(['sausage', 'cupcakes', 'meat', 'meatballs', 'bacon', 'pepper', 'cupcake', 'gums', 'cookie', 'duck', 'meatball', 'salt', 'egg', 'hamburgers', 'pumpkin'])
predicted labels:
set(['turtle', 'shake', 'hard', 'bacon', 'feet', 'gum', 'duck', 'shoots', 'hamburgers', 'ground', 'sausage', 'cupcakes', 'brownies', 'meatballs', 'snap', 'pumpkin', 'pepper', 'food', 'cupcake', 'cookie', 'supper', 'baby', 'meat', 'salt', 'candy', 'gums', 'meatball', 'egg'])
file:HSLLD/HV1/MT//geomt1.cha
precision: 0.535714285714
recall: 1.0
true positives:['bacon', 'cookie', 'cupcake', 'cupcakes', 'duck', 'egg', 'gums', 'hamburgers', 'meat', 'meatball', 'meatballs', 'pepper', 'pumpkin', 'salt', 'sausage']
false positives: ['baby', 'brownies', 'candy', 'feet', 'food', 'ground', 'gum', 'hard', 'shake', 'shoots', 'snap', 'supper', 'turtle']
false negatives: []
# true pos: 15
# false pos: 13
# false neg: 0
HSLLD/HV1/MT//anamt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
8
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NNS'], 'juice', 18, 23]
juice
juice juice 52
[('so', 'RB'), ('you', 'PRP'), ('want', 'VBP'), ('juice', 'NNS'), ('like', 'IN'), ('that', 'DT')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'cheese', 21, 27]
cheese
cheese cheese 280
[('i', 'NN'), ('like', 'IN'), ('it', 'PRP'), ('with', 'IN'), ('cheese', 'NN')]
['cheese']
('food -> ', [])
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'cheese', 27, 33]
cheese
cheese cheese 280
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('xxx', 'VBN'), ('cheese', 'NNS')]
['cheese']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
cheese
cheese cheese 280
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('any', 'DT'), ('good', 'JJ'), ('cheese', 'NN'), ('look', 'NN')]
['cheese']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
7
descended from food: [['NN'], 'apple', 75, 80]
candidates to check:
7
descended from food: [['NN'], 'apple', 75, 80]
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'juice', 23, 28]
juice
juice juice 52
[('do', 'VB'), ('you', 'PRP'), ('like', 'IN'), ('that', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
descended from food: [['NN'], 'juice', 10, 15]
juice
juice juice 52
[('xxx', 'NN'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'juice', 15, 20]
juice
juice juice 52
[('this', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
7
descended from food: [['NN'], 'milk', 11, 15]
strawberries
strawberries strawberries 96
[('with', 'IN'), ('milk', 'NN'), ('and', 'CC'), ('uh', 'JJ'), ('strawberries', 'NNS')]
['strawberries']
('food -> ', [['strawberries', 'Fruits and Fruit Juices']])
milk
milk milk 46
[('with', 'IN'), ('milk', 'NN'), ('and', 'CC'), ('uh', 'JJ'), ('strawberries', 'NNS')]
['milk']
('food -> ', [['strawberries', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
7
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'food', 26, 30]
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'food', 33, 37]
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
7
candidates to check:
4
candidates to check:
1
descended from food: [['NN'], 'muffin', 14, 20]
muffin
muffin muffin 255
[('eat', 'VB'), ('the', 'DT'), ('muffin', 'NN'), ('then', 'RB')]
['muffin']
('food -> ', [['muffin', 'Baked Products']])
candidates to check:
2
candidates to check:
3
water
water water 18
[('look', 'NN'), ('at', 'IN'), ('this', 'DT'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7ea7200>)
[('it', 'PRP'), ('s', 'VBZ'), ('melting', 'VBG'), ('just', 'RB'), ('from', 'IN'), ('being', 'VBG'), ('on', 'IN'), ('the', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'muffin', 14, 20]
muffin
muffin muffin 255
[('eat', 'VB'), ('the', 'DT'), ('muffin', 'NN'), ('okay', 'NN')]
['muffin']
('food -> ', [['muffin', 'Baked Products']])
candidates to check:
7
descended from food: [['NN'], 'vitamin', 34, 41]
descended from food: [['NN'], 'dinner', 68, 74]
candidates to check:
2
descended from food: [['NNS'], 'popsicles', 13, 22]
candidates to check:
4
descended from food: [['NN'], 'popsicle', 23, 31]
candidates to check:
4
descended from food: [['NN'], 'popsicle', 13, 21]
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'food', 24, 28]
candidates to check:
2
descended from food: [['NN'], 'vitamin', 25, 32]
candidates to check:
5
descended from food: [['NN'], 'vitamin', 30, 37]
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
onions
onions onions 26
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('onions', 'NNS'), ('i', 'VBP'), ('don', 'VBP'), ('t', 'NN'), ('i', 'NN'), ('hate', 'VBP'), ('onions', 'NNS')]
['onions']
('food -> ', [['onions', 'Vegetables and Vegetable Products']])
candidates to check:
3
onions
onions onions 26
[('i', 'JJ'), ('hate', 'VBP'), ('onions', 'NNS')]
['onions']
('food -> ', [['onions', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'popsicle', 17, 25]
candidates to check:
1
descended from food: [['NN'], 'food', 15, 19]
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'popsicle', 15, 23]
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
2
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7eb7f38>)
[('mikey', 'JJ'), ('stop', 'VB'), ('acting', 'VBG'), ('like', 'IN'), ('a', 'DT'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
onions
onions onions 26
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('those', 'DT'), ('onions', 'NNS')]
['onions']
('food -> ', [['onions', 'Vegetables and Vegetable Products']])
candidates to check:
3
candidates to check:
4
candidates to check:
3
onions
onions onions 26
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('onions', 'NNS')]
['onions']
('food -> ', [['onions', 'Vegetables and Vegetable Products']])
candidates to check:
1
onions
onions onions 26
[('it', 'PRP'), ('doesn', 'VBZ'), ('t', 'NNS'), ('have', 'VBP'), ('any', 'DT'), ('onions', 'NNS'), ('mikey', 'NN')]
['onions']
('food -> ', [['onions', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'popsicle', 28, 36]
candidates to check:
4
descended from food: [['NN'], 'popsicle', 37, 45]
candidates to check:
2
candidates to check:
2
candidates to check:
6
descended from food: [['NN'], 'honey', 14, 19]
honey
honey honey 304
[('come', 'VBN'), ('on', 'IN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
descended from food: [['NN'], 'juice', 16, 21]
juice
juice juice 52
[('drink', 'VB'), ('the', 'DT'), ('juice', 'NN'), ('too', 'RB')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
6
descended from food: [['NN'], 'popsicle', 25, 33]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'juice', 57, 62]
juice
juice juice 52
[('tell', 'NN'), ('tell', 'VB'), ('mariana', 'NN'), ('to', 'TO'), ('come', 'VB'), ('in', 'IN'), ('now', 'RB'), ('and', 'CC'), ('drink', 'VB'), ('the', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'juice', 57, 62]
juice
juice juice 52
[('mariana', 'NN'), ('mariana', 'VBZ'), ('come', 'VBN'), ('on', 'IN'), ('and', 'CC'), ('drink', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'juice', 29, 34]
juice
juice juice 52
[('okay', 'NN'), ('mariana', 'NN'), ('drink', 'VBP'), ('the', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
4
muffin
muffin muffin 255
[('and', 'CC'), ('eat', 'VB'), ('your', 'PRP$'), ('muffin', 'NN')]
['muffin']
('food -> ', [['muffin', 'Baked Products']])
candidates to check:
1
candidates to check:
1
descended from food: [['NN'], 'muffin', 8, 14]
muffin
muffin muffin 255
[('a', 'DT'), ('muffin', 'NN')]
['muffin']
('food -> ', [['muffin', 'Baked Products']])
candidates to check:
2
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'juice', 58, 63]
juice
juice juice 52
[('either', 'RB'), ('one', 'CD'), ('as', 'RB'), ('long', 'RB'), ('as', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('it', 'PRP'), ('and', 'CC'), ('drink', 'VB'), ('your', 'PRP$'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
3
candidates to check:
2
descended from food: [['NNS'], 'juice', 31, 36]
juice
juice juice 52
[('would', 'MD'), ('you', 'PRP'), ('like', 'VB'), ('some', 'DT'), ('more', 'RBR'), ('juice', 'NNS')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'popsicle', 48, 56]
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'popsicle', 24, 32]
candidates to check:
6
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'popsicle', 28, 36]
candidates to check:
4
descended from food: [['NN'], 'popsicle', 44, 52]
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
6
candidates to check:
7
descended from food: [['NN'], 'popsicle', 45, 53]
candidates to check:
1
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'juice', 34, 39]
descended from food: [['NN'], 'popsicle', 66, 74]
juice
juice juice 52
[('if', 'IN'), ('it', 'PRP'), ('doesn', 'VBZ'), ('t', 'JJ'), ('hurt', 'NN'), ('with', 'IN'), ('the', 'DT'), ('juice', 'NN'), ('then', 'RB'), ('it', 'PRP'), ('won', 'VBD'), ('t', 'JJ'), ('hurt', 'NN'), ('with', 'IN'), ('a', 'DT'), ('popsicle', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'popsicle', 28, 36]
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'popsicle', 31, 39]
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7e5b7e8>)
[('me', 'PRP'), ('want', 'VBP'), ('the', 'DT'), ('yellow', 'JJ'), ('one', 'NN')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7e659e0>)
[('we', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('any', 'DT'), ('yellow', 'JJ')]
['yellow']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'orange', 6, 12]
pink
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7e66f80>)
[('orange', 'NN'), ('and', 'CC'), ('pink', 'NN'), ('and', 'CC'), ('rose', 'VBD')]
['pink']
('food -> ', [])
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7e65998>)
[('orange', 'NN'), ('and', 'CC'), ('pink', 'NN'), ('and', 'CC'), ('rose', 'VBD')]
['orange']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'juice', 77, 82]
juice
juice juice 52
[('he', 'PRP'), ('says', 'VBZ'), ('he', 'PRP'), ('says', 'VBZ'), ('mikey', 'NN'), ('says', 'VBZ'), ('mikey', 'NN'), ('says', 'VBZ'), ('only', 'RB'), ('this', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
3
candidates to check:
4
descended from food: [['NN'], 'grape', 25, 30]
descended from food: [['NN'], 'orange', 38, 44]
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7e61488>)
[('we', 'PRP'), ('have', 'VBP'), ('a', 'DT'), ('cherry', 'NN'), ('a', 'DT'), ('grape', 'NN'), ('and', 'CC'), ('an', 'DT'), ('orange', 'NN'), ('one', 'CD')]
['orange']
('food -> ', [])
candidates to check:
1
candidates to check:
7
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7e61b90>)
[('i', 'NN'), ('want', 'VBP'), ('the', 'DT'), ('orange', 'NN'), ('one', 'CD')]
['orange']
('food -> ', [])
candidates to check:
3
candidates to check:
1
descended from food: [['NN'], 'grape', 10, 15]
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'grape', 15, 20]
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['NNS'], 'popsicles', 24, 33]
candidates to check:
1
candidates to check:
4
candidates to check:
13
candidates to check:
1
descended from food: [['NNS'], 'popsicles', 23, 32]
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['NNS'], 'popsicles', 36, 45]
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NNS'], 'popsicles', 31, 40]
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['NNS'], 'popsicles', 25, 34]
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'popsicle', 31, 39]
candidates to check:
2
candidates to check:
2
duck
duck duck 84
[('that', 'DT'), ('s', 'VBD'), ('donald', 'JJ'), ('duck', 'NN')]
['duck']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
descended from food: [['NN'], 'honey', 10, 15]
honey
honey honey 304
[('why', 'WRB'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
6
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7e06fc8>)
[('mikey', 'NN'), ('was', 'VBD'), ('the', 'DT'), ('ghost', 'NN'), ('and', 'CC'), ('i', 'NN'), ('was', 'VBD'), ('the', 'DT'), ('baby', 'NN'), ('and', 'CC'), ('carmen', 'NNS'), ('was', 'VBD'), ('the', 'DT'), ('mommy', 'NN')]
['baby']
('food -> ', [])
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
4
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7e03950>)
[('and', 'CC'), ('mikey', 'NN'), ('be', 'VB'), ('the', 'DT'), ('ghost', 'NN'), ('and', 'CC'), ('i', 'NN'), ('be', 'VB'), ('the', 'DT'), ('baby', 'NN'), ('and', 'CC'), ('you', 'PRP'), ('be', 'VB'), ('the', 'DT'), ('mom', 'NN')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
7
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
11
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'popsicle', 9, 17]
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
4
candidates to check:
4
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
9
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
4
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7d902d8>)
[('this', 'DT'), ('mom', 'NN'), ('mine', 'NN'), ('kindergarten', 'NN'), ('is', 'VBZ'), ('yellow', 'JJ')]
['yellow']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7d90758>)
[('it', 'PRP'), ('s', 'VBD'), ('green', 'JJ')]
['green']
('food -> ', [])
candidates to check:
3
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7d99fc8>)
[('green', 'JJ')]
['green']
('food -> ', [])
candidates to check:
3
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7dab3f8>)
[('green', 'JJ')]
['green']
('food -> ', [])
candidates to check:
2
candidates to check:
1
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7dab830>)
[('xxx', 'NN'), ('green', 'NN')]
['green']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7db0050>)
[('and', 'CC'), ('my', 'PRP$'), ('kindergarten', 'NN'), ('is', 'VBZ'), ('yellow', 'JJ')]
['yellow']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'honey', 28, 33]
honey
honey honey 304
[('you', 'PRP'), ('finish', 'VBP'), ('that', 'IN'), ('first', 'JJ'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
duck
duck duck 84
[('that', 'DT'), ('s', 'VBD'), ('donald', 'JJ'), ('duck', 'NN')]
['duck']
('food -> ', [])
duck
duck duck 84
[('that', 'DT'), ('s', 'VBD'), ('donald', 'JJ'), ('duck', 'NN'), ('mom', 'NN')]
['duck']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
8
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
duck
duck duck 84
[('duck', 'NN'), ('tales', 'NNS')]
['duck']
('food -> ', [])
candidates to check:
2
duck
duck duck 84
[('this', 'DT'), ('xxx', 'NN'), ('was', 'VBD'), ('the', 'DT'), ('duck', 'NN'), ('tales', 'NNS')]
['duck']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
4
duck
duck duck 84
[('like', 'IN'), ('the', 'DT'), ('duck', 'NN'), ('tales', 'NNS')]
['duck']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
duck
duck duck 84
[('the', 'DT'), ('duck', 'NN'), ('tales', 'VBZ'), ('don', 'JJ'), ('t', 'NN'), ('got', 'VBD'), ('a', 'DT'), ('dog', 'NN')]
['duck']
('food -> ', [])
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
17
candidates to check:
14
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
7
descended from food: [['NN'], 'honey', 24, 29]
honey
honey honey 304
[('what', 'WP'), ('s', 'VBD'), ('the', 'DT'), ('matter', 'NN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
2
loading solution set
calculating
set([(1481, (41, 49)), (163, (11, 15)), (723, (57, 62)), (850, (66, 74)), (69, (28, 34)), (650, (37, 45)), (1124, (24, 33)), (618, (19, 25)), (1217, (25, 34)), (1026, (77, 82)), (551, (15, 23)), (465, (30, 37)), (47, (21, 27)), (733, (29, 34)), (837, (45, 53)), (401, (19, 24)), (745, (8, 14)), (647, (28, 36)), (661, (16, 21)), (755, (58, 63)), (505, (19, 25)), (510, (17, 23)), (1202, (31, 40)), (915, (31, 39)), (1143, (23, 32)), (1489, (17, 25)), (1486, (17, 25)), (1164, (36, 45)), (163, (26, 38)), (133, (23, 28)), (438, (14, 20)), (865, (28, 36)), (37, (18, 23)), (850, (34, 39)), (792, (24, 32)), (809, (44, 52)), (505, (41, 47)), (137, (10, 15)), (739, (20, 26)), (1550, (9, 17)), (450, (23, 31)), (447, (13, 22)), (1226, (31, 39)), (714, (57, 62)), (462, (25, 32)), (441, (34, 41)), (804, (28, 36)), (608, (25, 31)), (53, (27, 33)), (689, (25, 33)), (390, (14, 20)), (526, (17, 25)), (623, (26, 32)), (763, (31, 36)), (160, (15, 20)), (770, (48, 56)), (453, (13, 21))])
[((37, (18, 23)), '*MOT:\tso you want juice like that (.) ?\n'), ((47, (21, 27)), '*BRO:\tI like it with cheese .\n'), ((53, (27, 33)), "*MOT:\tI don't have (.) xxx cheese .\n"), ((69, (28, 34)), "*MOT:\tI don't have any good cheese look .\n"), ((133, (23, 28)), '*MOT:\tdo you like that juice ?\n'), ((137, (10, 15)), '*CHI:\txxx juice .\n'), ((160, (15, 20)), '*MOT:\tthis (.) juice .\n'), ((163, (11, 15)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((163, (26, 38)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((390, (14, 20)), '*MOT:\teat the muffin then .\n'), ((401, (19, 24)), '*MOT:\tlook at this water .\n'), ((438, (14, 20)), '*MOT:\teat the muffin okay .\n'), ((441, (34, 41)), "*MOT:\thurry up and I'll get you a vitamin (.) after you finish your dinner ?\n"), ((447, (13, 22)), '*BRO:\tI want popsicles .\n'), ((450, (23, 31)), "*MOT:\tthat's right the popsicle too .\n"), ((453, (13, 21)), '*BRO:\twant a popsicle (.) ?\n'), ((462, (25, 32)), "*CHI:\tbut I don't want a vitamin .\n"), ((465, (30, 37)), "*MOT:\tthen you won't eat your vitamin that's no problem Mariana .\n"), ((505, (19, 25)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((505, (41, 47)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((510, (17, 23)), '*BRO:\tI hate [!] onions .\n'), ((526, (17, 25)), '*MOT:\tyou want a popsicle you know what to do .\n'), ((551, (15, 23)), '*BRO:\tI want a popsicle .\n'), ((608, (25, 31)), "*BRO:\tI don't like those onions .\n"), ((618, (19, 25)), "*BRO:\tI don't want onions .\n"), ((623, (26, 32)), "*MOT:\tit doesn't have any onions Mikey .\n"), ((647, (28, 36)), "*MOT:\t&-uh Mikey's having a popsicle .\n"), ((650, (37, 45)), "*MOT:\tmaybe Mariana doesn't want any popsicle (.) .\n"), ((661, (16, 21)), '*MOT:\tdrink the juice too (.) .\n'), ((689, (25, 33)), "*BRO:\tbet it'll melt the popsicle .\n"), ((714, (57, 62)), '*MOT:\ttell [/] tell Mariana to come in now and drink the juice .\n'), ((723, (57, 62)), '*BRO:\tMariana [!] Mariana [!] come on [?] and drink your juice .\n'), ((733, (29, 34)), '*MOT:\tokay Mariana drink the juice .\n'), ((739, (20, 26)), '*MOT:\tand eat your <muffin [?] > [>] .\n'), ((745, (8, 14)), '*CHI:\ta muffin ?\n'), ((755, (58, 63)), '*MOT:\teither one as long as you eat it (.) and drink your juice (.) .\n'), ((763, (31, 36)), '*MOT:\twould you like some more juice ?\n'), ((770, (48, 56)), "*MOT:\tfinish that xxx and then I'll get you the popsicle .\n"), ((792, (24, 32)), '*MOT:\thow can you eat a popsicle then (.) ?\n'), ((804, (28, 36)), "*BRO:\twhen you [//] I eat a popsicle <I don't> [/] I don't +...\n"), ((809, (44, 52)), "*BRO:\tI was eating in the store and I ate a popsicle and I didn't hurt my throat .\n"), ((837, (45, 53)), "*MOT:\tgood lord if you drink you can't eat a popsicle if it is gonna (.) create so much pain .\n"), ((850, (34, 39)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((850, (66, 74)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((865, (28, 36)), "*MOT:\tthen you can't have a popsicle if it's only going to <hurt your> [/] hurt your throat .\n"), ((915, (31, 39)), "*MOT:\tyou're not able to eat a popsicle <so xxx> [>] .\n"), ((1026, (77, 82)), '*CHI:\t<he says> [/] <he says> [//] <Mikey says> [>] [/] Mikey says only this juice .\n'), ((1124, (24, 33)), '*BRO:\tno but there were popsicles in the box .\n'), ((1143, (23, 32)), "*MOT:\tthere're no more popsicles .\n"), ((1164, (36, 45)), '*MOT:\thow can you expect to be more popsicles ?\n'), ((1202, (31, 40)), '*BRO:\tnuhhuh when we get those popsicles (.) those are for the picnic .\n'), ((1217, (25, 34)), '*CHI:\tand I can open the popsicles .\n'), ((1226, (31, 39)), '*CHI:\t<and I> [<] can open the popsicle .\n'), ((1481, (41, 49)), '*MOT:\t<not right now when you finish the popsicle> [>] .\n'), ((1486, (17, 25)), '*BRO:\t<bite your popsicle> [<] .\n'), ((1489, (17, 25)), '*BRO:\tbite your <popsicle Mariana> [>] .\n'), ((1550, (9, 17)), '*BRO:\tmy popsicle melting .\n')]
set([(650, (37, 45)), (273, (33, 37)), (411, (42, 47)), (661, (16, 21)), (1955, (28, 33)), (1202, (31, 40)), (792, (24, 32)), (1315, (10, 15)), (459, (24, 28)), (714, (57, 62)), (1440, (42, 46)), (739, (20, 26)), (441, (34, 41)), (1026, (77, 82)), (526, (17, 25)), (1803, (46, 52)), (163, (11, 15)), (733, (29, 34)), (1845, (6, 11)), (551, (15, 23)), (1041, (38, 44)), (1051, (18, 24)), (850, (34, 39)), (755, (58, 63)), (1235, (24, 28)), (505, (19, 25)), (1009, (24, 30)), (2153, (23, 27)), (1071, (15, 20)), (1041, (25, 30)), (865, (28, 36)), (804, (28, 36)), (623, (26, 32)), (1057, (10, 15)), (137, (10, 15)), (658, (14, 19)), (401, (19, 24)), (1226, (31, 39)), (241, (26, 30)), (1003, (18, 24)), (453, (13, 21)), (689, (25, 33)), (390, (14, 20)), (1842, (6, 11)), (2346, (24, 29)), (618, (19, 25)), (465, (30, 37)), (47, (21, 27)), (101, (75, 80)), (1124, (24, 33)), (723, (57, 62)), (1143, (23, 32)), (2043, (20, 24)), (133, (23, 28)), (438, (14, 20)), (745, (8, 14)), (809, (44, 52)), (2188, (10, 14)), (1550, (9, 17)), (534, (15, 19)), (608, (25, 31)), (1852, (14, 19)), (1835, (12, 17)), (441, (68, 74)), (37, (18, 23)), (2175, (19, 23)), (763, (31, 36)), (160, (15, 20)), (837, (45, 53)), (850, (66, 74)), (69, (28, 34)), (647, (28, 36)), (2040, (20, 24)), (510, (17, 23)), (915, (31, 39)), (568, (31, 35)), (163, (26, 38)), (1018, (6, 12)), (1217, (25, 34)), (2150, (6, 10)), (1411, (44, 48)), (1164, (36, 45)), (93, (75, 80)), (505, (41, 47)), (450, (23, 31)), (447, (13, 22)), (462, (25, 32)), (53, (27, 33)), (1018, (17, 21)), (1873, (29, 35)), (770, (48, 56))])
[((37, (18, 23)), '*MOT:\tso you want juice like that (.) ?\n'), ((47, (21, 27)), '*BRO:\tI like it with cheese .\n'), ((53, (27, 33)), "*MOT:\tI don't have (.) xxx cheese .\n"), ((69, (28, 34)), "*MOT:\tI don't have any good cheese look .\n"), ((93, (75, 80)), '*MOT:\tfor giving me (.) the things I need (.) the sun and the rain and the apple seed .\n'), ((101, (75, 80)), '*BRO:\tfor giving me (.) the things I need (.) the sun and the rain and the apple seed .\n'), ((133, (23, 28)), '*MOT:\tdo you like that juice ?\n'), ((137, (10, 15)), '*CHI:\txxx juice .\n'), ((160, (15, 20)), '*MOT:\tthis (.) juice .\n'), ((163, (11, 15)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((163, (26, 38)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((241, (26, 30)), '*MOT:\tbecause she ate her food .\n'), ((273, (33, 37)), '*MOT:\tyou have_to do is eat your food .\n'), ((390, (14, 20)), '*MOT:\teat the muffin then .\n'), ((401, (19, 24)), '*MOT:\tlook at this water .\n'), ((411, (42, 47)), "*MOT:\tit's melting just from being on the table .\n"), ((438, (14, 20)), '*MOT:\teat the muffin okay .\n'), ((441, (34, 41)), "*MOT:\thurry up and I'll get you a vitamin (.) after you finish your dinner ?\n"), ((441, (68, 74)), "*MOT:\thurry up and I'll get you a vitamin (.) after you finish your dinner ?\n"), ((447, (13, 22)), '*BRO:\tI want popsicles .\n'), ((450, (23, 31)), "*MOT:\tthat's right the popsicle too .\n"), ((453, (13, 21)), '*BRO:\twant a popsicle (.) ?\n'), ((459, (24, 28)), '*BRO:\tthen (.) eat your food !\n'), ((462, (25, 32)), "*CHI:\tbut I don't want a vitamin .\n"), ((465, (30, 37)), "*MOT:\tthen you won't eat your vitamin that's no problem Mariana .\n"), ((505, (19, 25)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((505, (41, 47)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((510, (17, 23)), '*BRO:\tI hate [!] onions .\n'), ((526, (17, 25)), '*MOT:\tyou want a popsicle you know what to do .\n'), ((534, (15, 19)), '*MOT:\teat your food .\n'), ((551, (15, 23)), '*BRO:\tI want a popsicle .\n'), ((568, (31, 35)), '*MOT:\tMikey stop acting like a baby .\n'), ((608, (25, 31)), "*BRO:\tI don't like those onions .\n"), ((618, (19, 25)), "*BRO:\tI don't want onions .\n"), ((623, (26, 32)), "*MOT:\tit doesn't have any onions Mikey .\n"), ((647, (28, 36)), "*MOT:\t&-uh Mikey's having a popsicle .\n"), ((650, (37, 45)), "*MOT:\tmaybe Mariana doesn't want any popsicle (.) .\n"), ((658, (14, 19)), '*MOT:\tcome on honey [?] (.) .\n'), ((661, (16, 21)), '*MOT:\tdrink the juice too (.) .\n'), ((689, (25, 33)), "*BRO:\tbet it'll melt the popsicle .\n"), ((714, (57, 62)), '*MOT:\ttell [/] tell Mariana to come in now and drink the juice .\n'), ((723, (57, 62)), '*BRO:\tMariana [!] Mariana [!] come on [?] and drink your juice .\n'), ((733, (29, 34)), '*MOT:\tokay Mariana drink the juice .\n'), ((739, (20, 26)), '*MOT:\tand eat your <muffin [?] > [>] .\n'), ((745, (8, 14)), '*CHI:\ta muffin ?\n'), ((755, (58, 63)), '*MOT:\teither one as long as you eat it (.) and drink your juice (.) .\n'), ((763, (31, 36)), '*MOT:\twould you like some more juice ?\n'), ((770, (48, 56)), "*MOT:\tfinish that xxx and then I'll get you the popsicle .\n"), ((792, (24, 32)), '*MOT:\thow can you eat a popsicle then (.) ?\n'), ((804, (28, 36)), "*BRO:\twhen you [//] I eat a popsicle <I don't> [/] I don't +...\n"), ((809, (44, 52)), "*BRO:\tI was eating in the store and I ate a popsicle and I didn't hurt my throat .\n"), ((837, (45, 53)), "*MOT:\tgood lord if you drink you can't eat a popsicle if it is gonna (.) create so much pain .\n"), ((850, (34, 39)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((850, (66, 74)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((865, (28, 36)), "*MOT:\tthen you can't have a popsicle if it's only going to <hurt your> [/] hurt your throat .\n"), ((915, (31, 39)), "*MOT:\tyou're not able to eat a popsicle <so xxx> [>] .\n"), ((1003, (18, 24)), '*CHI:\tme want the yellow one .\n'), ((1009, (24, 30)), "*MOT:\twe don't have any yellow .\n"), ((1018, (6, 12)), '*BRO:\torange and pink (.) and rose .\n'), ((1018, (17, 21)), '*BRO:\torange and pink (.) and rose .\n'), ((1026, (77, 82)), '*CHI:\t<he says> [/] <he says> [//] <Mikey says> [>] [/] Mikey says only this juice .\n'), ((1041, (25, 30)), '*MOT:\twe have a cherry a grape and an orange one .\n'), ((1041, (38, 44)), '*MOT:\twe have a cherry a grape and an orange one .\n'), ((1051, (18, 24)), '*CHI:\tI want the <orange one> [>] .\n'), ((1057, (10, 15)), '*BRO:\tthe grape .\n'), ((1071, (15, 20)), "*MOT:\tthat's a grape .\n"), ((1124, (24, 33)), '*BRO:\tno but there were popsicles in the box .\n'), ((1143, (23, 32)), "*MOT:\tthere're no more popsicles .\n"), ((1164, (36, 45)), '*MOT:\thow can you expect to be more popsicles ?\n'), ((1202, (31, 40)), '*BRO:\tnuhhuh when we get those popsicles (.) those are for the picnic .\n'), ((1217, (25, 34)), '*CHI:\tand I can open the popsicles .\n'), ((1226, (31, 39)), '*CHI:\t<and I> [<] can open the popsicle .\n'), ((1235, (24, 28)), "*BRO:\tthat's (.) Donald Duck .\n"), ((1315, (10, 15)), '*MOT:\twhy honey ?\n'), ((1411, (44, 48)), '*CHI:\tMikey was the ghost (.) and I was the baby (.) and Carmen was the mommy .\n'), ((1440, (42, 46)), '*CHI:\tand Mikey be the ghost and I be the baby and you be the mom .\n'), ((1550, (9, 17)), '*BRO:\tmy popsicle melting .\n'), ((1803, (46, 52)), '*CHI:\tthis [///] Mom mine kindergarten (.) is yellow .\n'), ((1835, (12, 17)), "*MOT:\t<it's green> [<] .\n"), ((1842, (6, 11)), '*MOT:\tgreen .\n'), ((1845, (6, 11)), '*CHI:\tgreen ?\n'), ((1852, (14, 19)), '*MOT:\txxx [>] green .\n'), ((1873, (29, 35)), '*CHI:\tand my kindergarten is yellow .\n'), ((1955, (28, 33)), '*MOT:\tyou finish that first honey .\n'), ((2040, (20, 24)), "*BRO:\tthat's Donald_Duck .\n"), ((2043, (20, 24)), "*BRO:\tthat's Donald_Duck <Mom> [>] .\n"), ((2150, (6, 10)), '*MOT:\tDuck_Tales .\n'), ((2153, (23, 27)), '*BRO:\tthis xxx was the Duck_Tales .\n'), ((2175, (19, 23)), '*MOT:\tlike [?] the duck tales .\n'), ((2188, (10, 14)), "*BRO:\tthe duck tales don't got a dog .\n"), ((2346, (24, 29)), "*MOT:\twhat's the matter honey [>] ?\n")]
calculating accuracy and recall
correct labels:
set(['cheese', 'popsicle', 'muffin', 'vitamin', 'popsicles', 'water', 'juice', 'strawberries', 'onions', 'milk'])
predicted labels:
set(['cheese', 'apple', 'muffin', 'yellow', 'honey', 'juice', 'duck', 'table', 'onions', 'popsicles', 'popsicle', 'pink', 'grape', 'milk', 'orange', 'food', 'vitamin', 'water', 'strawberries', 'baby', 'dinner', 'green'])
file:HSLLD/HV1/MT//anamt1.cha
precision: 0.454545454545
recall: 1.0
true positives:['cheese', 'juice', 'milk', 'muffin', 'onions', 'popsicle', 'popsicles', 'strawberries', 'vitamin', 'water']
false positives: ['apple', 'baby', 'dinner', 'duck', 'food', 'grape', 'green', 'honey', 'orange', 'pink', 'table', 'yellow']
false negatives: []
# true pos: 10
# false pos: 12
# false neg: 0
HSLLD/HV1/MT//conmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
descended from food: [['NN'], 'juice', 16, 21]
juice
juice juice 52
[('m', 'NN'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
8
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'juice', 11, 16]
descended from food: [['NN'], 'milk', 6, 10]
juice
juice juice 52
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
milk
milk milk 46
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['milk']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
11
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'juice', 11, 16]
descended from food: [['NN'], 'milk', 6, 10]
juice
juice juice 52
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('zzz', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
milk
milk milk 46
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('zzz', 'NN')]
['milk']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
8
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'juice', 11, 16]
descended from food: [['NN'], 'milk', 6, 10]
juice
juice juice 52
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
milk
milk milk 46
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['milk']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
27
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'juice', 15, 20]
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'juice', 15, 20]
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'juice', 15, 20]
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'juice', 15, 20]
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'juice', 15, 20]
descended from food: [['NN'], 'milk', 6, 10]
juice
juice juice 52
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
milk
milk milk 46
[('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN'), ('juice', 'NN'), ('milk', 'NN')]
['milk']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
3
candidates to check:
3
juice
juice juice 52
[('no', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'supper', 24, 30]
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
9
candidates to check:
4
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
7
candidates to check:
3
candidates to check:
7
candidates to check:
7
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'milk', 11, 15]
milk
milk milk 46
[('more', 'RBR'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
3
milk
milk milk 46
[('say', 'NN'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('more', 'JJR'), ('milk', 'NN'), ('please', 'NN')]
['milk']
('food -> ', [])
candidates to check:
3
milk
milk milk 46
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('more', 'JJR'), ('milk', 'NN'), ('please', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
6
water
water water 18
[('xxx', 'NN'), ('just', 'RB'), ('a', 'DT'), ('quick', 'JJ'), ('glass', 'NN'), ('of', 'IN'), ('water', 'NN'), ('and', 'CC'), ('we', 'PRP'), ('re', 'VBP'), ('gon', 'VB'), ('na', 'TO'), ('go', 'VB'), ('back', 'RB')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
5
descended from food: [['NN'], 'coffee', 18, 24]
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'coffee', 20, 26]
descended from food: [['NN'], 'mix', 27, 30]
candidates to check:
3
candidates to check:
10
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7cb0908>)
[('there', 'RB'), ('s', 'JJ'), ('um', 'JJ'), ('fruit', 'NN'), ('punch', 'NN'), ('in', 'IN'), ('the', 'DT'), ('yellow', 'JJ'), ('jug', 'NN'), ('10', 'CD')]
['yellow']
('food -> ', [])
candidates to check:
2
descended from food: [['NN'], 'milk', 13, 17]
milk
milk milk 46
[('little', 'JJ'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['NN'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN'), ('mama', 'NN')]
['milk']
('food -> ', [])
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
descended from food: [['NNS'], 'spaghetti', 6, 15]
spaghetti
spaghetti spaghetti 100
[('spaghetti', 'NNS'), ('on', 'IN'), ('his', 'PRP$'), ('shirt', 'NN')]
['spaghetti']
('food -> ', [['spaghetti', 'Meals, Entrees, and Side Dishes']])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7c4bd40>)
[('come', 'VB'), ('on', 'IN'), ('you', 'PRP'), ('guys', 'VBP'), ('don', 'JJ'), ('t', 'JJ'), ('fool', 'NN'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
peaches
peaches peaches 72
[('behind', 'IN'), ('the', 'DT'), ('peaches', 'NNS')]
['peaches']
('food -> ', [['peaches', 'Fruits and Fruit Juices']])
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
7
descended from food: [['NN'], 'milk', 46, 50]
milk
milk milk 46
[('xxx', 'NN'), ('because', 'IN'), ('you', 'PRP'), ('drank', 'VBP'), ('all', 'DT'), ('of', 'IN'), ('that', 'DT'), ('milk', 'NN'), ('so', 'RB'), ('fast', 'RB'), ('that', 'IN'), ('s', 'NN'), ('probably', 'RB'), ('why', 'WRB')]
['milk']
('food -> ', [])
candidates to check:
1
milk
milk milk 46
[('you', 'PRP'), ('drank', 'VBP'), ('all', 'PDT'), ('that', 'DT'), ('milk', 'NN'), ('up', 'RP')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'diet', 22, 26]
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
8
descended from food: [['NN'], 'food', 22, 26]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'tomato', 14, 20]
candidates to check:
2
cucumber
cucumber cucumber 12
[('cucumber', 'NN')]
['cucumber']
('food -> ', [])
candidates to check:
1
candidates to check:
1
lettuce
lettuce lettuce 16
[('some', 'DT'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
3
lettuce
lettuce lettuce 16
[('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
2
lettuce
lettuce lettuce 16
[('i', 'NNS'), ('like', 'VBP'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
4
candidates to check:
9
descended from food: [['NNS'], 'tomatoes', 42, 50]
lettuce
lettuce lettuce 16
[('there', 'RB'), ('s', 'VBZ'), ('a', 'DT'), ('whole', 'JJ'), ('bowl', 'NN'), ('with', 'IN'), ('two', 'CD'), ('tomatoes', 'NNS'), ('and', 'CC'), ('a', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
tomatoes
tomatoes tomatoes 213
[('there', 'RB'), ('s', 'VBZ'), ('a', 'DT'), ('whole', 'JJ'), ('bowl', 'NN'), ('with', 'IN'), ('two', 'CD'), ('tomatoes', 'NNS'), ('and', 'CC'), ('a', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('lettuce', 'NN')]
['tomatoes']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products'], ['tomatoes', 'Vegetables and Vegetable Products']])
candidates to check:
8
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
lettuce
lettuce lettuce 16
[('conner', 'NN'), ('do', 'VBP'), ('you', 'PRP'), ('want', 'VB'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
2
descended from food: [['NNS'], 'tomatoes', 22, 30]
tomatoes
tomatoes tomatoes 213
[('and', 'CC'), ('do', 'VB'), ('you', 'PRP'), ('want', 'VB'), ('tomatoes', 'NNS'), ('too', 'RB')]
['tomatoes']
('food -> ', [['tomatoes', 'Vegetables and Vegetable Products']])
candidates to check:
1
lettuce
lettuce lettuce 16
[('no', 'DT'), ('just', 'RB'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'dressing', 28, 36]
dressing
dressing dressing 169
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('any', 'DT'), ('diet', 'JJ'), ('dressing', 'NN'), ('for', 'IN'), ('you', 'PRP'), ('may', 'MD')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
1
candidates to check:
9
descended from food: [['NN'], 'salad', 47, 52]
dressing
dressing dressing 169
[('oh', 'IN'), ('you', 'PRP'), ('can', 'MD'), ('t', 'VB'), ('have', 'VB'), ('dressing', 'VBG'), ('on', 'IN'), ('your', 'PRP$'), ('salad', 'NN')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
1
dressing
dressing dressing 169
[('put', 'VB'), ('your', 'PRP$'), ('finger', 'NN'), ('dressing', 'VBG')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
4
descended from food: [['NN'], 'diet', 52, 56]
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'dressing', 29, 37]
dressing
dressing dressing 169
[('oh', 'IN'), ('you', 'PRP'), ('didn', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('the', 'DT'), ('dressing', 'NN')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
2
candidates to check:
3
lettuce
lettuce lettuce 16
[('you', 'PRP'), ('just', 'RB'), ('want', 'VBP'), ('the', 'DT'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'salad', 11, 16]
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'salad', 11, 16]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
lettuce
lettuce lettuce 16
[('xxx', 'NN'), ('lettuce', 'NN'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
lettuce
lettuce lettuce 16
[('i', 'NN'), ('want', 'VBP'), ('two', 'CD'), ('more', 'JJR'), ('the', 'DT'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
2
candidates to check:
1
lettuce
lettuce lettuce 16
[('you', 'PRP'), ('like', 'IN'), ('the', 'DT'), ('lettuce', 'NN')]
['lettuce']
('food -> ', [['lettuce', 'Vegetables and Vegetable Products']])
candidates to check:
2
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7c307a0>)
[('you', 'PRP'), ('like', 'VBP'), ('a', 'DT'), ('little', 'JJ'), ('bunny', 'JJ'), ('rabbit', 'NN')]
['rabbit']
('food -> ', [])
candidates to check:
1
candidates to check:
2
dressing
dressing dressing 169
[('you', 'PRP'), ('have', 'VBP'), ('plenty', 'NN'), ('of', 'IN'), ('dressing', 'VBG'), ('there', 'EX'), ('jake', 'NN')]
['dressing']
('food -> ', [['dressing', 'Fats and Oils']])
candidates to check:
2
candidates to check:
1
candidates to check:
3
fat
fat fat 900
[('i', 'NN'), ('m', 'VBP'), ('a', 'DT'), ('fat', 'JJ'), ('cow', 'NN')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
6
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
6
descended from food: [['NN'], 'diet', 63, 67]
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
8
descended from food: [['NN'], 'lunch', 42, 47]
descended from food: [['NN'], 'salad', 108, 113]
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
8
candidates to check:
14
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
7
candidates to check:
7
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'lunch', 38, 43]
candidates to check:
2
candidates to check:
2
loading solution set
calculating
set([(51, (63, 68)), (889, (19, 26)), (819, (29, 37)), (48, (6, 16)), (722, (9, 19)), (686, (66, 73)), (51, (47, 51)), (686, (42, 50)), (44, (6, 16)), (390, (13, 17)), (51, (69, 73)), (51, (6, 10)), (36, (6, 10)), (48, (17, 21)), (719, (14, 21)), (39, (6, 16)), (394, (6, 10)), (51, (58, 62)), (578, (18, 24)), (368, (18, 24)), (654, (14, 20)), (51, (52, 57)), (291, (22, 26)), (769, (26, 34)), (80, (24, 30)), (441, (6, 15)), (51, (36, 40)), (658, (6, 14)), (44, (17, 21)), (828, (30, 37)), (901, (25, 33)), (51, (30, 35)), (51, (15, 20)), (486, (17, 24)), (869, (18, 25)), (30, (16, 21)), (288, (26, 30)), (671, (6, 13)), (760, (47, 52)), (479, (25, 34)), (527, (26, 30)), (51, (25, 29)), (675, (13, 20)), (665, (11, 21)), (745, (23, 36)), (346, (32, 37)), (869, (10, 17)), (760, (24, 32)), (847, (32, 42)), (51, (41, 46)), (281, (11, 15)), (878, (26, 33)), (521, (46, 50)), (26, (6, 10)), (62, (10, 15)), (715, (22, 30)), (39, (17, 21)), (668, (11, 18)), (708, (25, 32))])
[((26, (6, 10)), '*CHI:\tmilk [!] .\n'), ((30, (16, 21)), '*JAK:\t<&m> [//] juice .\n'), ((36, (6, 10)), '*FAT:\tmilk .\n'), ((39, (6, 16)), '*MOT:\tmilk juice milk .\n'), ((39, (17, 21)), '*MOT:\tmilk juice milk .\n'), ((44, (6, 16)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (17, 21)), '*CHI:\tmilk juice milk zzz .\n'), ((48, (6, 16)), '*FAT:\tmilk juice milk .\n'), ((48, (17, 21)), '*FAT:\tmilk juice milk .\n'), ((51, (6, 10)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (15, 20)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (25, 29)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (30, 35)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (36, 40)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (41, 46)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (47, 51)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (52, 57)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (58, 62)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (63, 68)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (69, 73)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((62, (10, 15)), '*JAK:\t<no juice> [<] .\n'), ((80, (24, 30)), '*MOT:\twell you eat some supper now before I give you more okay (11.) ?\n'), ((281, (11, 15)), '*CHI:\tmore milk (.) .\n'), ((288, (26, 30)), '*MOT:\tsay can I have more milk please .\n'), ((291, (22, 26)), '*CHI:\tcan I have more milk please .\n'), ((346, (32, 37)), "*SIS:\txxx just a quick glass of water and we're gonna go back .\n"), ((368, (18, 24)), "*MOT:\tthat's that coffee I made by mistake .\n"), ((390, (13, 17)), '*CHI:\tlittle milk ?\n'), ((394, (6, 10)), '*CHI:\tmilk Mama ?\n'), ((441, (6, 15)), '*MOT:\tspaghetti on his shirt .\n'), ((479, (25, 34)), "*SIS:\tyou didn't buy xxx diet soda ?\n"), ((486, (17, 24)), '*MOT:\tbehind the peaches .\n'), ((521, (46, 50)), "*MOT:\t<xxx> [<] because you drank all of that milk so fast that's probably why .\n"), ((527, (26, 30)), '*JAK:\tyou drank all that <milk> [>] up .\n'), ((578, (18, 24)), '*MOT:\there have a tomato Jake .\n'), ((654, (14, 20)), '*MOT:\tanother tomato ?\n'), ((658, (6, 14)), '*MOT:\tcucumber ?\n'), ((665, (11, 21)), '*CHI:\tmore cucum(ber) .\n'), ((668, (11, 18)), '*MOT:\tsome lettuce .\n'), ((671, (6, 13)), '*MOT:\tlettuce ?\n'), ((675, (13, 20)), '*JAK:\tI like lettuce !\n'), ((686, (42, 50)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((686, (66, 73)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((708, (25, 32)), '*MOT:\tConner do you want lettuce ?\n'), ((715, (22, 30)), '*MOT:\tand do you want tomatoes too ?\n'), ((719, (14, 21)), '*CHI:\tno just lettuce .\n'), ((722, (9, 19)), '*CHI:\tno (to)matoes !\n'), ((745, (23, 36)), "*MOT:\tI don't have any diet dressing for you May .\n"), ((760, (24, 32)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((760, (47, 52)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((769, (26, 34)), '*SIS:\tput your finger [?] dressing .\n'), ((819, (29, 37)), "*MOT:\toh you didn't want the dressing ?\n"), ((828, (30, 37)), '*MOT:\t<you just> [<] want the lettuce ?\n'), ((847, (32, 42)), '*JAK:\twith salad with some more (to)matoes .\n'), ((869, (10, 17)), '*CHI:\txxx lettuce lettuce .\n'), ((869, (18, 25)), '*CHI:\txxx lettuce lettuce .\n'), ((878, (26, 33)), '*JAK:\tI want two more the lettuce .\n'), ((889, (19, 26)), '*MOT:\tyou like the lettuce ?\n'), ((901, (25, 33)), '*MOT:\tyou have plenty of dressing there Jake .\n')]
set([(51, (63, 68)), (558, (22, 26)), (48, (6, 10)), (39, (11, 16)), (44, (11, 16)), (51, (36, 40)), (686, (66, 73)), (786, (52, 56)), (51, (47, 51)), (686, (42, 50)), (377, (20, 26)), (527, (26, 30)), (893, (30, 36)), (390, (13, 17)), (51, (69, 73)), (51, (6, 10)), (36, (6, 10)), (48, (17, 21)), (719, (14, 21)), (760, (47, 52)), (394, (6, 10)), (51, (58, 62)), (889, (19, 26)), (368, (18, 24)), (654, (14, 20)), (819, (29, 37)), (51, (52, 57)), (291, (22, 26)), (637, (22, 26)), (80, (24, 30)), (847, (11, 16)), (915, (12, 15)), (828, (30, 37)), (441, (6, 15)), (708, (25, 32)), (658, (6, 14)), (26, (6, 10)), (769, (26, 34)), (1189, (38, 43)), (901, (25, 33)), (51, (30, 35)), (51, (15, 20)), (486, (17, 24)), (384, (38, 44)), (30, (16, 21)), (288, (26, 30)), (745, (28, 36)), (521, (46, 50)), (946, (42, 47)), (671, (6, 13)), (44, (6, 10)), (39, (6, 10)), (51, (25, 29)), (675, (13, 20)), (841, (11, 16)), (346, (32, 37)), (869, (10, 17)), (760, (24, 32)), (51, (41, 46)), (281, (11, 15)), (878, (26, 33)), (455, (41, 46)), (869, (18, 25)), (934, (63, 67)), (48, (11, 16)), (44, (17, 21)), (62, (10, 15)), (715, (22, 30)), (39, (17, 21)), (668, (11, 18)), (377, (27, 30)), (946, (108, 113))])
[((26, (6, 10)), '*CHI:\tmilk [!] .\n'), ((30, (16, 21)), '*JAK:\t<&m> [//] juice .\n'), ((36, (6, 10)), '*FAT:\tmilk .\n'), ((39, (6, 10)), '*MOT:\tmilk juice milk .\n'), ((39, (11, 16)), '*MOT:\tmilk juice milk .\n'), ((39, (17, 21)), '*MOT:\tmilk juice milk .\n'), ((44, (6, 10)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (11, 16)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (17, 21)), '*CHI:\tmilk juice milk zzz .\n'), ((48, (6, 10)), '*FAT:\tmilk juice milk .\n'), ((48, (11, 16)), '*FAT:\tmilk juice milk .\n'), ((48, (17, 21)), '*FAT:\tmilk juice milk .\n'), ((51, (6, 10)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (15, 20)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (25, 29)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (30, 35)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (36, 40)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (41, 46)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (47, 51)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (52, 57)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (58, 62)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (63, 68)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (69, 73)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((62, (10, 15)), '*JAK:\t<no juice> [<] .\n'), ((80, (24, 30)), '*MOT:\twell you eat some supper now before I give you more okay (11.) ?\n'), ((281, (11, 15)), '*CHI:\tmore milk (.) .\n'), ((288, (26, 30)), '*MOT:\tsay can I have more milk please .\n'), ((291, (22, 26)), '*CHI:\tcan I have more milk please .\n'), ((346, (32, 37)), "*SIS:\txxx just a quick glass of water and we're gonna go back .\n"), ((368, (18, 24)), "*MOT:\tthat's that coffee I made by mistake .\n"), ((377, (20, 26)), '*SIS:\tthis dumb [?] coffee mix .\n'), ((377, (27, 30)), '*SIS:\tthis dumb [?] coffee mix .\n'), ((384, (38, 44)), "*MOT:\tthere's &-um fruit punch in the yellow jug (10.) .\n"), ((390, (13, 17)), '*CHI:\tlittle milk ?\n'), ((394, (6, 10)), '*CHI:\tmilk Mama ?\n'), ((441, (6, 15)), '*MOT:\tspaghetti on his shirt .\n'), ((455, (41, 46)), "*MOT:\tcome on you guys don't fool at the table !\n"), ((486, (17, 24)), '*MOT:\tbehind the peaches .\n'), ((521, (46, 50)), "*MOT:\t<xxx> [<] because you drank all of that milk so fast that's probably why .\n"), ((527, (26, 30)), '*JAK:\tyou drank all that <milk> [>] up .\n'), ((558, (22, 26)), "*MOT:\tthat's on May's diet .\n"), ((637, (22, 26)), "*MOT:\tdon't talk with food in your mouth .\n"), ((654, (14, 20)), '*MOT:\tanother tomato ?\n'), ((658, (6, 14)), '*MOT:\tcucumber ?\n'), ((668, (11, 18)), '*MOT:\tsome lettuce .\n'), ((671, (6, 13)), '*MOT:\tlettuce ?\n'), ((675, (13, 20)), '*JAK:\tI like lettuce !\n'), ((686, (42, 50)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((686, (66, 73)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((708, (25, 32)), '*MOT:\tConner do you want lettuce ?\n'), ((715, (22, 30)), '*MOT:\tand do you want tomatoes too ?\n'), ((719, (14, 21)), '*CHI:\tno just lettuce .\n'), ((745, (28, 36)), "*MOT:\tI don't have any diet dressing for you May .\n"), ((760, (24, 32)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((760, (47, 52)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((769, (26, 34)), '*SIS:\tput your finger [?] dressing .\n'), ((786, (52, 56)), '*SIS:\tthere was one piece of paper in here with the diet .\n'), ((819, (29, 37)), "*MOT:\toh you didn't want the dressing ?\n"), ((828, (30, 37)), '*MOT:\t<you just> [<] want the lettuce ?\n'), ((841, (11, 16)), '*JAK:\twith salad .\n'), ((847, (11, 16)), '*JAK:\twith salad with some more (to)matoes .\n'), ((869, (10, 17)), '*CHI:\txxx lettuce lettuce .\n'), ((869, (18, 25)), '*CHI:\txxx lettuce lettuce .\n'), ((878, (26, 33)), '*JAK:\tI want two more the lettuce .\n'), ((889, (19, 26)), '*MOT:\tyou like the lettuce ?\n'), ((893, (30, 36)), '*MOT:\tyou like a little bunny rabbit ?\n'), ((901, (25, 33)), '*MOT:\tyou have plenty of dressing there Jake .\n'), ((915, (12, 15)), "*CHI:\tI'm a fat cow !\n"), ((934, (63, 67)), '*SIS:\tdo you know where the other part of the &-um paper of my diet is ?\n'), ((946, (42, 47)), '*SIS:\tyeah I had that little piece xxx my lunch and when I got_to my drink and when I got_to the end of the salad I was full .\n'), ((946, (108, 113)), '*SIS:\tyeah I had that little piece xxx my lunch and when I got_to my drink and when I got_to the end of the salad I was full .\n'), ((1189, (38, 43)), "*MOT:\twell then I'm gonna save it for lunch tomorrow .\n")]
calculating accuracy and recall
correct labels:
set(['diet soda', 'peaches', 'coffee', 'salad', 'lettuce', 'diet dressing', '(to)matoes', 'cucum(ber)', 'water', 'juice', 'cucumber', 'tomato', 'supper', 'dressing', 'milk juice', 'spaghetti', 'milk', 'tomatoes'])
predicted labels:
set(['tomato', 'peaches', 'coffee', 'lunch', 'salad', 'mix', 'food', 'dressing', 'fat', 'yellow', 'water', 'juice', 'cucumber', 'diet', 'rabbit', 'supper', 'table', 'lettuce', 'spaghetti', 'milk', 'tomatoes'])
file:HSLLD/HV1/MT//conmt1.cha
precision: 0.619047619048
recall: 0.722222222222
true positives:['coffee', 'cucumber', 'dressing', 'juice', 'lettuce', 'milk', 'peaches', 'salad', 'spaghetti', 'supper', 'tomato', 'tomatoes', 'water']
false positives: ['diet', 'fat', 'food', 'lunch', 'mix', 'rabbit', 'table', 'yellow']
false negatives: ['(to)matoes', 'cucum(ber)', 'diet dressing', 'diet soda', 'milk juice']
# true pos: 13
# false pos: 8
# false neg: 5
HSLLD/HV1/MT//sopmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//sopmt1.cha
HSLLD/HV1/MT//ethmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
3
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7b28518>)
[('xxx', 'RB'), ('yellow', 'JJ'), ('and', 'CC'), ('bl', 'JJ'), ('ue', 'JJ'), ('blue', 'NN'), ('and', 'CC'), ('green', 'JJ'), ('and', 'CC'), ('red', 'JJ')]
['yellow']
('food -> ', [])
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7b285f0>)
[('xxx', 'RB'), ('yellow', 'JJ'), ('and', 'CC'), ('bl', 'JJ'), ('ue', 'JJ'), ('blue', 'NN'), ('and', 'CC'), ('green', 'JJ'), ('and', 'CC'), ('red', 'JJ')]
['green']
('food -> ', [])
blue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7b284d0>)
[('xxx', 'RB'), ('yellow', 'JJ'), ('and', 'CC'), ('bl', 'JJ'), ('ue', 'JJ'), ('blue', 'NN'), ('and', 'CC'), ('green', 'JJ'), ('and', 'CC'), ('red', 'JJ')]
['blue']
('food -> ', [])
candidates to check:
6
descended from food: [['NN'], 'food', 71, 75]
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'meat', 63, 67]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7b3ba28>)
[('you', 'PRP'), ('may', 'MD'), ('wh', 'VB'), ('ile', 'NN'), ('just', 'RB'), ('while', 'IN'), ('i', 'NNS'), ('s', 'VBP'), ('cut', 'VBN'), ('up', 'RP'), ('the', 'DT'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
8
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
descended from food: [['NNS'], 'biscuits', 19, 27]
biscuits
biscuits biscuits 263
[('xxx', 'NN'), ('and', 'CC'), ('um', 'JJ'), ('biscuits', 'NNS')]
['biscuits']
('food -> ', [['biscuits', 'Baked Products']])
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'strawberry', 18, 28]
descended from food: [['NN'], 'chocolate', 32, 41]
strawberry
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7adfab8>)
[('do', 'VBP'), ('you', 'PRP'), ('want', 'VB'), ('strawberry', 'NN'), ('or', 'CC'), ('chocolate', 'NN')]
['strawberry']
('food -> ', [])
chocolate
chocolate chocolate 598
[('do', 'VBP'), ('you', 'PRP'), ('want', 'VB'), ('strawberry', 'NN'), ('or', 'CC'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
2
descended from food: [['NN'], 'chocolate', 6, 15]
chocolate
chocolate chocolate 598
[('chocolate', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
4
descended from food: [['NN'], 'chicken', 19, 26]
chicken
chicken chicken 234
[('so', 'RB'), ('how', 'WRB'), ('s', 'JJ'), ('the', 'DT'), ('chicken', 'NN'), ('look', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
11
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'chicken', 10, 17]
chicken
chicken chicken 234
[('the', 'DT'), ('chicken', 'NN'), ('is', 'VBZ'), ('too', 'RB')]
['chicken']
('food -> ', [])
candidates to check:
3
descended from food: [['NN'], 'chicken', 10, 17]
chicken
chicken chicken 234
[('the', 'DT'), ('chicken', 'NN'), ('is', 'VBZ'), ('should', 'MD'), ('be', 'VB'), ('pretty', 'JJ'), ('cool', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
4
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
8
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
7
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'chicken', 25, 32]
chicken
chicken chicken 234
[('i', 'JJ'), ('m', 'NN'), ('afraid', 'VBD'), ('the', 'DT'), ('chicken', 'NN'), ('is', 'VBZ'), ('uh', 'JJ'), ('not', 'RB'), ('as', 'RB'), ('well', 'RB'), ('cooked', 'VBN'), ('as', 'IN'), ('as', 'RB'), ('usual', 'JJ')]
['chicken']
('food -> ', [])
candidates to check:
2
descended from food: [['NNS'], 'biscuits', 59, 67]
biscuits
biscuits biscuits 263
[('well', 'RB'), ('it', 'PRP'), ('s', 'VBZ'), ('it', 'PRP'), ('s', 'VBZ'), ('probably', 'RB'), ('better', 'RBR'), ('cooked', 'VBN'), ('than', 'IN'), ('the', 'DT'), ('biscuits', 'NNS'), ('though', 'IN')]
['biscuits']
('food -> ', [['biscuits', 'Baked Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
barbecue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b79fcbd8>)
[('well', 'RB'), ('i', 'RB'), ('told', 'VBD'), ('nathaniel', 'CC'), ('that', 'IN'), ('going', 'VBG'), ('out', 'IN'), ('to', 'TO'), ('barbecue', 'VB'), ('saves', 'NNS'), ('more', 'JJR'), ('of', 'IN'), ('a', 'DT'), ('symbolic', 'JJ'), ('cash', 'NN'), ('than', 'IN'), ('after', 'IN'), ('it', 'PRP'), ('was', 'VBD'), ('started', 'VBN'), ('barbecuing', 'VBG'), ('season', 'NN')]
['barbecue']
('food -> ', [])
candidates to check:
4
candidates to check:
2
descended from food: [['NN'], 'chicken', 16, 23]
chicken
chicken chicken 234
[('how', 'WRB'), ('s', 'VBZ'), ('the', 'DT'), ('chicken', 'NN'), ('munchkin', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
honey
honey honey 304
[('do', 'VBP'), ('you', 'PRP'), ('have', 'VB'), ('to', 'TO'), ('use', 'VB'), ('the', 'DT'), ('bath', 'NN'), ('room', 'NN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['NNS'], 'biscuits', 32, 40]
biscuits
biscuits biscuits 263
[('the', 'DT'), ('bi', 'NN'), ('s', 'NN'), ('cuits', 'VBZ'), ('the', 'DT'), ('biscuits', 'NNS'), ('aren', 'VBP'), ('t', 'NN'), ('burned', 'VBD')]
['biscuits']
('food -> ', [['biscuits', 'Baked Products']])
candidates to check:
7
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
4
brown
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b79edb00>)
[('well', 'RB'), ('it', 'PRP'), ('s', 'VBZ'), ('just', 'RB'), ('that', 'DT'), ('light', 'JJ'), ('golden', 'JJ'), ('brown', 'NN'), ('across', 'IN'), ('the', 'DT'), ('top', 'NN')]
['brown']
('food -> ', [])
candidates to check:
6
brown
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b79f05f0>)
[('that', 'DT'), ('s', 'VBZ'), ('not', 'RB'), ('light', 'JJ'), ('golden', 'JJ'), ('brown', 'NN')]
['brown']
('food -> ', [])
candidates to check:
7
brown
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b79f8440>)
[('it', 'PRP'), ('s', 'VBZ'), ('medium', 'JJ'), ('golden', 'JJ'), ('brown', 'NN')]
['brown']
('food -> ', [])
medium
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b79fa488>)
[('it', 'PRP'), ('s', 'VBZ'), ('medium', 'JJ'), ('golden', 'JJ'), ('brown', 'NN')]
['medium']
('food -> ', [])
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'food', 60, 64]
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
chicken
chicken chicken 234
[('oh', 'IN'), ('the', 'DT'), ('chicken', 'NN'), ('s', 'NN'), ('xxx', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
12
descended from food: [['NN'], 'barbecue', 24, 32]
barbecue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b799a320>)
[('usually', 'RB'), ('the', 'DT'), ('first', 'JJ'), ('barbecue', 'NN'), ('of', 'IN'), ('the', 'DT'), ('year', 'NN'), ('the', 'DT'), ('chicken', 'NN'), ('isn', 'NN'), ('t', 'NN'), ('cooked', 'VBD'), ('right', 'JJ'), ('it', 'PRP'), ('takes', 'VBZ'), ('a', 'DT'), ('couple', 'NN'), ('times', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('warm', 'NN'), ('weather', 'NN')]
['barbecue']
('food -> ', [])
chicken
chicken chicken 234
[('usually', 'RB'), ('the', 'DT'), ('first', 'JJ'), ('barbecue', 'NN'), ('of', 'IN'), ('the', 'DT'), ('year', 'NN'), ('the', 'DT'), ('chicken', 'NN'), ('isn', 'NN'), ('t', 'NN'), ('cooked', 'VBD'), ('right', 'JJ'), ('it', 'PRP'), ('takes', 'VBZ'), ('a', 'DT'), ('couple', 'NN'), ('times', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('warm', 'NN'), ('weather', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
4
descended from food: [['NN'], 'barbecue', 81, 89]
barbecue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b799b0e0>)
[('in', 'IN'), ('the', 'DT'), ('warm', 'JJ'), ('weather', 'NN'), ('you', 'PRP'), ('can', 'MD'), ('still', 'RB'), ('cook', 'VB'), ('it', 'PRP'), ('and', 'CC'), ('just', 'RB'), ('stay', 'VB'), ('out', 'RB'), ('there', 'RB'), ('with', 'IN'), ('the', 'DT'), ('barbecue', 'NN')]
['barbecue']
('food -> ', [])
candidates to check:
2
candidates to check:
8
sucker
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b799b638>)
[('in', 'IN'), ('the', 'DT'), ('cold', 'JJ'), ('weather', 'NN'), ('you', 'PRP'), ('say', 'VBP'), ('let', 'VB'), ('s', 'JJ'), ('cook', 'VB'), ('this', 'DT'), ('sucker', 'NN'), ('fast', 'NN')]
['sucker']
('food -> ', [])
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
6
candidates to check:
6
candidates to check:
5
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
4
candidates to check:
5
candidates to check:
5
candidates to check:
6
candidates to check:
4
descended from food: [['NN'], 'dinner', 30, 36]
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7954cf8>)
[('no', 'DT'), ('toys', 'NN'), ('at', 'IN'), ('our', 'PRP$'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
2
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7954ef0>)
[('no', 'DT'), ('toys', 'NN'), ('at', 'IN'), ('our', 'PRP$'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b79bb320>)
[('i', 'NN'), ('didn', 'NN'), ('t', 'VBP'), ('play', 'VB'), ('any', 'DT'), ('toy', 'NN'), ('at', 'IN'), ('our', 'PRP$'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
7
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
12
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
honey
honey honey 304
[('we', 'PRP'), ('gave', 'VBD'), ('her', 'PRP'), ('her', 'PRP$'), ('birthday', 'JJ'), ('present', 'JJ'), ('honey', 'NN'), ('in', 'IN'), ('august', 'NN'), ('when', 'WRB'), ('she', 'PRP'), ('had', 'VBD'), ('her', 'PRP'), ('birthday', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
9
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
7
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
7
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
11
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
9
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
8
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
10
candidates to check:
8
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'chicken', 28, 35]
chicken
chicken chicken 234
[('want', 'VB'), ('another', 'DT'), ('piece', 'NN'), ('of', 'IN'), ('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
descended from food: [['NNS'], 'biscuits', 25, 33]
descended from food: [['NNS'], 'biscuits', 25, 33]
biscuits
biscuits biscuits 263
[('i', 'NNS'), ('like', 'VBP'), ('to', 'TO'), ('wrap', 'VB'), ('the', 'DT'), ('biscuits', 'NNS'), ('and', 'CC'), ('have', 'VBP'), ('chicken', 'VBN'), ('and', 'CC'), ('biscuits', 'NNS')]
['biscuits']
('food -> ', [['biscuits', 'Baked Products']])
chicken
chicken chicken 234
[('i', 'NNS'), ('like', 'VBP'), ('to', 'TO'), ('wrap', 'VB'), ('the', 'DT'), ('biscuits', 'NNS'), ('and', 'CC'), ('have', 'VBP'), ('chicken', 'VBN'), ('and', 'CC'), ('biscuits', 'NNS')]
['chicken']
('food -> ', [['biscuits', 'Baked Products']])
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'dinner', 20, 26]
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
2
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7924098>)
[('i', 'NN'), ('think', 'VBP'), ('it', 'PRP'), ('s', 'VBZ'), ('the', 'DT'), ('fan', 'NN'), ('uh', 'NN'), ('that', 'IN'), ('you', 'PRP'), ('must', 'MD'), ('hear', 'VB')]
['fan']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
9
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
8
candidates to check:
7
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
7
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
9
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78dd908>)
[('in', 'IN'), ('your', 'PRP$'), ('cabin', 'NN'), ('in', 'IN'), ('the', 'DT'), ('wood', 'NN'), ('a', 'DT'), ('little', 'JJ'), ('man', 'NN'), ('by', 'IN'), ('a', 'DT'), ('window', 'NN'), ('stood', 'VBD'), ('saw', 'VBD'), ('a', 'DT'), ('rabbit', 'NN'), ('hopping', 'NN'), ('by', 'IN'), ('quiet', 'JJ'), ('as', 'IN'), ('can', 'MD'), ('be', 'VB')]
['rabbit']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
3
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78e1560>)
[('the', 'DT'), ('rabbit', 'NN')]
['rabbit']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
6
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78e1cf8>)
[('before', 'IN'), ('the', 'DT'), ('hunter', 'NN'), ('shoot', 'NN'), ('me', 'PRP'), ('dead', 'JJ'), ('little', 'JJ'), ('rabbit', 'NN'), ('come', 'VB'), ('inside', 'IN'), ('safely', 'RB'), ('you', 'PRP'), ('will', 'MD'), ('hide', 'VB')]
['rabbit']
('food -> ', [])
candidates to check:
1
candidates to check:
6
candidates to check:
2
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78e1488>)
[('rabbit', 'NN')]
['rabbit']
('food -> ', [])
candidates to check:
6
candidates to check:
2
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78d87a0>)
[('rabbit', 'NN')]
['rabbit']
('food -> ', [])
candidates to check:
1
candidates to check:
4
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78f1290>)
[('saw', 'VBD'), ('a', 'DT'), ('rabbit', 'NN'), ('hopping', 'NN'), ('by', 'IN')]
['rabbit']
('food -> ', [])
candidates to check:
4
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78f1680>)
[('saw', 'VBD'), ('a', 'DT'), ('rabbit', 'NN'), ('hopping', 'NN'), ('by', 'IN')]
['rabbit']
('food -> ', [])
candidates to check:
4
candidates to check:
1
candidates to check:
2
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78dc440>)
[('the', 'DT'), ('rabbit', 'NN'), ('said', 'VBD'), ('before', 'IN'), ('the', 'DT'), ('hunter', 'NN'), ('shoots', 'VB'), ('me', 'PRP'), ('dead', 'JJ')]
['rabbit']
('food -> ', [])
shoots
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78f1680>)
[('the', 'DT'), ('rabbit', 'NN'), ('said', 'VBD'), ('before', 'IN'), ('the', 'DT'), ('hunter', 'NN'), ('shoots', 'VB'), ('me', 'PRP'), ('dead', 'JJ')]
['shoots']
('food -> ', [])
candidates to check:
2
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78f1ab8>)
[('little', 'JJ'), ('rabbit', 'NN'), ('come', 'VB'), ('inside', 'IN')]
['rabbit']
('food -> ', [])
candidates to check:
5
shoots
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78f1d88>)
[('hunter', 'NN'), ('shoots', 'NNS'), ('me', 'PRP'), ('dead', 'JJ')]
['shoots']
('food -> ', [])
candidates to check:
2
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78e1440>)
[('little', 'JJ'), ('rabbit', 'NN'), ('come', 'VB'), ('inside', 'IN')]
['rabbit']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
3
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78f8200>)
[('the', 'DT'), ('rabbit', 'NN'), ('s', 'JJ'), ('hopping', 'NN'), ('by', 'IN'), ('safely', 'RB'), ('you', 'PRP'), ('will', 'MD'), ('hide', 'VB')]
['rabbit']
('food -> ', [])
candidates to check:
3
candidates to check:
1
candidates to check:
7
candidates to check:
1
honey
honey honey 304
[('i', 'NN'), ('learned', 'VBD'), ('it', 'PRP'), ('from', 'IN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
honey
honey honey 304
[('that', 'DT'), ('was', 'VBD'), ('a', 'DT'), ('nice', 'JJ'), ('one', 'CD'), ('of', 'IN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
8
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
12
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
3
candidates to check:
8
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
1
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b788c128>)
[('i', 'NN'), ('ll', 'VBP'), ('turn', 'VBP'), ('the', 'DT'), ('fan', 'NN'), ('back', 'RB'), ('on', 'IN')]
['fan']
('food -> ', [])
candidates to check:
2
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b788c518>)
[('but', 'CC'), ('we', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('need', 'VBP'), ('the', 'DT'), ('fan', 'NN')]
['fan']
('food -> ', [])
candidates to check:
3
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b788c950>)
[('it', 'PRP'), ('s', 'VBZ'), ('just', 'RB'), ('nice', 'JJ'), ('to', 'TO'), ('to', 'TO'), ('have', 'VB'), ('the', 'DT'), ('fan', 'NN'), ('on', 'IN'), ('low', 'JJ')]
['fan']
('food -> ', [])
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
5
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b789cab8>)
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('come', 'VB'), ('back', 'RB'), ('to', 'TO'), ('the', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
6
candidates to check:
1
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b789cf38>)
[('oh', 'UH'), ('that', 'DT'), ('s', 'VBP'), ('why', 'WRB'), ('you', 'PRP'), ('wanted', 'VBD'), ('the', 'DT'), ('fan', 'NN'), ('on', 'IN')]
['fan']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
6
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b788d290>)
[('i', 'JJ'), ('mean', 'VBP'), ('if', 'IN'), ('i', 'NNS'), ('have', 'VBP'), ('to', 'TO'), ('sit', 'VB'), ('and', 'CC'), ('smoke', 'VB'), ('in', 'IN'), ('the', 'DT'), ('kitchen', 'NN'), ('might', 'MD'), ('as', 'RB'), ('well', 'RB'), ('turn', 'IN'), ('the', 'DT'), ('overhead', 'JJ'), ('fan', 'NN'), ('on', 'IN')]
['fan']
('food -> ', [])
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
8
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7896cf8>)
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('toys', 'NNS'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN'), ('munchkin', 'NN')]
['table']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b78995f0>)
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('toys', 'NNS'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN'), ('munchkin', 'NN')]
['table']
('food -> ', [])
candidates to check:
1
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7899b00>)
[('if', 'IN'), ('you', 'PRP'), ('can', 'MD'), ('be', 'VB'), ('nathaniel', 'VBN'), ('the', 'DT'), ('boy', 'NN'), ('you', 'PRP'), ('can', 'MD'), ('sit', 'VB'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
9
descended from food: [['NN'], 'dinner', 11, 17]
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'dinner', 108, 114]
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
6
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
8
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'dinner', 24, 30]
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
cake
cake cake 412
[('i', 'NN'), ('think', 'VBP'), ('maybe', 'RB'), ('we', 'PRP'), ('should', 'MD'), ('celebrate', 'VB'), ('brook', 'NN'), ('s', 'NN'), ('birthday', 'NN'), ('today', 'NN'), ('even', 'RB'), ('though', 'IN'), ('we', 'PRP'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('a', 'DT'), ('cake', 'NN')]
['cake']
('food -> ', [['cake', 'Baked Products']])
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
7
candidates to check:
3
candidates to check:
4
eggs
eggs eggs 131
[('make', 'VB'), ('a', 'DT'), ('cake', 'NN'), ('with', 'IN'), ('eggs', 'NNS')]
['eggs']
('food -> ', [['eggs', 'Dairy and Egg Products']])
cake
cake cake 412
[('make', 'VB'), ('a', 'DT'), ('cake', 'NN'), ('with', 'IN'), ('eggs', 'NNS')]
['cake']
('food -> ', [['eggs', 'Dairy and Egg Products'], ['cake', 'Baked Products']])
candidates to check:
3
candidates to check:
5
eggs
eggs eggs 131
[('need', 'NN'), ('eggs', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('a', 'DT'), ('cake', 'NN')]
['eggs']
('food -> ', [['eggs', 'Dairy and Egg Products']])
cake
cake cake 412
[('need', 'NN'), ('eggs', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('a', 'DT'), ('cake', 'NN')]
['cake']
('food -> ', [['eggs', 'Dairy and Egg Products'], ['cake', 'Baked Products']])
candidates to check:
9
candidates to check:
2
candidates to check:
2
candidates to check:
8
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
8
honey
honey honey 304
[('what', 'WP'), ('is', 'VBZ'), ('it', 'PRP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
descended from food: [['NNS'], 'eggs', 30, 34]
eggs
eggs eggs 131
[('well', 'RB'), ('do', 'VBP'), ('we', 'PRP'), ('have', 'VB'), ('any', 'DT'), ('eggs', 'NNS')]
['eggs']
('food -> ', [['eggs', 'Dairy and Egg Products']])
candidates to check:
1
candidates to check:
4
honey
honey honey 304
[('honey', 'NN'), ('we', 'PRP'), ('don', 'VBP'), ('t', 'RB'), ('have', 'VBP'), ('time', 'NN'), ('to', 'TO'), ('make', 'VB'), ('a', 'DT'), ('cake', 'NN'), ('tonight', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
cake
cake cake 412
[('honey', 'NN'), ('we', 'PRP'), ('don', 'VBP'), ('t', 'RB'), ('have', 'VBP'), ('time', 'NN'), ('to', 'TO'), ('make', 'VB'), ('a', 'DT'), ('cake', 'NN'), ('tonight', 'NN')]
['cake']
('food -> ', [['honey', 'Sweets'], ['cake', 'Baked Products']])
candidates to check:
3
candidates to check:
7
cake
cake cake 412
[('so', 'RB'), ('brook', 'JJ'), ('doesn', 'NN'), ('t', 'NN'), ('eat', 'NN'), ('cake', 'NN')]
['cake']
('food -> ', [['cake', 'Baked Products']])
candidates to check:
3
candidates to check:
4
descended from food: [['NN'], 'food', 38, 42]
candidates to check:
2
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b784e830>)
[('the', 'DT'), ('rabbit', 'NN'), ('s', 'JJ'), ('foot', 'NN')]
['rabbit']
('food -> ', [])
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'orange', 26, 32]
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b784ed40>)
[('i', 'NN'), ('just', 'RB'), ('got', 'VBD'), ('him', 'PRP'), ('that', 'IN'), ('orange', 'NN'), ('one', 'CD')]
['orange']
('food -> ', [])
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
7
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'food', 18, 22]
candidates to check:
3
candidates to check:
5
candidates to check:
2
white fish
white fish white fish 119
[('white', 'JJ'), ('fish', 'JJ'), ('ocean', 'NN'), ('white', 'JJ'), ('fish', 'JJ'), ('flavor', 'NN')]
['white', 'fish']
('food -> ', [['white fish', 'Finfish and Shellfish Products']])
fish
fish fish 305
[('white', 'JJ'), ('fish', 'JJ'), ('ocean', 'NN'), ('white', 'JJ'), ('fish', 'JJ'), ('flavor', 'NN')]
['fish']
('food -> ', [['white fish', 'Finfish and Shellfish Products'], ['fish', 'Finfish and Shellfish Products']])
candidates to check:
2
candidates to check:
7
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
9
candidates to check:
9
candidates to check:
3
candidates to check:
10
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
7
candidates to check:
10
candidates to check:
2
candidates to check:
1
candidates to check:
10
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
5
honey
honey honey 304
[('what', 'WP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
descended from food: [['NN'], 'dinner', 23, 29]
candidates to check:
5
candidates to check:
1
descended from food: [['NN'], 'chicken', 26, 33]
chicken
chicken chicken 234
[('think', 'NN'), ('that', 'IN'), ('s', 'VBZ'), ('enough', 'JJ'), ('chicken', 'NN'), ('for', 'IN'), ('him', 'PRP')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
honey
honey honey 304
[('and', 'CC'), ('could', 'MD'), ('you', 'PRP'), ('sit', 'VB'), ('put', 'VB'), ('your', 'PRP$'), ('fishing', 'NN'), ('rod', 'VB'), ('down', 'RP'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
11
descended from food: [['NN'], 'gum', 6, 9]
descended from food: [['NN'], 'gum', 6, 9]
candidates to check:
8
descended from food: [['NN'], 'gum', 28, 31]
descended from food: [['NN'], 'gum', 28, 31]
candidates to check:
5
candidates to check:
2
candidates to check:
10
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'dinner', 11, 17]
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'milk', 14, 18]
milk
milk milk 46
[('is', 'VBZ'), ('your', 'PRP$'), ('milk', 'NN'), ('finished', 'VBN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
loading solution set
calculating
set([(317, (10, 17)), (2568, (27, 31)), (2568, (12, 16)), (2716, (6, 14)), (2707, (7, 15)), (2988, (15, 23)), (750, (13, 20)), (168, (6, 15)), (2732, (6, 16)), (150, (32, 37)), (425, (16, 23)), (2349, (58, 63)), (2559, (13, 17)), (2988, (6, 14)), (1504, (55, 63)), (775, (53, 60)), (309, (10, 17)), (584, (32, 40)), (2376, (56, 61)), (2537, (91, 95)), (2637, (30, 34)), (137, (19, 27)), (171, (19, 26)), (2991, (32, 40)), (2559, (23, 27)), (393, (59, 67)), (161, (6, 11)), (3082, (14, 18)), (164, (18, 28)), (2897, (26, 33)), (2654, (27, 31)), (2732, (23, 33)), (1504, (43, 50)), (1504, (25, 33)), (33, (63, 67)), (1092, (30, 35)), (2644, (41, 45)), (1464, (28, 35)), (387, (25, 32)), (164, (32, 41))])
[((33, (63, 67)), '*MOT:\tyou may <wh(ile)> [//] just while I <&s> [//] cut up the meat .\n'), ((137, (19, 27)), '*MOT:\txxx and &-um biscuits .\n'), ((150, (32, 37)), '*FAT:\t&-uh (.) do you want some Quick ?\n'), ((161, (6, 11)), '*CHI:\tQuick .\n'), ((164, (18, 28)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((164, (32, 41)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((168, (6, 15)), '*CHI:\tchocolate .\n'), ((171, (19, 26)), "*MOT:\tso how's the chicken look ?\n"), ((309, (10, 17)), '*CHI:\tthe chicken is too ?\n'), ((317, (10, 17)), '*MOT:\tthe chicken is [//] should be pretty cool .\n'), ((387, (25, 32)), "*FAT:\tI'm afraid the (.) chicken is &-uh (.) not as well cooked as [/] as usual .\n"), ((393, (59, 67)), "*MOT:\twell <it's> [/] it's probably better cooked than the biscuits though .\n"), ((425, (16, 23)), "*FAT:\thow's the chicken Munchkin ?\n"), ((584, (32, 40)), "*FAT:\t<the bi(s)cuits> [//] the biscuits aren't burned .\n"), ((750, (13, 20)), "*MOT:\toh the chicken's xxx .\n"), ((775, (53, 60)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((1092, (30, 35)), '*FAT:\t(a)re you drinking your Quick ?\n'), ((1464, (28, 35)), '*MOT:\twant another piece of chicken ?\n'), ((1504, (25, 33)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (43, 50)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (55, 63)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((2349, (58, 63)), '*FAT:\twell teacher I want you to make sure you drink your Quick and I want you to make sure you finish your dinner .\n'), ((2376, (56, 61)), '*FAT:\they teach make sure you &-uh finish drinking your Quick .\n'), ((2537, (91, 95)), "*MOT:\tI think maybe we should celebrate Brook's birthday today even though we don't have a cake .\n"), ((2559, (13, 17)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2559, (23, 27)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2568, (12, 16)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2568, (27, 31)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2637, (30, 34)), '*CHI:\twell (.) do we have any eggs ?\n'), ((2644, (41, 45)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2654, (27, 31)), "*MOT:\tso Brook doesn't eat cake .\n"), ((2707, (7, 15)), "*CHI:\t<McDonald's> [>] ?\n"), ((2716, (6, 14)), "*CHI:\tMcDonald's ?\n"), ((2732, (6, 16)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2732, (23, 33)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2897, (26, 33)), "*MOT:\tthink that's enough chicken for him ?\n"), ((2988, (6, 14)), '*CHI:\tgum drop gum drop .\n'), ((2988, (15, 23)), '*CHI:\tgum drop gum drop .\n'), ((2991, (32, 40)), '*CHI:\tnot by the hair of my gum gum drop .\n'), ((3082, (14, 18)), '*MOT:\tis your milk finished ?\n')]
set([(2568, (27, 31)), (20, (71, 75)), (1829, (6, 12)), (784, (81, 89)), (1527, (20, 26)), (1920, (10, 16)), (1940, (24, 29)), (2256, (35, 40)), (410, (46, 54)), (1504, (55, 63)), (775, (53, 60)), (1873, (13, 19)), (309, (10, 17)), (2988, (6, 9)), (2991, (28, 31)), (2682, (26, 32)), (393, (59, 67)), (3082, (14, 18)), (2654, (27, 31)), (1504, (43, 50)), (2644, (41, 45)), (15, (33, 37)), (2211, (87, 90)), (2164, (28, 31)), (715, (60, 64)), (168, (6, 15)), (1792, (10, 16)), (2887, (23, 29)), (1943, (29, 34)), (425, (16, 23)), (2559, (13, 17)), (2192, (34, 39)), (2861, (11, 16)), (584, (32, 40)), (1171, (39, 44)), (171, (19, 26)), (978, (30, 36)), (1838, (6, 12)), (1845, (12, 18)), (1504, (25, 33)), (2349, (108, 114)), (2559, (23, 27)), (15, (42, 47)), (2278, (57, 62)), (2568, (12, 16)), (617, (30, 35)), (513, (41, 46)), (1004, (21, 26)), (2660, (38, 42)), (2290, (11, 17)), (3060, (11, 17)), (620, (25, 30)), (2200, (35, 38)), (2720, (18, 22)), (2537, (91, 95)), (2633, (17, 22)), (164, (18, 28)), (2732, (23, 33)), (1814, (49, 55)), (2167, (40, 43)), (775, (24, 32)), (1776, (77, 83)), (2161, (20, 23)), (1464, (28, 35)), (164, (32, 41)), (2269, (35, 40)), (317, (10, 17)), (1864, (40, 46)), (2644, (6, 11)), (2732, (6, 16)), (750, (13, 20)), (15, (10, 16)), (1018, (35, 40)), (612, (39, 44)), (2975, (56, 61)), (1011, (21, 26)), (1596, (23, 26)), (1864, (10, 16)), (620, (11, 17)), (2637, (30, 34)), (137, (19, 27)), (1849, (12, 18)), (794, (50, 56)), (2478, (24, 30)), (2897, (26, 33)), (2670, (10, 16)), (1876, (13, 19)), (1869, (13, 19)), (33, (63, 67)), (387, (25, 32))])
[((15, (10, 16)), '*CHI:\txxx yellow and bl(ue) [//] blue and green and red .\n'), ((15, (33, 37)), '*CHI:\txxx yellow and bl(ue) [//] blue and green and red .\n'), ((15, (42, 47)), '*CHI:\txxx yellow and bl(ue) [//] blue and green and red .\n'), ((20, (71, 75)), "*MOT:\talright please [?] color something while you're waiting for your food ?\n"), ((33, (63, 67)), '*MOT:\tyou may <wh(ile)> [//] just while I <&s> [//] cut up the meat .\n'), ((137, (19, 27)), '*MOT:\txxx and &-um biscuits .\n'), ((164, (18, 28)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((164, (32, 41)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((168, (6, 15)), '*CHI:\tchocolate .\n'), ((171, (19, 26)), "*MOT:\tso how's the chicken look ?\n"), ((309, (10, 17)), '*CHI:\tthe chicken is too ?\n'), ((317, (10, 17)), '*MOT:\tthe chicken is [//] should be pretty cool .\n'), ((387, (25, 32)), "*FAT:\tI'm afraid the (.) chicken is &-uh (.) not as well cooked as [/] as usual .\n"), ((393, (59, 67)), "*MOT:\twell <it's> [/] it's probably better cooked than the biscuits though .\n"), ((410, (46, 54)), '*FAT:\twell I told Nathaniel that going out to barbecue saves more of a symbolic cash than after it was started barbecuing season .\n'), ((425, (16, 23)), "*FAT:\thow's the chicken Munchkin ?\n"), ((513, (41, 46)), '*MOT:\tdo you have_to use the bath+room , Honey ?\n'), ((584, (32, 40)), "*FAT:\t<the bi(s)cuits> [//] the biscuits aren't burned .\n"), ((612, (39, 44)), "*MOT:\twell it's just that light golden brown across the top (.) .\n"), ((617, (30, 35)), "*MOT:\tthat's not light golden brown (.) .\n"), ((620, (11, 17)), "*MOT:\tit's medium golden brown .\n"), ((620, (25, 30)), "*MOT:\tit's medium golden brown .\n"), ((715, (60, 64)), '*MOT:\tif you have_to go to the bath+room come back and have food to eat after that .\n'), ((750, (13, 20)), "*MOT:\toh the chicken's xxx .\n"), ((775, (24, 32)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((775, (53, 60)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((784, (81, 89)), '*FAT:\tin the warm weather you can still cook it and just stay out there with the barbecue .\n'), ((794, (50, 56)), "*FAT:\tin the cold weather you say let's cook this sucker fast .\n"), ((978, (30, 36)), "*MOT:\tI'll wait (un)til after dinner then .\n"), ((1004, (21, 26)), '*FAT:\tno toys at our table .\n'), ((1011, (21, 26)), '*FAT:\tno toys at our table .\n'), ((1018, (35, 40)), "*CHI:\tI didn't play any toy at our table .\n"), ((1171, (39, 44)), '*MOT:\twe gave her her birthday present Honey in August when she had her birthday .\n'), ((1464, (28, 35)), '*MOT:\twant another piece of chicken ?\n'), ((1504, (25, 33)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (43, 50)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (55, 63)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1527, (20, 26)), '*FAT:\tI want to eat dinner .\n'), ((1596, (23, 26)), "*MOT:\tI think it's the fan &-uh that you must hear +/.\n"), ((1776, (77, 83)), '*CHI:\tin your cabin in the wood (.) a little man by a window stood (.) saw a rabbit hopping by (.) quiet as can be .\n'), ((1792, (10, 16)), '*CHI:\tthe rabbit [///] .\n'), ((1814, (49, 55)), '*CHI:\tbefore the hunter shoot me dead (.) little rabbit come inside (.) safely you will hide .\n'), ((1829, (6, 12)), '*CHI:\trabbit +...\n'), ((1838, (6, 12)), '*MOT:\trabbit +...\n'), ((1845, (12, 18)), '*CHI:\tsaw a rabbit hopping by +...\n'), ((1849, (12, 18)), '*MOT:\tsaw a rabbit hopping by +...\n'), ((1864, (10, 16)), '*CHI:\tthe rabbit said before the hunter shoots me dead .\n'), ((1864, (40, 46)), '*CHI:\tthe rabbit said before the hunter shoots me dead .\n'), ((1869, (13, 19)), '*CHI:\tlittle rabbit come inside +...\n'), ((1873, (13, 19)), '*MOT:\thunter shoots me dead .\n'), ((1876, (13, 19)), '*MOT:\tlittle rabbit come inside +...\n'), ((1920, (10, 16)), "*CHI:\tthe rabbit's hopping by safely you will hide !\n"), ((1940, (24, 29)), '*CHI:\tI learned it from Honey [?] .\n'), ((1943, (29, 34)), '*MOT:\tthat was a nice one of Honey .\n'), ((2161, (20, 23)), "*FAT:\tI'll turn the fan back on .\n"), ((2164, (28, 31)), "*MOT:\tbut we don't need the fan .\n"), ((2167, (40, 43)), "*FAT:\tit's just nice to [/] to have the fan on low .\n"), ((2192, (34, 39)), "*FAT:\tI'm gonna come <back to the table> [>] .\n"), ((2200, (35, 38)), "*MOT:\toh that's why you wanted the fan on .\n"), ((2211, (87, 90)), '*FAT:\tI mean if I have_to sit and smoke in the kitchen might as well turn the overhead fan on .\n'), ((2256, (35, 40)), "*FAT:\tI don't want any toys at the table Munchkin .\n"), ((2269, (35, 40)), "*FAT:\tI don't want any toys at the table Munchkin .\n"), ((2278, (57, 62)), '*FAT:\tif you can be Nathaniel the boy you can sit at the table .\n'), ((2290, (11, 17)), "*MOT:\tit's dinner time not play time .\n"), ((2349, (108, 114)), '*FAT:\twell teacher I want you to make sure you drink your Quick and I want you to make sure you finish your dinner .\n'), ((2478, (24, 30)), '*MOT:\twhen he comes for dinner .\n'), ((2537, (91, 95)), "*MOT:\tI think maybe we should celebrate Brook's birthday today even though we don't have a cake .\n"), ((2559, (13, 17)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2559, (23, 27)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2568, (12, 16)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2568, (27, 31)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2633, (17, 22)), '*MOT:\twhat is it Honey ?\n'), ((2637, (30, 34)), '*CHI:\twell (.) do we have any eggs ?\n'), ((2644, (6, 11)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2644, (41, 45)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2654, (27, 31)), "*MOT:\tso Brook doesn't eat cake .\n"), ((2660, (38, 42)), '*MOT:\tI think (.) I have a can of cat food I bought for Brook and I have that present that I got him ?\n'), ((2670, (10, 16)), "*MOT:\tthe rabbit's foot .\n"), ((2682, (26, 32)), '*MOT:\tI just got him that orange one .\n'), ((2720, (18, 22)), "*MOT:\tno it's cat food .\n"), ((2732, (6, 16)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2732, (23, 33)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2861, (11, 16)), '*MOT:\twhat Honey ?\n'), ((2887, (23, 29)), "*FAT:\twe can put Bro's dinner away and he can have it when he gets back .\n"), ((2897, (26, 33)), "*MOT:\tthink that's enough chicken for him ?\n"), ((2975, (56, 61)), '*FAT:\tand could you sit [///] put your fishing rod down Honey .\n'), ((2988, (6, 9)), '*CHI:\tgum drop gum drop .\n'), ((2991, (28, 31)), '*CHI:\tnot by the hair of my gum gum drop .\n'), ((3060, (11, 17)), '*MOT:\tthis dinner was something [!] .\n'), ((3082, (14, 18)), '*MOT:\tis your milk finished ?\n')]
calculating accuracy and recall
correct labels:
set(['meat', 'mcdonald', 'gum drop', 'eggs', 'chocolate', 'strawberry', 'cake', 'quick', 'chicken', 'biscuits', 'milk', 'white fish'])
predicted labels:
set(['yellow', 'honey', 'barbecue', 'table', 'shoots', 'chicken', 'blue', 'milk', 'white fish', 'orange', 'brown', 'medium', 'food', 'sucker', 'eggs', 'chocolate', 'fan', 'rabbit', 'meat', 'gum', 'strawberry', 'dinner', 'green', 'cake', 'biscuits'])
file:HSLLD/HV1/MT//ethmt1.cha
precision: 0.36
recall: 0.75
true positives:['biscuits', 'cake', 'chicken', 'chocolate', 'eggs', 'meat', 'milk', 'strawberry', 'white fish']
false positives: ['barbecue', 'blue', 'brown', 'dinner', 'fan', 'food', 'green', 'gum', 'honey', 'medium', 'orange', 'rabbit', 'shoots', 'sucker', 'table', 'yellow']
false negatives: ['gum drop', 'mcdonald', 'quick']
# true pos: 9
# false pos: 16
# false neg: 3
HSLLD/HV1/MT//brtmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
8
descended from food: [['NN'], 'food', 25, 29]
candidates to check:
5
descended from food: [['NN'], 'food', 25, 29]
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'food', 49, 53]
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
6
candidates to check:
5
candidates to check:
3
candidates to check:
4
descended from food: [['NN'], 'tonic', 45, 50]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'food', 28, 32]
candidates to check:
2
candidates to check:
4
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'meat', 16, 20]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7b411b8>)
[('want', 'VB'), ('some', 'DT'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
3
candidates to check:
2
descended from food: [['NN'], 'meat', 6, 10]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7b41128>)
[('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
3
descended from food: [['NN'], 'meat', 6, 10]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7b41488>)
[('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
loading solution set
calculating
set([(240, (6, 10)), (230, (16, 20)), (237, (6, 10))])
[((230, (16, 20)), '*CHI:\twant some meat .\n'), ((237, (6, 10)), '*CHI:\tmeat .\n'), ((240, (6, 10)), '*MOT:\tmeat ?\n')]
set([(240, (6, 10)), (181, (28, 32)), (104, (45, 50)), (32, (49, 53)), (230, (16, 20)), (15, (25, 29)), (18, (25, 29)), (237, (6, 10))])
[((15, (25, 29)), '*MOT:\t<thank you for our food amen> [>] .\n'), ((18, (25, 29)), '*CHI:\t<thank you for our food amen>[<] .\n'), ((32, (49, 53)), '*CHI:\tGod is good God is great thank him for our food .\n'), ((104, (45, 50)), "*CHI:\t<I can't get the> [//] I can't get the tonic .\n"), ((181, (28, 32)), '*MOT:\tyeah eat some of your food then you can have some more to drink .\n'), ((230, (16, 20)), '*CHI:\twant some meat .\n'), ((237, (6, 10)), '*CHI:\tmeat .\n'), ((240, (6, 10)), '*MOT:\tmeat ?\n')]
calculating accuracy and recall
correct labels:
set(['meat'])
predicted labels:
set(['food', 'tonic', 'meat'])
file:HSLLD/HV1/MT//brtmt1.cha
precision: 0.333333333333
recall: 1.0
true positives:['meat']
false positives: ['food', 'tonic']
false negatives: []
# true pos: 1
# false pos: 2
# false neg: 0
HSLLD/HV1/MT//aprmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
8
descended from food: [['NN'], 'food', 32, 36]
candidates to check:
8
descended from food: [['NN'], 'food', 32, 36]
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7790ea8>)
[('get', 'VB'), ('you', 'PRP'), ('going', 'VBG'), ('on', 'IN'), ('the', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
3
corn
corn corn 419
[('you', 'PRP'), ('want', 'VBP'), ('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NNS'], 'potatoes', 6, 14]
potatoes
potatoes potatoes 62
[('potatoes', 'NNS'), ('there', 'RB')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
7
descended from food: [['NNS'], 'potatoes', 28, 36]
potatoes
potatoes potatoes 62
[('thank', 'NN'), ('i', 'NN'), ('like', 'IN'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
7
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
5
descended from food: [['NN'], 'food', 23, 27]
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'milk', 21, 25]
milk
milk milk 46
[('we', 'PRP'), ('got', 'VBD'), ('koolaid', 'VBN'), ('milk', 'NN'), ('and', 'CC'), ('water', 'NN')]
['milk']
('food -> ', [])
water
water water 18
[('we', 'PRP'), ('got', 'VBD'), ('koolaid', 'VBN'), ('milk', 'NN'), ('and', 'CC'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
9
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
9
candidates to check:
7
candidates to check:
5
candidates to check:
2
candidates to check:
2
descended from food: [['NNS'], 'potatoes', 23, 31]
potatoes
potatoes potatoes 62
[('eat', 'VB'), ('some', 'DT'), ('of', 'IN'), ('your', 'PRP$'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
3
chicken
chicken chicken 234
[('anybody', 'NN'), ('want', 'VBP'), ('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
7
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
12
descended from food: [['NN'], 'food', 64, 68]
cream
cream cream 72
[('and', 'CC'), ('maybe', 'RB'), ('if', 'IN'), ('you', 'PRP'), ('sit', 'VBP'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN'), ('talk', 'NN'), ('and', 'CC'), ('eat', 'VB'), ('your', 'PRP$'), ('food', 'NN'), ('or', 'CC'), ('and', 'CC'), ('probably', 'RB'), ('can', 'MD'), ('have', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('afterwards', 'NNS')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('and', 'CC'), ('maybe', 'RB'), ('if', 'IN'), ('you', 'PRP'), ('sit', 'VBP'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN'), ('talk', 'NN'), ('and', 'CC'), ('eat', 'VB'), ('your', 'PRP$'), ('food', 'NN'), ('or', 'CC'), ('and', 'CC'), ('probably', 'RB'), ('can', 'MD'), ('have', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('afterwards', 'NNS')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b779f1b8>)
[('and', 'CC'), ('maybe', 'RB'), ('if', 'IN'), ('you', 'PRP'), ('sit', 'VBP'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN'), ('talk', 'NN'), ('and', 'CC'), ('eat', 'VB'), ('your', 'PRP$'), ('food', 'NN'), ('or', 'CC'), ('and', 'CC'), ('probably', 'RB'), ('can', 'MD'), ('have', 'VB'), ('some', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('afterwards', 'NNS')]
['table']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
candidates to check:
4
cream
cream cream 72
[('who', 'WP'), ('want', 'VBP'), ('ice', 'NN'), ('cream', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('who', 'WP'), ('want', 'VBP'), ('ice', 'NN'), ('cream', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
candidates to check:
1
candidates to check:
7
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
19
candidates to check:
2
candidates to check:
10
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'honey', 24, 29]
honey
honey honey 304
[('this', 'DT'), ('is', 'VBZ'), ('delicious', 'JJ'), ('honey', 'NN'), ('got', 'VBD'), ('all', 'DT'), ('up', 'RB'), ('on', 'IN'), ('my', 'PRP$'), ('dress', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
6
candidates to check:
5
candidates to check:
6
descended from food: [['NN'], 'diet', 30, 34]
candidates to check:
2
ginger
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7765518>)
[('diet', 'JJ'), ('sprite', 'JJ'), ('diet', 'JJ'), ('slice', 'NN'), ('diet', 'JJ'), ('ginger', 'NN'), ('ale', 'NN')]
['ginger']
('food -> ', [])
candidates to check:
5
candidates to check:
5
descended from food: [['NN'], 'lunch', 17, 22]
descended from food: [['NN'], 'dinner', 34, 40]
candidates to check:
12
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7771488>)
[('and', 'CC'), ('uh', 'NN'), ('i', 'VBP'), ('knew', 'VBD'), ('this', 'DT'), ('stuff', 'NN'), ('on', 'IN'), ('this', 'DT'), ('table', 'NN'), ('was', 'VBD'), ('gon', 'VBG'), ('na', 'TO'), ('tempt', 'VB'), ('me', 'PRP')]
['table']
('food -> ', [])
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'salad', 26, 31]
candidates to check:
2
candidates to check:
2
candidates to check:
4
descended from food: [['NNS'], 'foods', 102, 107]
candidates to check:
5
descended from food: [['NN'], 'meal', 49, 53]
candidates to check:
2
candidates to check:
9
candidates to check:
11
descended from food: [['NN'], 'lunch', 21, 26]
descended from food: [['NN'], 'ham', 47, 50]
descended from food: [['NN'], 'sandwich', 51, 59]
descended from food: [['NN'], 'lunch', 21, 26]
descended from food: [['NN'], 'apple', 91, 96]
ham
ham ham 141
[('so', 'RB'), ('today', 'NN'), ('i', 'NN'), ('had', 'VBD'), ('lunch', 'NN'), ('and', 'CC'), ('took', 'VBD'), ('me', 'PRP'), ('a', 'DT'), ('spice', 'NN'), ('ham', 'NN'), ('sandwich', 'NN'), ('to', 'TO'), ('eat', 'VB'), ('lunch', 'NN'), ('and', 'CC'), ('then', 'RB'), ('i', 'VB'), ('had', 'VBD'), ('an', 'DT'), ('apple', 'NN')]
['ham']
('food -> ', [['ham', 'Sausages and Luncheon Meats']])
candidates to check:
5
descended from food: [['NN'], 'lunch', 43, 48]
candidates to check:
7
descended from food: [['NN'], 'dinner', 41, 47]
candidates to check:
4
descended from food: [['NN'], 'lunch', 48, 53]
candidates to check:
5
candidates to check:
2
broccoli
broccoli broccoli 30
[('i', 'NN'), ('got', 'VBD'), ('some', 'DT'), ('broccoli', 'NN'), ('in', 'IN'), ('there', 'EX')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
17
descended from food: [['NN'], 'pork', 35, 39]
descended from food: [['NN'], 'pork', 35, 39]
descended from food: [['NN'], 'food', 115, 119]
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b77087e8>)
[('and', 'CC'), ('uh', 'JJ'), ('xxx', 'NN'), ('and', 'CC'), ('put', 'VB'), ('pork', 'NN'), ('chops', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('that', 'DT'), ('baby', 'NN'), ('pork', 'NN'), ('chops', 'NNS'), ('and', 'CC'), ('fix', 'VB'), ('the', 'DT'), ('broccoli', 'NN'), ('and', 'CC'), ('i', 'NN'), ('have', 'VBP'), ('food', 'NN'), ('tomorrow', 'NN')]
['baby']
('food -> ', [])
broccoli
broccoli broccoli 30
[('and', 'CC'), ('uh', 'JJ'), ('xxx', 'NN'), ('and', 'CC'), ('put', 'VB'), ('pork', 'NN'), ('chops', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('that', 'DT'), ('baby', 'NN'), ('pork', 'NN'), ('chops', 'NNS'), ('and', 'CC'), ('fix', 'VB'), ('the', 'DT'), ('broccoli', 'NN'), ('and', 'CC'), ('i', 'NN'), ('have', 'VBP'), ('food', 'NN'), ('tomorrow', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
pork
pork pork 541
[('and', 'CC'), ('uh', 'JJ'), ('xxx', 'NN'), ('and', 'CC'), ('put', 'VB'), ('pork', 'NN'), ('chops', 'NNS'), ('to', 'TO'), ('make', 'VB'), ('that', 'DT'), ('baby', 'NN'), ('pork', 'NN'), ('chops', 'NNS'), ('and', 'CC'), ('fix', 'VB'), ('the', 'DT'), ('broccoli', 'NN'), ('and', 'CC'), ('i', 'NN'), ('have', 'VBP'), ('food', 'NN'), ('tomorrow', 'NN')]
['pork']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products'], ['pork', 'Pork Products']])
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
8
candidates to check:
3
candidates to check:
4
candidates to check:
8
candidates to check:
3
candidates to check:
7
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
5
egg
egg egg 357
[('my', 'PRP$'), ('hospital', 'NN'), ('egg', 'NN'), ('crate', 'JJ'), ('thing', 'NN'), ('got', 'VBD'), ('tore', 'RB'), ('up', 'RP')]
['egg']
('food -> ', [])
candidates to check:
6
candidates to check:
3
candidates to check:
6
soft
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b772dea8>)
[('and', 'CC'), ('i', 'VB'), ('wish', 'JJ'), ('and', 'CC'), ('i', 'JJ'), ('tried', 'VBN'), ('on', 'IN'), ('the', 'DT'), ('bed', 'NN'), ('but', 'CC'), ('the', 'DT'), ('bed', 'NN'), ('is', 'VBZ'), ('too', 'RB'), ('soft', 'JJ')]
['soft']
('food -> ', [])
candidates to check:
4
hard
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b773af38>)
[('you', 'PRP'), ('just', 'RB'), ('can', 'MD'), ('t', 'VB'), ('do', 'VB'), ('it', 'PRP'), ('on', 'IN'), ('the', 'DT'), ('bed', 'NN'), ('like', 'IN'), ('you', 'PRP'), ('could', 'MD'), ('on', 'IN'), ('something', 'NN'), ('hard', 'JJ'), ('and', 'CC'), ('firm', 'NN')]
['hard']
('food -> ', [])
candidates to check:
12
round
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b76d2758>)
[('so', 'RB'), ('tomorrow', 'NN'), ('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('try', 'VB'), ('to', 'TO'), ('get', 'VB'), ('into', 'IN'), ('form', 'NN'), ('so', 'IN'), ('i', 'JJ'), ('can', 'MD'), ('see', 'VB'), ('by', 'IN'), ('my', 'PRP$'), ('birthday', 'JJ'), ('october', 'IN'), ('if', 'IN'), ('i', 'NNS'), ('can', 'MD'), ('be', 'VB'), ('lost', 'VBN'), ('these', 'DT'), ('these', 'DT'), ('pounds', 'NNS'), ('a', 'DT'), ('round', 'NN'), ('here', 'RB')]
['round']
('food -> ', [])
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['NNS'], 'chicken', 28, 35]
chicken
chicken chicken 234
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('more', 'JJR'), ('chicken', 'NNS')]
['chicken']
('food -> ', [])
candidates to check:
1
candidates to check:
8
candidates to check:
4
chicken
chicken chicken 234
[('grandma', 'NN'), ('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('chicken', 'NNS')]
['chicken']
('food -> ', [])
candidates to check:
5
candidates to check:
2
descended from food: [['NNS'], 'chicken', 25, 32]
chicken
chicken chicken 234
[('can', 'MD'), ('have', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('chicken', 'NNS')]
['chicken']
('food -> ', [])
candidates to check:
1
descended from food: [['NNS'], 'potatoes', 17, 25]
potatoes
potatoes potatoes 62
[('what', 'WP'), ('about', 'IN'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
2
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b76e19e0>)
[('eat', 'NN'), ('xxx', 'JJ'), ('xxx', 'NNP'), ('too', 'RB'), ('baby', 'RB')]
['baby']
('food -> ', [])
candidates to check:
2
descended from food: [['NNS'], 'potatoes', 18, 26]
potatoes
potatoes potatoes 62
[('she', 'PRP'), ('ate', 'VBD'), ('her', 'PRP'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
descended from food: [['NNS'], 'potatoes', 15, 23]
potatoes
potatoes potatoes 62
[('you', 'PRP'), ('want', 'VBP'), ('potatoes', 'NNS'), ('april', 'VB')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
1
whipped
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b76e6320>)
[('you', 'PRP'), ('whipped', 'VBD'), ('yours', 'VB'), ('off', 'RP'), ('too', 'RB'), ('didn', 'JJ'), ('t', 'NN'), ('ya', 'NN'), ('you', 'PRP')]
['whipped']
('food -> ', [])
candidates to check:
1
candidates to check:
5
candidates to check:
4
candidates to check:
4
water
water water 18
[('i', 'NN'), ('put', 'VBD'), ('all', 'DT'), ('that', 'IN'), ('water', 'NN'), ('in', 'IN'), ('that', 'DT'), ('thing', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
6
descended from food: [['NNS'], 'potatoes', 35, 43]
potatoes
potatoes potatoes 62
[('that', 'DT'), ('whole', 'JJ'), ('big', 'JJ'), ('package', 'NN'), ('of', 'IN'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
5
descended from food: [['NNS'], 'potatoes', 19, 27]
potatoes
potatoes potatoes 62
[('and', 'CC'), ('then', 'RB'), ('the', 'DT'), ('potatoes', 'NNS'), ('didn', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('enough', 'JJ'), ('water', 'NN'), ('in', 'IN'), ('there', 'EX')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
water
water water 18
[('and', 'CC'), ('then', 'RB'), ('the', 'DT'), ('potatoes', 'NNS'), ('didn', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('enough', 'JJ'), ('water', 'NN'), ('in', 'IN'), ('there', 'EX')]
['water']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products'], ['water', 'Beverages']])
candidates to check:
3
water
water water 18
[('i', 'NN'), ('tried', 'VBD'), ('to', 'TO'), ('add', 'VB'), ('more', 'JJR'), ('water', 'NN'), ('to', 'TO'), ('it', 'PRP')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
2
descended from food: [['NNS'], 'potatoes', 66, 74]
potatoes
potatoes potatoes 62
[('so', 'IN'), ('it', 'PRP'), ('turned', 'VBD'), ('out', 'RP'), ('to', 'TO'), ('be', 'VB'), ('just', 'RB'), ('enough', 'RB'), ('p', 'JJ'), ('just', 'RB'), ('enough', 'RB'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
3
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'chicken', 6, 13]
chicken
chicken chicken 234
[('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
5
corn
corn corn 419
[('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
5
corn
corn corn 419
[('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
4
descended from food: [['NN'], 'feed', 58, 62]
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
10
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'milk', 28, 32]
milk
milk milk 46
[('even', 'RB'), ('with', 'IN'), ('the', 'DT'), ('skim', 'NN'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
11
descended from food: [['NN'], 'milk', 31, 35]
milk
milk milk 46
[('kinda', 'NN'), ('kind', 'NN'), ('of', 'IN'), ('like', 'IN'), ('a', 'DT'), ('milk', 'NN'), ('shake', 'NN'), ('xxx', 'NN')]
['milk']
('food -> ', [])
shake
shake shake 148
[('kinda', 'NN'), ('kind', 'NN'), ('of', 'IN'), ('like', 'IN'), ('a', 'DT'), ('milk', 'NN'), ('shake', 'NN'), ('xxx', 'NN')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
8
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'honey', 6, 11]
honey
honey honey 304
[('honey', 'NN'), ('i', 'NN'), ('tell', 'VBP'), ('you', 'PRP'), ('what', 'WP')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
3
candidates to check:
5
oats
oats oats 389
[('oats', 'NNS'), ('and', 'CC'), ('bran', 'NN'), ('cereal', 'NN')]
['oats']
('food -> ', [['oats', 'Cereal Grains and Pasta']])
candidates to check:
5
descended from food: [['NN'], 'honey', 30, 35]
oats
oats oats 389
[('oats', 'NNS'), ('and', 'CC'), ('oats', 'NNS'), ('and', 'CC'), ('honey', 'NN')]
['oats']
('food -> ', [['oats', 'Cereal Grains and Pasta']])
honey
honey honey 304
[('oats', 'NNS'), ('and', 'CC'), ('oats', 'NNS'), ('and', 'CC'), ('honey', 'NN')]
['honey']
('food -> ', [['oats', 'Cereal Grains and Pasta'], ['honey', 'Sweets']])
candidates to check:
8
honey
honey honey 304
[('somethin', 'JJ'), ('g', 'NN'), ('nut', 'NN'), ('and', 'CC'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
3
candidates to check:
6
descended from food: [['NN'], 'chicken', 33, 40]
fried chicken
fried chicken fried chicken 234
[('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'RBR'), ('fried', 'JJ'), ('chicken', 'NN'), ('whispering', 'NN')]
['fried', 'chicken']
('food -> ', [['fried chicken', 'Legumes and Legume Products']])
chicken
chicken chicken 234
[('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'RBR'), ('fried', 'JJ'), ('chicken', 'NN'), ('whispering', 'NN')]
['chicken']
('food -> ', [['fried chicken', 'Legumes and Legume Products']])
candidates to check:
10
candidates to check:
16
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
10
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
7
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
10
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
7
candidates to check:
5
candidates to check:
4
candidates to check:
4
candidates to check:
6
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
8
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
3
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b75fcb48>)
[('xxx', 'JJ'), ('xxx', 'NN'), ('pampers', 'NNS'), ('on', 'IN'), ('the', 'DT'), ('table', 'NN'), ('this', 'DT'), ('morning', 'NN')]
['table']
('food -> ', [])
candidates to check:
3
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b75fcd88>)
[('whose', 'WP$'), ('baby', 'NN'), ('s', 'NN'), ('panties', 'NNS'), ('is', 'VBZ'), ('this', 'DT')]
['baby']
('food -> ', [])
candidates to check:
3
candidates to check:
8
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7613b90>)
[('those', 'DT'), ('panties', 'NNS'), ('i', 'VBP'), ('had', 'VBD'), ('the', 'DT'), ('other', 'JJ'), ('day', 'NN'), ('for', 'IN'), ('the', 'DT'), ('baby', 'NN'), ('whose', 'WP$'), ('doll', 'NN'), ('panties', 'NNS'), ('was', 'VBD'), ('those', 'DT')]
['baby']
('food -> ', [])
candidates to check:
2
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7613ef0>)
[('for', 'IN'), ('my', 'PRP$'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
3
candidates to check:
2
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7615290>)
[('for', 'IN'), ('my', 'PRP$'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
4
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b76157e8>)
[('oh', 'IN'), ('they', 'PRP'), ('your', 'PRP$'), ('baby', 'NN'), ('panties', 'NNS')]
['baby']
('food -> ', [])
candidates to check:
4
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7615b90>)
[('my', 'PRP$'), ('baby', 'NN'), ('don', 'NN'), ('t', 'NN'), ('ha', 'NN'), ('ve', 'VBZ'), ('no', 'DT'), ('panties', 'NNS')]
['baby']
('food -> ', [])
candidates to check:
6
candidates to check:
3
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7615098>)
[('does', 'VBZ'), ('your', 'PRP$'), ('baby', 'NN'), ('have', 'VBP'), ('a', 'DT'), ('pamper', 'NN')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
5
candidates to check:
8
descended from food: [['NN'], 'cabbage', 9, 16]
cabbage
cabbage cabbage 28
[('my', 'PRP$'), ('cabbage', 'NN'), ('patch', 'NN'), ('do', 'VB'), ('every', 'DT'), ('time', 'NN'), ('she', 'PRP'), ('have', 'VBP'), ('a', 'DT'), ('um', 'JJ'), ('bottle', 'NN'), ('and', 'CC'), ('and', 'CC'), ('a', 'DT'), ('pamper', 'NN')]
['cabbage']
('food -> ', [['cabbage', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
6
candidates to check:
7
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
13
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
15
candidates to check:
5
candidates to check:
5
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NNS'], 'popsicles', 34, 43]
candidates to check:
7
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NNS'], 'potatoes', 38, 46]
potatoes
potatoes potatoes 62
[('and', 'CC'), ('eat', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('those', 'DT'), ('good', 'JJ'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
descended from food: [['NNS'], 'potatoes', 32, 40]
potatoes
potatoes potatoes 62
[('eat', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('of', 'IN'), ('those', 'DT'), ('potatoes', 'NNS')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
6
candidates to check:
2
spot
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b763a248>)
[('it', 'PRP'), ('hit', 'VBD'), ('my', 'PRP$'), ('spot', 'NN')]
['spot']
('food -> ', [])
candidates to check:
2
candidates to check:
6
descended from food: [['NN'], 'diet', 40, 44]
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
2
loading solution set
calculating
set([(1059, (27, 40)), (1000, (31, 41)), (1031, (6, 26)), (873, (6, 13)), (190, (30, 35)), (598, (27, 38)), (1034, (21, 35)), (270, (19, 26)), (551, (26, 31)), (590, (91, 96)), (876, (6, 10)), (802, (18, 26)), (184, (6, 13)), (163, (13, 20)), (621, (95, 103)), (621, (68, 78)), (267, (23, 31)), (833, (19, 27)), (783, (36, 43)), (1682, (32, 40)), (866, (6, 16)), (583, (26, 30)), (1728, (23, 29)), (790, (25, 32)), (525, (49, 54)), (1677, (38, 46)), (858, (66, 74)), (190, (21, 25)), (190, (13, 20)), (533, (6, 17)), (533, (18, 28)), (571, (64, 73)), (1034, (7, 11)), (70, (21, 25)), (533, (38, 48)), (621, (35, 45)), (443, (15, 24)), (879, (6, 10)), (172, (6, 10)), (536, (34, 43)), (590, (41, 59)), (793, (17, 25)), (548, (28, 33)), (187, (6, 13)), (805, (15, 23)), (99, (28, 36)), (1037, (19, 32)), (433, (103, 112)), (618, (17, 25)), (85, (6, 14)), (830, (35, 43)), (771, (28, 35)), (1634, (34, 43))])
[((70, (21, 25)), '*AUN:\t<you want> [<] corn ?\n'), ((85, (6, 14)), '*MOT:\tpotatoes there .\n'), ((99, (28, 36)), '*COU:\tthank [//] I like (.) potatoes .\n'), ((163, (13, 20)), '*COU:\tI want koolaid [>] .\n'), ((172, (6, 10)), '*CHI:\tmilk [?] .\n'), ((184, (6, 13)), '*CHI:\tkoolaid [>] .\n'), ((187, (6, 13)), '*COU:\tkoolaid [<] .\n'), ((190, (13, 20)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (21, 25)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (30, 35)), '*MOT:\twe got koolaid milk and water .\n'), ((267, (23, 31)), '*AUN:\teat some of your potatoes .\n'), ((270, (19, 26)), '*MOT:\tanybody want chicken ?\n'), ((433, (103, 112)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((443, (15, 24)), '*MOT:\twho want ice cream ?\n'), ((525, (49, 54)), '*MOT:\twhen I go to the store tomorrow and get my sodas .\n'), ((533, (6, 17)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (18, 28)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (38, 48)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((536, (34, 43)), '*MOT:\tand &-um (.) I have my &-uh slim fast .\n'), ((548, (28, 33)), '*AUN:\t<I been living on (.) salad> [<] .\n'), ((551, (26, 31)), "*AUN:\tI've been living on salad for the last week .\n"), ((571, (64, 73)), "*MOT:\t+^ but I'm just gonna try to cut out (.) a meal and drink diet soda .\n"), ((583, (26, 30)), "*MOT:\t+^ I think it's the soda so (.) I'm gonna (.) drink nothin(g) but diet sodas and +...\n"), ((590, (41, 59)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (91, 96)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((598, (27, 38)), '*MOT:\tand I had a &-um (.) diet Sprite for lunch .\n'), ((618, (17, 25)), '*MOT:\tI got some broccoli in there .\n'), ((621, (35, 45)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (68, 78)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (95, 103)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((771, (28, 35)), '*COU:\t<can I have> [<] more chicken ?\n'), ((783, (36, 43)), '*COU:\t<grandma can I have some more chicken> [<] ?\n'), ((790, (25, 32)), '*COU:\tcan have some more chicken ?\n'), ((793, (17, 25)), '*MOT:\twhat about potatoes ?\n'), ((802, (18, 26)), '*AUN:\tshe ate her potatoes .\n'), ((805, (15, 23)), '*MOT:\tyou want potatoes April ?\n'), ((830, (35, 43)), '*MOT:\t+^ that whole big package of potatoes .\n'), ((833, (19, 27)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((858, (66, 74)), '*MOT:\tso it turned out to be (.) <just enough &p> [/] just enough potatoes .\n'), ((866, (6, 16)), '*CHI:\t(po)tatoes .\n'), ((873, (6, 13)), '*CHI:\tchicken ?\n'), ((876, (6, 10)), '*COU:\tcorn [>] .\n'), ((879, (6, 10)), '*CHI:\tcorn [<] .\n'), ((1000, (31, 41)), '*AUN:\tkinda [: kind of] like a milk shake xxx .\n'), ((1031, (6, 26)), '*AUN:\toats and bran cereal ?\n'), ((1034, (7, 11)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (21, 35)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1037, (19, 32)), '*AUN:\tsomethin(g) <nut and honey> [>] ?\n'), ((1059, (27, 40)), '*CHI:\tcan I have some more fried chicken &=whispering .\n'), ((1634, (34, 43)), "*MOT:\tthey're not just to wrap up popsicles with .\n"), ((1677, (38, 46)), '*MOT:\tand eat some more of those good potatoes .\n'), ((1682, (32, 40)), '*MOT:\t+^ eat some more of those potatoes !\n'), ((1728, (23, 29)), '*AUN:\tI got find a new cereal [>] .\n')]
set([(1000, (31, 35)), (1034, (30, 35)), (1438, (48, 52)), (1059, (27, 40)), (590, (21, 26)), (53, (32, 36)), (67, (28, 33)), (190, (30, 35)), (1022, (6, 11)), (603, (41, 47)), (621, (68, 72)), (551, (26, 31)), (590, (51, 59)), (876, (6, 10)), (802, (18, 26)), (1677, (38, 46)), (539, (34, 40)), (598, (43, 48)), (858, (66, 74)), (1707, (40, 44)), (1454, (13, 17)), (731, (73, 77)), (825, (24, 29)), (267, (23, 31)), (621, (115, 119)), (783, (36, 43)), (1486, (9, 16)), (1682, (32, 40)), (833, (47, 52)), (838, (33, 38)), (738, (137, 142)), (726, (74, 78)), (879, (6, 10)), (790, (25, 32)), (1034, (21, 25)), (1034, (7, 11)), (562, (102, 107)), (1446, (13, 17)), (500, (24, 29)), (530, (30, 34)), (1037, (27, 32)), (799, (22, 26)), (190, (21, 25)), (270, (19, 26)), (1000, (36, 41)), (542, (50, 55)), (873, (6, 13)), (1429, (15, 19)), (621, (35, 39)), (70, (21, 25)), (1634, (34, 43)), (48, (32, 36)), (621, (95, 103)), (571, (49, 53)), (443, (15, 24)), (172, (6, 10)), (1031, (6, 10)), (144, (23, 27)), (793, (17, 25)), (830, (35, 43)), (1462, (9, 13)), (805, (15, 23)), (533, (38, 44)), (1472, (16, 20)), (997, (28, 32)), (539, (17, 22)), (99, (28, 36)), (1458, (19, 23)), (1426, (35, 40)), (621, (63, 67)), (608, (48, 53)), (433, (103, 112)), (833, (19, 27)), (618, (17, 25)), (85, (6, 14)), (882, (58, 62)), (771, (28, 35)), (433, (64, 68)), (709, (18, 21)), (1701, (19, 23)), (590, (47, 50)), (809, (10, 17)), (433, (40, 45)), (590, (91, 96))])
[((48, (32, 36)), '*MOT:\t<and we thank him for our food amen> [>] .\n'), ((53, (32, 36)), '*CHI:\t<and we thank him for our food amen> [<] .\n'), ((67, (28, 33)), '*MOT:\tget you going on <the table> [>] .\n'), ((70, (21, 25)), '*AUN:\t<you want> [<] corn ?\n'), ((85, (6, 14)), '*MOT:\tpotatoes there .\n'), ((99, (28, 36)), '*COU:\tthank [//] I like (.) potatoes .\n'), ((144, (23, 27)), '*CHI:\tthank you for my food (.) amen .\n'), ((172, (6, 10)), '*CHI:\tmilk [?] .\n'), ((190, (21, 25)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (30, 35)), '*MOT:\twe got koolaid milk and water .\n'), ((267, (23, 31)), '*AUN:\teat some of your potatoes .\n'), ((270, (19, 26)), '*MOT:\tanybody want chicken ?\n'), ((433, (40, 45)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((433, (64, 68)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((433, (103, 112)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((443, (15, 24)), '*MOT:\twho want ice cream ?\n'), ((500, (24, 29)), '*AUN:\tthis is delicious honey got all up on my dress .\n'), ((530, (30, 34)), "*MOT:\tI'm buyin(g) everything diet .\n"), ((533, (38, 44)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((539, (17, 22)), '*MOT:\teat it for lunch (.) or for dinner .\n'), ((539, (34, 40)), '*MOT:\teat it for lunch (.) or for dinner .\n'), ((542, (50, 55)), '*MOT:\tand &-uh (.) I knew this (.) <stuff on this table (.) was gonna tempt me> [>] .\n'), ((551, (26, 31)), "*AUN:\tI've been living on salad for the last week .\n"), ((562, (102, 107)), "*MOT:\twell [/] well I'm gonna try it instead <is xxx> [//] is try to try to xxx to eat just about the foods that I'd like to eat .\n"), ((571, (49, 53)), "*MOT:\t+^ but I'm just gonna try to cut out (.) a meal and drink diet soda .\n"), ((590, (21, 26)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (47, 50)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (51, 59)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (91, 96)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((598, (43, 48)), '*MOT:\tand I had a &-um (.) diet Sprite for lunch .\n'), ((603, (41, 47)), '*MOT:\tand this right here be my &-uh (.) dinner right here .\n'), ((608, (48, 53)), "*MOT:\tand tomorrow I'll drink this for &-uh (.) lunch .\n"), ((618, (17, 25)), '*MOT:\tI got some broccoli in there .\n'), ((621, (35, 39)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (63, 67)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (68, 72)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (95, 103)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (115, 119)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((709, (18, 21)), '*MOT:\tmy hospital egg crate thing (.) got tore [?] up .\n'), ((726, (74, 78)), '*MOT:\t<and I wish> [<] [//] and I tried on the bed but (.) the bed is too soft .\n'), ((731, (73, 77)), "*MOT:\t+^ you just can't do it on the bed like you could on something (.) hard and firm .\n"), ((738, (137, 142)), "*MOT:\tso tomorrow (.) I'm gonna try to get into form so I can see by my birthday October if I can be lost <these [/] (.) these pounds (a)round here> [>] .\n"), ((771, (28, 35)), '*COU:\t<can I have> [<] more chicken ?\n'), ((783, (36, 43)), '*COU:\t<grandma can I have some more chicken> [<] ?\n'), ((790, (25, 32)), '*COU:\tcan have some more chicken ?\n'), ((793, (17, 25)), '*MOT:\twhat about potatoes ?\n'), ((799, (22, 26)), '*AUN:\teat xxx xxx too baby .\n'), ((802, (18, 26)), '*AUN:\tshe ate her potatoes .\n'), ((805, (15, 23)), '*MOT:\tyou want potatoes April ?\n'), ((809, (10, 17)), "*AUN:\tyou whipped yours off too didn't ya [: you] ?\n"), ((825, (24, 29)), '*MOT:\t+^ I put all that water in that thing .\n'), ((830, (35, 43)), '*MOT:\t+^ that whole big package of potatoes .\n'), ((833, (19, 27)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((833, (47, 52)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((838, (33, 38)), '*MOT:\t+^ I tried to add (.) more water to it .\n'), ((858, (66, 74)), '*MOT:\tso it turned out to be (.) <just enough &p> [/] just enough potatoes .\n'), ((873, (6, 13)), '*CHI:\tchicken ?\n'), ((876, (6, 10)), '*COU:\tcorn [>] .\n'), ((879, (6, 10)), '*CHI:\tcorn [<] .\n'), ((882, (58, 62)), '*MOT:\tI was cooking just enough for the folks I was gonna feed .\n'), ((997, (28, 32)), '*MOT:\t+^ even with the skim milk .\n'), ((1000, (31, 35)), '*AUN:\tkinda [: kind of] like a milk shake xxx .\n'), ((1000, (36, 41)), '*AUN:\tkinda [: kind of] like a milk shake xxx .\n'), ((1022, (6, 11)), '*AUN:\thoney I tell you what .\n'), ((1031, (6, 10)), '*AUN:\toats and bran cereal ?\n'), ((1034, (7, 11)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (21, 25)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (30, 35)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1037, (27, 32)), '*AUN:\tsomethin(g) <nut and honey> [>] ?\n'), ((1059, (27, 40)), '*CHI:\tcan I have some more fried chicken &=whispering .\n'), ((1426, (35, 40)), '*MOT:\t<xxx xxx> [<] pampers on the table this morning .\n'), ((1429, (15, 19)), "*MOT:\t+^ whose baby's panties is this ?\n"), ((1438, (48, 52)), '*MOT:\tthose panties I had the other day for the baby (.) whose doll panties was those ?\n'), ((1446, (13, 17)), '*CHI:\tfor my baby .\n'), ((1454, (13, 17)), '*CHI:\tfor my baby .\n'), ((1458, (19, 23)), '*MOT:\toh they your baby panties ?\n'), ((1462, (9, 13)), "*COU:\tmy baby don't ha(ve) no panties .\n"), ((1472, (16, 20)), '*AUN:\tdoes your baby have a pamper ?\n'), ((1486, (9, 16)), '*COU:\tmy cabbage patch do every time she have a &-um bottle and [/] and a pamper .\n'), ((1634, (34, 43)), "*MOT:\tthey're not just to wrap up popsicles with .\n"), ((1677, (38, 46)), '*MOT:\tand eat some more of those good potatoes .\n'), ((1682, (32, 40)), '*MOT:\t+^ eat some more of those potatoes !\n'), ((1701, (19, 23)), '*AUN:\t+^ it hit my spot .\n'), ((1707, (40, 44)), '*AUN:\txxx is <on a> [/] on a noncooking diet .\n')]
calculating accuracy and recall
correct labels:
set(['diet soda', 'milk shake', 'apple', 'fried chicken', 'slim fast', 'chicken', 'oats and honey', 'milk', 'ice cream', 'ginger+ale', 'oats and bran cereal', 'popsicles', 'nut and honey', 'diet sprite', 'corn', 'water', 'cereal', '(po)tatoes', 'broccoli', 'koolaid', 'salad', 'oats', 'potatoes', 'sodas', 'spice ham sandwich', 'pork chops', 'soda', 'diet slice'])
predicted labels:
set(['feed', 'soft', 'pork', 'apple', 'fried chicken', 'hard', 'ginger', 'honey', 'foods', 'shake', 'table', 'chicken', 'milk', 'ice cream', 'ham', 'popsicles', 'whipped', 'sandwich', 'food', 'corn', 'spot', 'diet', 'water', 'lunch', 'baby', 'cabbage', 'broccoli', 'salad', 'oats', 'potatoes', 'round', 'dinner', 'egg', 'meal'])
file:HSLLD/HV1/MT//aprmt1.cha
precision: 0.352941176471
recall: 0.428571428571
true positives:['apple', 'broccoli', 'chicken', 'corn', 'fried chicken', 'ice cream', 'milk', 'oats', 'popsicles', 'potatoes', 'salad', 'water']
false positives: ['baby', 'cabbage', 'diet', 'dinner', 'egg', 'feed', 'food', 'foods', 'ginger', 'ham', 'hard', 'honey', 'lunch', 'meal', 'pork', 'round', 'sandwich', 'shake', 'soft', 'spot', 'table', 'whipped']
false negatives: ['(po)tatoes', 'cereal', 'diet slice', 'diet soda', 'diet sprite', 'ginger+ale', 'koolaid', 'milk shake', 'nut and honey', 'oats and bran cereal', 'oats and honey', 'pork chops', 'slim fast', 'soda', 'sodas', 'spice ham sandwich']
# true pos: 12
# false pos: 22
# false neg: 16
HSLLD/HV1/MT//jermt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jermt1.cha
HSLLD/HV1/MT//brimt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
5
candidates to check:
7
descended from food: [['NN'], 'butter', 31, 37]
butter
butter butter 499
[('put', 'VB'), ('your', 'PRP$'), ('put', 'VB'), ('your', 'PRP$'), ('butter', 'NN'), ('on', 'IN'), ('the', 'DT'), ('noodles', 'NNS'), ('okay', 'VBP')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
noodles
noodles noodles 138
[('put', 'VB'), ('your', 'PRP$'), ('put', 'VB'), ('your', 'PRP$'), ('butter', 'NN'), ('on', 'IN'), ('the', 'DT'), ('noodles', 'NNS'), ('okay', 'VBP')]
['noodles']
('food -> ', [['butter', 'Fats and Oils'], ['noodles', 'Cereal Grains and Pasta']])
candidates to check:
3
candidates to check:
1
hard
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b77c8b90>)
[('it', 'PRP'), ('was', 'VBD'), ('pouring', 'VBG'), ('hard', 'JJ'), ('coming', 'VBG'), ('down', 'RP'), ('hard', 'RB')]
['hard']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
ground
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b76ed8c0>)
[('i', 'NNS'), ('have', 'VBP'), ('some', 'DT'), ('of', 'IN'), ('those', 'DT'), ('snap', 'JJ'), ('things', 'NNS'), ('that', 'IN'), ('you', 'PRP'), ('throw', 'VBP'), ('on', 'IN'), ('the', 'DT'), ('ground', 'NN')]
['ground']
('food -> ', [])
snap
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b77c8998>)
[('i', 'NNS'), ('have', 'VBP'), ('some', 'DT'), ('of', 'IN'), ('those', 'DT'), ('snap', 'JJ'), ('things', 'NNS'), ('that', 'IN'), ('you', 'PRP'), ('throw', 'VBP'), ('on', 'IN'), ('the', 'DT'), ('ground', 'NN')]
['snap']
('food -> ', [])
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
3
descended from food: [['NN'], 'dinner', 18, 24]
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'applesauce', 20, 30]
applesauce
applesauce applesauce 76
[('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('applesauce', 'NN'), ('or', 'CC'), ('somethin', 'JJ'), ('g', 'NN')]
['applesauce']
('food -> ', [['applesauce', 'Fruits and Fruit Juices']])
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'dessert', 6, 13]
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b75ea758>)
[('dessert', 'NN')]
['dessert']
('food -> ', [])
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
9
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'supper', 33, 39]
candidates to check:
1
candidates to check:
2
shoots
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b75f5e18>)
[('shoots', 'NNS')]
['shoots']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
shoots
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b75f8290>)
[('shoots', 'NNS')]
['shoots']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
shoots
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b75f8cf8>)
[('shoots', 'NNS')]
['shoots']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
shoots
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b75f8b00>)
[('shoots', 'NNS')]
['shoots']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
4
candidates to check:
2
shoots
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b75f9c68>)
[('shoots', 'NNS')]
['shoots']
('food -> ', [])
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
loading solution set
calculating
set([(452, (20, 30)), (148, (45, 52)), (148, (31, 37))])
[((148, (31, 37)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((148, (45, 52)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((452, (20, 30)), '*MOT:\tyou want some applesauce or somethin(g) ?\n')]
set([(148, (45, 52)), (158, (21, 25)), (659, (8, 14)), (459, (6, 13)), (585, (8, 14)), (452, (20, 30)), (336, (61, 67)), (158, (38, 42)), (669, (8, 14)), (718, (8, 14)), (148, (31, 37)), (336, (27, 31)), (595, (8, 14)), (576, (33, 39)), (394, (18, 24))])
[((148, (31, 37)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((148, (45, 52)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((158, (21, 25)), '*CHI:\tit was pouring hard coming down hard .\n'), ((158, (38, 42)), '*CHI:\tit was pouring hard coming down hard .\n'), ((336, (27, 31)), '*MOT:\tI have some of those snap things that you throw on the ground .\n'), ((336, (61, 67)), '*MOT:\tI have some of those snap things that you throw on the ground .\n'), ((394, (18, 24)), '*MOT:\tmaybe after dinner we can do another one (.) ?\n'), ((452, (20, 30)), '*MOT:\tyou want some applesauce or somethin(g) ?\n'), ((459, (6, 13)), '*MOT:\tdessert ?\n'), ((576, (33, 39)), '*MOT:\tcan you finish eating your supper before you play with the gun Sean ?\n'), ((585, (8, 14)), '*CHI:\t&=shoots .\n'), ((595, (8, 14)), '*CHI:\t&=shoots .\n'), ((659, (8, 14)), '*CHI:\t&=shoots .\n'), ((669, (8, 14)), '*CHI:\t&=shoots .\n'), ((718, (8, 14)), '*CHI:\t&=shoots .\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'noodles', 'applesauce'])
predicted labels:
set(['butter', 'dessert', 'hard', 'dinner', 'applesauce', 'supper', 'snap', 'shoots', 'noodles', 'ground'])
file:HSLLD/HV1/MT//brimt1.cha
precision: 0.3
recall: 1.0
true positives:['applesauce', 'butter', 'noodles']
false positives: ['dessert', 'dinner', 'ground', 'hard', 'shoots', 'snap', 'supper']
false negatives: []
# true pos: 3
# false pos: 7
# false neg: 0
HSLLD/HV1/MT//zanmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//zanmt1.cha
HSLLD/HV1/MT//todmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//todmt1.cha
HSLLD/HV1/MT//jasmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jasmt1.cha
HSLLD/HV1/MT//paumt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//paumt1.cha
HSLLD/HV1/MT//chamt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//chamt1.cha
HSLLD/HV1/MT//gilmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
7
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
1
descended from food: [['NN'], 'tea', 29, 32]
tea
tea tea 2
[('what', 'WP'), ('about', 'IN'), ('having', 'VBG'), ('some', 'DT'), ('tea', 'NN')]
['tea']
('food -> ', [['tea', 'American Indian/Alaska Native Foods']])
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
6
candidates to check:
7
descended from food: [['NN'], 'tea', 36, 39]
tea
tea tea 2
[('she', 'PRP'), ('s', 'VBD'), ('always', 'RB'), ('servin', 'VBN'), ('g', 'NN'), ('me', 'PRP'), ('tea', 'IN')]
['tea']
('food -> ', [['tea', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
6
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
loading solution set
calculating
set([(121, (36, 39)), (90, (29, 32))])
[((90, (29, 32)), '*MOT:\twhat about having some tea ?\n'), ((121, (36, 39)), "*MOT:\tshe's always servin(g) me [!] tea (.) .\n")]
set([(121, (36, 39)), (90, (29, 32))])
[((90, (29, 32)), '*MOT:\twhat about having some tea ?\n'), ((121, (36, 39)), "*MOT:\tshe's always servin(g) me [!] tea (.) .\n")]
calculating accuracy and recall
correct labels:
set(['tea'])
predicted labels:
set(['tea'])
file:HSLLD/HV1/MT//gilmt1.cha
precision: 1.0
recall: 1.0
true positives:['tea']
false positives: []
false negatives: []
# true pos: 1
# false pos: 0
# false neg: 0
HSLLD/HV1/MT//tamtp1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tamtp1.cha
HSLLD/HV1/MT//aimmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
4
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
6
candidates to check:
6
descended from food: [['NN'], 'supper', 12, 18]
candidates to check:
5
candidates to check:
8
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
8
candidates to check:
4
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
6
candidates to check:
8
candidates to check:
8
candidates to check:
11
candidates to check:
8
candidates to check:
8
candidates to check:
7
candidates to check:
5
candidates to check:
10
candidates to check:
8
candidates to check:
8
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
7
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
8
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
7
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
14
candidates to check:
8
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
5
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
14
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
8
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'milk', 21, 25]
milk
milk milk 46
[('can', 'MD'), ('i', 'VB'), ('get', 'VB'), ('some', 'DT'), ('milk', 'NN'), ('please', 'NN')]
['milk']
('food -> ', [])
candidates to check:
5
candidates to check:
3
descended from food: [['NN'], 'chocolate', 27, 36]
chocolate
chocolate chocolate 598
[('mommy', 'NN'), ('can', 'MD'), ('i', 'VB'), ('get', 'VB'), ('some', 'DT'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
2
descended from food: [['NN'], 'chocolate', 21, 30]
milk
milk milk 46
[('can', 'MD'), ('i', 'VB'), ('get', 'VB'), ('some', 'DT'), ('chocolate', 'NN'), ('too', 'RB'), ('and', 'CC'), ('milk', 'VB'), ('too', 'RB')]
['milk']
('food -> ', [])
chocolate
chocolate chocolate 598
[('can', 'MD'), ('i', 'VB'), ('get', 'VB'), ('some', 'DT'), ('chocolate', 'NN'), ('too', 'RB'), ('and', 'CC'), ('milk', 'VB'), ('too', 'RB')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'chocolate', 14, 23]
chocolate
chocolate chocolate 598
[('xxx', 'NN'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
5
candidates to check:
3
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'chocolate', 15, 24]
milk
milk milk 46
[('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['milk']
('food -> ', [])
chocolate
chocolate chocolate 598
[('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
2
descended from food: [['NN'], 'milk', 19, 23]
descended from food: [['NN'], 'chocolate', 28, 37]
milk
milk milk 46
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['milk']
('food -> ', [])
chocolate
chocolate chocolate 598
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
5
descended from food: [['NN'], 'milk', 6, 10]
descended from food: [['NN'], 'chocolate', 15, 24]
milk
milk milk 46
[('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['milk']
('food -> ', [])
chocolate
chocolate chocolate 598
[('milk', 'NN'), ('and', 'CC'), ('chocolate', 'NN')]
['chocolate']
('food -> ', [['chocolate', 'Sweets']])
candidates to check:
1
shake
shake shake 148
[('and', 'CC'), ('shake', 'VB'), ('good', 'JJ'), ('up', 'RP')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
1
shake
shake shake 148
[('and', 'CC'), ('shake', 'VB'), ('it', 'PRP'), ('up', 'RP')]
['shake']
('food -> ', [['shake', 'Beverages']])
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
7
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
6
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
6
descended from food: [['NN'], 'dinner', 26, 32]
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
11
descended from food: [['NN'], 'food', 38, 42]
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
8
descended from food: [['NN'], 'food', 64, 68]
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
4
descended from food: [['NN'], 'food', 31, 35]
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'juice', 26, 31]
juice
juice juice 52
[('didn', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('get', 'VBP'), ('some', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
1
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74beab8>)
[('xxx', 'NN'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'juice', 32, 37]
juice
juice juice 52
[('daddy', 'NN'), ('i', 'NN'), ('didn', 'VBP'), ('t', 'NN'), ('ask', 'NN'), ('for', 'IN'), ('no', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
4
candidates to check:
4
descended from food: [['NN'], 'juice', 10, 15]
juice
juice juice 52
[('xxx', 'JJ'), ('juice', 'NN'), ('thank', 'NN'), ('you', 'PRP')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
6
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74f3170>)
[('huh', 'NN'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'food', 33, 37]
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'juice', 32, 37]
juice
juice juice 52
[('i', 'NN'), ('am', 'VBP'), ('gon', 'VBG'), ('na', 'TO'), ('bring', 'VB'), ('some', 'DT'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
1
candidates to check:
6
descended from food: [['NN'], 'juice', 20, 25]
juice
juice juice 52
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('get', 'VB'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'food', 24, 28]
candidates to check:
1
candidates to check:
1
candidates to check:
3
potatoes
potatoes potatoes 62
[('potatoes', 'NNS'), ('only', 'RB')]
['potatoes']
('food -> ', [['potatoes', 'Vegetables and Vegetable Products']])
candidates to check:
4
descended from food: [['NN'], 'food', 27, 31]
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
pepper
pepper pepper 27
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('like', 'IN'), ('no', 'DT'), ('pepper', 'NN')]
['pepper']
('food -> ', [])
candidates to check:
1
pepper
pepper pepper 27
[('do', 'VB'), ('you', 'PRP'), ('like', 'IN'), ('pepper', 'NN')]
['pepper']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'soup', 24, 28]
soup
soup soup 72
[('want', 'VB'), ('some', 'DT'), ('of', 'IN'), ('this', 'DT'), ('soup', 'NN'), ('xxx', 'NN')]
['soup']
('food -> ', [['soup', 'American Indian/Alaska Native Foods']])
candidates to check:
3
descended from food: [['NN'], 'soup', 10, 14]
soup
soup soup 72
[('xxx', 'NN'), ('soup', 'NN'), ('bowl', 'NN')]
['soup']
('food -> ', [['soup', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74faea8>)
[('mommy', 'NN'), ('you', 'PRP'), ('mommy', 'VBP'), ('fan', 'VB'), ('me', 'PRP')]
['fan']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
1
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74f0248>)
[('mommy', 'NN'), ('fan', 'NN'), ('me', 'PRP')]
['fan']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
3
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74f0680>)
[('fan', 'NN'), ('me', 'PRP')]
['fan']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
descended from food: [['NN'], 'food', 20, 24]
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
6
descended from food: [['NN'], 'breakfast', 20, 29]
candidates to check:
2
candidates to check:
2
candidates to check:
8
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74f2830>)
[('baby', 'NN'), ('you', 'PRP'), ('are', 'VBP'), ('a', 'DT'), ('mean', 'JJ'), ('boy', 'NN')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74f2b48>)
[('xxx', 'JJ'), ('look', 'NN'), ('at', 'IN'), ('baby', 'NN'), ('he', 'PRP'), ('like', 'IN'), ('that', 'DT'), ('part', 'NN')]
['baby']
('food -> ', [])
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
7
descended from food: [['NN'], 'meat', 29, 33]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74f2dd0>)
[('xxx', 'NN'), ('i', 'NN'), ('picked', 'VBD'), ('up', 'RP'), ('my', 'PRP$'), ('own', 'JJ'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74f2368>)
[('you', 'PRP'), ('too', 'RB'), ('baby', 'VB')]
['baby']
('food -> ', [])
candidates to check:
5
candidates to check:
1
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74f2e18>)
[('you', 'PRP'), ('too', 'RB'), ('baby', 'VB')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
5
pepper
pepper pepper 27
[('pepper', 'NN')]
['pepper']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
6
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'food', 41, 45]
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
1
descended from food: [['NN'], 'food', 15, 19]
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'food', 10, 14]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
6
applesauce
applesauce applesauce 76
[('eat', 'NN'), ('eat', 'NN'), ('eat', 'VB'), ('your', 'PRP$'), ('applesauce', 'NN')]
['applesauce']
('food -> ', [['applesauce', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74922d8>)
[('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
5
candidates to check:
6
descended from food: [['NN'], 'dinner', 19, 25]
candidates to check:
3
water
water water 18
[('i', 'NN'), ('want', 'VBP'), ('that', 'IN'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
4
water
water water 18
[('need', 'VB'), ('some', 'DT'), ('water', 'NN'), ('xxx', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
4
water
water water 18
[('i', 'NN'), ('want', 'VBP'), ('some', 'DT'), ('water', 'NN'), ('xxx', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
7
descended from food: [['NN'], 'food', 42, 46]
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'food', 26, 30]
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
4
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7499c68>)
[('xxx', 'JJ'), ('stop', 'NN'), ('tapping', 'NN'), ('on', 'IN'), ('the', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
6
milk
milk milk 46
[('don', 'NN'), ('t', 'NN'), ('throw', 'VB'), ('away', 'RP'), ('that', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
3
candidates to check:
7
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
9
candidates to check:
1
candidates to check:
1
descended from food: [['NN'], 'food', 15, 19]
candidates to check:
1
descended from food: [['NN'], 'food', 15, 19]
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'food', 15, 19]
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'food', 51, 55]
candidates to check:
7
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'milk', 20, 24]
milk
milk milk 46
[('you', 'PRP'), ('drink', 'VBP'), ('any', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['NN'], 'milk', 20, 24]
milk
milk milk 46
[('you', 'PRP'), ('drink', 'VBP'), ('any', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
1
descended from food: [['NN'], 'food', 15, 19]
candidates to check:
2
candidates to check:
1
candidates to check:
6
descended from food: [['NN'], 'food', 14, 18]
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'food', 25, 29]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
3
loading solution set
calculating
set([(887, (15, 24)), (1991, (32, 42)), (884, (19, 23)), (884, (28, 37)), (1633, (10, 14)), (2031, (22, 27)), (1499, (6, 14)), (881, (15, 24)), (2046, (18, 23)), (1409, (10, 15)), (881, (6, 10)), (1399, (32, 37)), (864, (21, 30)), (1549, (18, 24)), (1545, (22, 28)), (2276, (20, 24)), (2284, (20, 24)), (1468, (32, 37)), (1481, (20, 25)), (864, (39, 43)), (887, (6, 10)), (852, (21, 25)), (873, (14, 23)), (2043, (16, 21)), (860, (27, 36)), (1841, (6, 12)), (1386, (26, 31)), (1630, (24, 28))])
[((852, (21, 25)), '*CHI:\tcan I get some milk please (.) ?\n'), ((860, (27, 36)), '*CHI:\tMommy can I get some chocolate (.) ?\n'), ((864, (21, 30)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((864, (39, 43)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((873, (14, 23)), '*CHI:\txxx [>] chocolate .\n'), ((881, (6, 10)), '*CHI:\tmilk and chocolate .\n'), ((881, (15, 24)), '*CHI:\tmilk and chocolate .\n'), ((884, (19, 23)), '*CHI:\tMommy I want milk and chocolate .\n'), ((884, (28, 37)), '*CHI:\tMommy I want milk and chocolate .\n'), ((887, (6, 10)), '*CHI:\tmilk and chocolate (.) .\n'), ((887, (15, 24)), '*CHI:\tmilk and chocolate (.) .\n'), ((1386, (26, 31)), "*BRO:\tdidn't you get some juice ?\n"), ((1399, (32, 37)), "*CHI:\tDaddy I didn't ask for no juice .\n"), ((1409, (10, 15)), '*CHI:\txxx juice thank you .\n'), ((1468, (32, 37)), '*MOT:\tI am [!] gonna bring some juice .\n'), ((1481, (20, 25)), "*MOT:\tI'm gonna get juice .\n"), ((1499, (6, 14)), '*MOT:\tpotatoes only [?] (.) .\n'), ((1545, (22, 28)), "*CHI:\tI don't like no pepper .\n"), ((1549, (18, 24)), '*CHI:\tdo you like pepper ?\n'), ((1630, (24, 28)), '*MOT:\twant some of this soup xxx ?\n'), ((1633, (10, 14)), '*BRO:\txxx soup bowl ?\n'), ((1841, (6, 12)), '*CHI:\tpepper (.) .\n'), ((1991, (32, 42)), '*MOT:\t<eat [/] eat [/] eat your applesauce> [<] .\n'), ((2031, (22, 27)), '*CHI:\tI want that [?] water .\n'), ((2043, (16, 21)), '*FAT:\tneed some water xxx .\n'), ((2046, (18, 23)), '*CHI:\tI want some water xxx .\n'), ((2276, (20, 24)), '*MOT:\tyou drink any milk ?\n'), ((2284, (20, 24)), '*MOT:\tyou drink any milk ?\n')]
set([(887, (15, 24)), (2241, (51, 55)), (1771, (29, 33)), (884, (19, 23)), (2217, (15, 19)), (1327, (31, 35)), (1390, (10, 14)), (852, (21, 25)), (1633, (10, 14)), (1991, (32, 42)), (2324, (14, 18)), (884, (28, 37)), (891, (10, 15)), (1468, (32, 37)), (2031, (22, 27)), (2314, (15, 19)), (2095, (42, 46)), (1499, (6, 14)), (1647, (29, 32)), (84, (12, 18)), (881, (15, 24)), (1741, (6, 10)), (1654, (12, 15)), (2228, (15, 19)), (1793, (15, 19)), (1288, (64, 68)), (1409, (10, 15)), (881, (6, 10)), (2180, (29, 33)), (2126, (30, 35)), (1399, (32, 37)), (864, (21, 30)), (1708, (20, 29)), (1549, (18, 24)), (2342, (25, 29)), (1545, (22, 28)), (1939, (15, 19)), (2276, (20, 24)), (2046, (18, 23)), (2015, (6, 10)), (1758, (18, 22)), (2284, (20, 24)), (895, (10, 15)), (1801, (14, 18)), (2115, (26, 30)), (1481, (20, 25)), (1502, (27, 31)), (1685, (20, 24)), (2027, (19, 25)), (1455, (33, 37)), (1129, (38, 42)), (1425, (10, 14)), (1489, (24, 28)), (864, (39, 43)), (887, (6, 10)), (2220, (15, 19)), (1084, (26, 32)), (1947, (10, 14)), (873, (14, 23)), (1871, (41, 45)), (2043, (16, 21)), (860, (27, 36)), (1841, (6, 12)), (1386, (26, 31)), (1630, (24, 28)), (1664, (6, 9))])
[((84, (12, 18)), "*MOT:\t<it's supper time> [<] .\n"), ((852, (21, 25)), '*CHI:\tcan I get some milk please (.) ?\n'), ((860, (27, 36)), '*CHI:\tMommy can I get some chocolate (.) ?\n'), ((864, (21, 30)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((864, (39, 43)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((873, (14, 23)), '*CHI:\txxx [>] chocolate .\n'), ((881, (6, 10)), '*CHI:\tmilk and chocolate .\n'), ((881, (15, 24)), '*CHI:\tmilk and chocolate .\n'), ((884, (19, 23)), '*CHI:\tMommy I want milk and chocolate .\n'), ((884, (28, 37)), '*CHI:\tMommy I want milk and chocolate .\n'), ((887, (6, 10)), '*CHI:\tmilk and chocolate (.) .\n'), ((887, (15, 24)), '*CHI:\tmilk and chocolate (.) .\n'), ((891, (10, 15)), '*CHI:\tand shake good up .\n'), ((895, (10, 15)), '*CHI:\tand shake it up .\n'), ((1084, (26, 32)), "*CHI:\tcome on Robbie it's dinner (.) .\n"), ((1129, (38, 42)), '*MOT:\tAimee you gonna eat lots [>] of food tonight (.) .\n'), ((1288, (64, 68)), '*CHI:\tGod is great (.) God is good (.) let us thank him for our food (.) amen .\n'), ((1327, (31, 35)), '*BRO:\tand we thank him for our food (.) .\n'), ((1386, (26, 31)), "*BRO:\tdidn't you get some juice ?\n"), ((1390, (10, 14)), '*FAT:\txxx baby ?\n'), ((1399, (32, 37)), "*CHI:\tDaddy I didn't ask for no juice .\n"), ((1409, (10, 15)), '*CHI:\txxx juice thank you .\n'), ((1425, (10, 14)), '*FAT:\thuh baby ?\n'), ((1455, (33, 37)), '*CHI:\tbut Daddy it was behind my food .\n'), ((1468, (32, 37)), '*MOT:\tI am [!] gonna bring some juice .\n'), ((1481, (20, 25)), "*MOT:\tI'm gonna get juice .\n"), ((1489, (24, 28)), '*MOT:\tthey eat all this food [>] .\n'), ((1499, (6, 14)), '*MOT:\tpotatoes only [?] (.) .\n'), ((1502, (27, 31)), '*MOT:\tthey do eat all this food (.) .\n'), ((1545, (22, 28)), "*CHI:\tI don't like no pepper .\n"), ((1549, (18, 24)), '*CHI:\tdo you like pepper ?\n'), ((1630, (24, 28)), '*MOT:\twant some of this soup xxx ?\n'), ((1633, (10, 14)), '*BRO:\txxx soup bowl ?\n'), ((1647, (29, 32)), '*CHI:\t<Mommy you> [//] Mommy fan me (.) .\n'), ((1654, (12, 15)), '*CHI:\tMommy fan me .\n'), ((1664, (6, 9)), '*CHI:\tfan me (.) .\n'), ((1685, (20, 24)), '*MOT:\tjust eat your food Aimee .\n'), ((1708, (20, 29)), '*CHI:\tsomething for breakfast (.) .\n'), ((1741, (6, 10)), '*MOT:\tBaby you are a mean boy .\n'), ((1758, (18, 22)), '*CHI:\txxx look at Baby <he like that part > [>] .\n'), ((1771, (29, 33)), '*CHI:\txxx I picked up my own meat (.) .\n'), ((1793, (15, 19)), '*CHI:\t<you too baby> [>] (.) .\n'), ((1801, (14, 18)), '*CHI:\tyou too baby .\n'), ((1841, (6, 12)), '*CHI:\tpepper (.) .\n'), ((1871, (41, 45)), "*MOT:\tI know you wan(t) (t)a get into my food but you're not going to .\n"), ((1939, (15, 19)), '*FAT:\txxx your food .\n'), ((1947, (10, 14)), '*FAT:\txxx food Aimee .\n'), ((1991, (32, 42)), '*MOT:\t<eat [/] eat [/] eat your applesauce> [<] .\n'), ((2015, (6, 10)), '*MOT:\tBaby +...\n'), ((2027, (19, 25)), "*CHI:\tI'm eatin(g) dinner (.) .\n"), ((2031, (22, 27)), '*CHI:\tI want that [?] water .\n'), ((2043, (16, 21)), '*FAT:\tneed some water xxx .\n'), ((2046, (18, 23)), '*CHI:\tI want some water xxx .\n'), ((2095, (42, 46)), "*FAT:\t<nobody ain't> [/] nobody ain't xxx food there .\n"), ((2115, (26, 30)), '*CHI:\tDaddy [?] make your food one more xxx .\n'), ((2126, (30, 35)), '*BRO:\txxx stop tapping on the table .\n'), ((2180, (29, 33)), "*MOT:\t<don't throw away that milk> [<] .\n"), ((2217, (15, 19)), '*FAT:\teat your food .\n'), ((2220, (15, 19)), '*FAT:\teat your food .\n'), ((2228, (15, 19)), '*FAT:\teat your food .\n'), ((2241, (51, 55)), "*MOT:\tyeah but you don't need your arms for eating food .\n"), ((2276, (20, 24)), '*MOT:\tyou drink any milk ?\n'), ((2284, (20, 24)), '*MOT:\tyou drink any milk ?\n'), ((2314, (15, 19)), '*MOT:\teat your food .\n'), ((2324, (14, 18)), '*MOT:\txxx has food tonight ?\n'), ((2342, (25, 29)), '*CHI:\tMommy I eat all my food .\n')]
calculating accuracy and recall
correct labels:
set(['pepper', 'soup', 'potatoes', 'chocolate', 'water', 'juice', 'applesauce', 'milk'])
predicted labels:
set(['pepper', 'meat', 'soup', 'food', 'potatoes', 'supper', 'chocolate', 'water', 'juice', 'dinner', 'applesauce', 'fan', 'shake', 'baby', 'table', 'breakfast', 'milk'])
file:HSLLD/HV1/MT//aimmt1.cha
precision: 0.470588235294
recall: 1.0
true positives:['applesauce', 'chocolate', 'juice', 'milk', 'pepper', 'potatoes', 'soup', 'water']
false positives: ['baby', 'breakfast', 'dinner', 'fan', 'food', 'meat', 'shake', 'supper', 'table']
false negatives: []
# true pos: 8
# false pos: 9
# false neg: 0
HSLLD/HV1/MT//allmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74ae128>)
[('is', 'VBZ'), ('that', 'IN'), ('a', 'DT'), ('rabbit', 'NN')]
['rabbit']
('food -> ', [])
candidates to check:
1
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74ae368>)
[('a', 'DT'), ('rabbit', 'NN')]
['rabbit']
('food -> ', [])
candidates to check:
1
rabbit
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74ae4d0>)
[('no', 'DT'), ('rabbit', 'NN')]
['rabbit']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74ae998>)
[('that', 'DT'), ('s', 'VBZ'), ('not', 'RB'), ('his', 'PRP$'), ('green', 'JJ'), ('car', 'NN')]
['green']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
blue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74aecb0>)
[('blue', 'NN'), ('and', 'CC')]
['blue']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
4
descended from food: [['NN'], 'lunch', 28, 33]
candidates to check:
5
descended from food: [['NN'], 'butter', 13, 19]
peanut butter
peanut butter peanut butter 590
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['peanut', 'butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
butter
butter butter 499
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products'], ['butter', 'Fats and Oils']])
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'butter', 13, 19]
peanut butter
peanut butter peanut butter 590
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['peanut', 'butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
butter
butter butter 499
[('peanut', 'NN'), ('butter', 'NN'), ('and', 'CC'), ('jelly', 'RB')]
['butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products'], ['butter', 'Fats and Oils']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
celery
celery celery 18
[('celery', 'NN')]
['celery']
('food -> ', [['celery', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
celery
celery celery 18
[('you', 'PRP'), ('cut', 'VBD'), ('up', 'RP'), ('some', 'DT'), ('celery', 'NN')]
['celery']
('food -> ', [['celery', 'Vegetables and Vegetable Products']])
candidates to check:
2
celery
celery celery 18
[('with', 'IN'), ('celery', 'NN')]
['celery']
('food -> ', [['celery', 'Vegetables and Vegetable Products']])
candidates to check:
5
celery
celery celery 18
[('what', 'WP'), ('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('have', 'VB'), ('what', 'WP'), ('you', 'PRP'), ('have', 'VBP'), ('on', 'IN'), ('the', 'DT'), ('celery', 'NN')]
['celery']
('food -> ', [['celery', 'Vegetables and Vegetable Products']])
candidates to check:
5
descended from food: [['NN'], 'butter', 26, 32]
peanut butter
peanut butter peanut butter 590
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('have', 'VBP'), ('peanut', 'VBN'), ('butter', 'NN')]
['peanut', 'butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products']])
butter
butter butter 499
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('have', 'VBP'), ('peanut', 'VBN'), ('butter', 'NN')]
['butter']
('food -> ', [['peanut butter', 'Legumes and Legume Products'], ['butter', 'Fats and Oils']])
candidates to check:
5
descended from food: [['NN'], 'butter', 15, 21]
butter
butter butter 499
[('pean', 'JJ'), ('ut', 'NN'), ('butter', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
goose
goose goose 133
[('you', 'PRP'), ('re', 'VBP'), ('a', 'DT'), ('silly', 'RB'), ('goose', 'JJ')]
['goose']
('food -> ', [])
candidates to check:
5
candidates to check:
5
candidates to check:
3
descended from food: [['NN'], 'pizza', 10, 15]
pizza
pizza pizza 274
[('the', 'DT'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
1
descended from food: [['NN'], 'pizza', 9, 14]
pizza
pizza pizza 274
[('my', 'PRP$'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
5
cheese
cheese cheese 280
[('it', 'PRP'), ('s', 'VBZ'), ('you', 'PRP'), ('smell', 'VBP'), ('the', 'DT'), ('cheese', 'NN')]
['cheese']
('food -> ', [])
candidates to check:
3
descended from food: [['NN'], 'pizza', 16, 21]
pizza
pizza pizza 274
[('that', 'DT'), ('good', 'JJ'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
5
candidates to check:
5
candidates to check:
2
descended from food: [['NN'], 'pizza', 64, 69]
descended from food: [['NNS'], 'steak', 22, 27]
pizza
pizza pizza 274
[('there', 'EX'), ('s', 'VBZ'), ('no', 'DT'), ('more', 'RBR'), ('steak', 'NNS'), ('so', 'RB'), ('make', 'VB'), ('sure', 'JJ'), ('you', 'PRP'), ('finish', 'VBP'), ('eating', 'VBG'), ('your', 'PRP$'), ('pizza', 'NN'), ('too', 'RB')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
1
descended from food: [['NN'], 'steak', 22, 27]
candidates to check:
1
descended from food: [['NN'], 'pizza', 25, 30]
pizza
pizza pizza 274
[('finish', 'JJ'), ('eating', 'VBG'), ('your', 'PRP$'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
3
descended from food: [['NN'], 'steak', 19, 24]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
6
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
11
descended from food: [['NN'], 'food', 46, 50]
candidates to check:
5
candidates to check:
5
descended from food: [['NN'], 'food', 21, 25]
candidates to check:
5
descended from food: [['NN'], 'food', 19, 23]
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
7
candidates to check:
4
candidates to check:
3
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
4
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
7
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
7
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
9
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
10
candidates to check:
6
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
2
descended from food: [['NN'], 'steak', 24, 29]
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'pizza', 29, 34]
pizza
pizza pizza 274
[('eat', 'VB'), ('your', 'PRP$'), ('delicious', 'JJ'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'pizza', 20, 25]
pizza
pizza pizza 274
[('how', 'WRB'), ('about', 'IN'), ('the', 'DT'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'pizza', 25, 30]
pizza
pizza pizza 274
[('this', 'DT'), ('one', 'CD'), ('s', 'VBZ'), ('the', 'DT'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'pizza', 18, 23]
pizza
pizza pizza 274
[('i', 'NN'), ('call', 'NN'), ('this', 'DT'), ('pizza', 'NN'), ('too', 'RB')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'food', 22, 26]
candidates to check:
2
descended from food: [['NN'], 'pizza', 6, 11]
pizza
pizza pizza 274
[('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'pizza', 25, 30]
pizza
pizza pizza 274
[('who', 'WP'), ('likes', 'VBZ'), ('this', 'DT'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
4
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b744a908>)
[('you', 'PRP'), ('want', 'VBP'), ('dessert', 'JJ')]
['dessert']
('food -> ', [])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'dessert', 19, 26]
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b744a098>)
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('dessert', 'NN')]
['dessert']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'milk', 20, 24]
milk
milk milk 46
[('put', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
6
descended from food: [['NN'], 'sugar', 21, 26]
sugar
sugar sugar 399
[('grandpa', 'NN'), ('that', 'WDT'), ('s', 'VBZ'), ('sugar', 'NN'), ('in', 'IN'), ('there', 'EX')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'sugar', 21, 26]
sugar
sugar sugar 399
[('gon', 'NN'), ('na', 'TO'), ('put', 'VB'), ('some', 'DT'), ('sugar', 'NN'), ('on', 'IN'), ('there', 'EX'), ('too', 'RB')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'sugar', 13, 18]
sugar
sugar sugar 399
[('i', 'NN'), ('like', 'IN'), ('sugar', 'NN'), ('on', 'IN'), ('there', 'EX')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'milk', 50, 54]
descended from food: [['NNS'], 'crackers', 37, 45]
crackers
crackers crackers 453
[('you', 'PRP'), ('sticking', 'VBG'), ('your', 'PRP$'), ('finger', 'NN'), ('in', 'IN'), ('my', 'PRP$'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN'), ('for', 'IN')]
['crackers']
('food -> ', [['crackers', 'Baked Products']])
milk
milk milk 46
[('you', 'PRP'), ('sticking', 'VBG'), ('your', 'PRP$'), ('finger', 'NN'), ('in', 'IN'), ('my', 'PRP$'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN'), ('for', 'IN')]
['milk']
('food -> ', [['crackers', 'Baked Products']])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
2
descended from food: [['NN'], 'milk', 24, 28]
milk
milk milk 46
[('you', 'PRP'), ('done', 'VBN'), ('with', 'IN'), ('the', 'DT'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
6
descended from food: [['NN'], 'oatmeal', 23, 30]
oatmeal
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7452b90>)
[('but', 'CC'), ('um', 'JJ'), ('oatmeal', 'NN'), ('in', 'IN'), ('it', 'PRP')]
['oatmeal']
('food -> ', [])
candidates to check:
4
descended from food: [['NN'], 'milk', 29, 33]
descended from food: [['NNS'], 'crackers', 16, 24]
crackers
crackers crackers 453
[('it', 'PRP'), ('s', 'VBZ'), ('just', 'RB'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['crackers']
('food -> ', [['crackers', 'Baked Products']])
milk
milk milk 46
[('it', 'PRP'), ('s', 'VBZ'), ('just', 'RB'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['milk']
('food -> ', [['crackers', 'Baked Products']])
candidates to check:
8
descended from food: [['NNS'], 'crackers', 15, 23]
crackers
crackers crackers 453
[('saltine', 'NN'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['crackers']
('food -> ', [['crackers', 'Baked Products']])
milk
milk milk 46
[('saltine', 'NN'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['milk']
('food -> ', [['crackers', 'Baked Products']])
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
7
descended from food: [['NN'], 'supper', 56, 62]
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
2
descended from food: [['NN'], 'sugar', 22, 27]
sugar
sugar sugar 399
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('the', 'DT'), ('sugar', 'NN'), ('and', 'CC'), ('the', 'DT'), ('spoon', 'NN'), ('back', 'RB')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'sugar', 29, 34]
sugar
sugar sugar 399
[('you', 'PRP'), ('already', 'RB'), ('put', 'VBD'), ('enough', 'JJ'), ('sugar', 'NN'), ('on', 'IN'), ('there', 'EX')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
1
sugar
sugar sugar 399
[('grandma', 'NN'), ('s', 'NN'), ('trying', 'VBG'), ('to', 'TO'), ('sugar', 'VB'), ('me', 'PRP'), ('to', 'TO'), ('death', 'NN'), ('here', 'RB')]
['sugar']
('food -> ', [['sugar', 'Sweets']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'jelly', 18, 23]
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'milk', 32, 36]
descended from food: [['NNS'], 'crackers', 19, 27]
crackers
crackers crackers 453
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('like', 'IN'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['crackers']
('food -> ', [['crackers', 'Baked Products']])
milk
milk milk 46
[('d', 'NN'), ('you', 'PRP'), ('d', 'VBP'), ('like', 'IN'), ('crackers', 'NNS'), ('and', 'CC'), ('milk', 'NN')]
['milk']
('food -> ', [['crackers', 'Baked Products']])
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
descended from food: [['NN'], 'milk', 35, 39]
milk
milk milk 46
[('she', 'PRP'), ('says', 'VBZ'), ('she', 'PRP'), ('likes', 'VBZ'), ('them', 'PRP'), ('with', 'IN'), ('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
7
candidates to check:
6
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'ham', 30, 33]
ham
ham ham 141
[('the', 'DT'), ('night', 'NN'), ('he', 'PRP'), ('was', 'VBD'), ('making', 'VBG'), ('ham', 'NN'), ('in', 'IN'), ('the', 'DT'), ('oven', 'NN')]
['ham']
('food -> ', [['ham', 'Sausages and Luncheon Meats']])
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
4
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
4
candidates to check:
3
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b746e5a8>)
[('a', 'DT'), ('fan', 'NN'), ('belt', 'NN')]
['fan']
('food -> ', [])
candidates to check:
3
candidates to check:
3
fan
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b746eb48>)
[('fan', 'NN'), ('belt', 'NN')]
['fan']
('food -> ', [])
candidates to check:
5
candidates to check:
7
candidates to check:
1
candidates to check:
8
candidates to check:
7
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'honey', 34, 39]
honey
honey honey 304
[('now', 'RB'), ('sit', 'NN'), ('still', 'RB'), ('in', 'IN'), ('papa', 'JJ'), ('s', 'JJ'), ('lap', 'NN'), ('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
7
candidates to check:
6
descended from food: [['NN'], 'supper', 40, 46]
candidates to check:
3
fat
fat fat 900
[('she', 'PRP'), ('s', 'VBD'), ('going', 'VBG'), ('to', 'TO'), ('get', 'VB'), ('fat', 'JJ')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
3
fat
fat fat 900
[('i', 'NNS'), ('m', 'VBP'), ('not', 'RB'), ('fat', 'JJ')]
['fat']
('food -> ', [['fat', 'Fats and Oils']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'supper', 27, 33]
candidates to check:
2
descended from food: [['NN'], 'supper', 35, 41]
candidates to check:
2
descended from food: [['NN'], 'pizza', 6, 11]
pizza
pizza pizza 274
[('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'steak', 6, 11]
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
3
descended from food: [['NN'], 'steak', 6, 11]
descended from food: [['NN'], 'pizza', 16, 21]
pizza
pizza pizza 274
[('steak', 'NN'), ('and', 'CC'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
3
descended from food: [['NN'], 'steak', 6, 11]
descended from food: [['NN'], 'pizza', 16, 21]
pizza
pizza pizza 274
[('steak', 'NN'), ('and', 'CC'), ('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
4
macaroni
macaroni macaroni 128
[('she', 'PRP'), ('didn', 'VBD'), ('t', 'NNS'), ('like', 'IN'), ('the', 'DT'), ('macaroni', 'NN'), ('salad', 'NN')]
['macaroni']
('food -> ', [['macaroni', 'Cereal Grains and Pasta']])
candidates to check:
7
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'bacon', 22, 27]
bacon
bacon bacon 309
[('that', 'DT'), ('s', 'VBZ'), ('canadian', 'JJ'), ('bacon', 'NN')]
['bacon']
('food -> ', [['bacon', 'Legumes and Legume Products']])
canadian bacon
canadian bacon canadian bacon 146
[('that', 'DT'), ('s', 'VBZ'), ('canadian', 'JJ'), ('bacon', 'NN')]
['canadian', 'bacon']
('food -> ', [['bacon', 'Legumes and Legume Products'], ['canadian bacon', 'Pork Products']])
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
1
loading solution set
calculating
set([(1546, (6, 13)), (1585, (25, 32)), (721, (6, 11)), (1578, (10, 17)), (666, (29, 34)), (1161, (18, 23)), (216, (9, 14)), (684, (20, 25)), (235, (64, 69)), (936, (20, 24)), (991, (50, 54)), (137, (51, 57)), (1121, (29, 34)), (1167, (19, 27)), (939, (21, 26)), (1565, (6, 11)), (1045, (16, 24)), (235, (22, 27)), (1552, (6, 11)), (222, (31, 37)), (1149, (26, 31)), (945, (21, 26)), (1045, (29, 33)), (1113, (22, 27)), (628, (24, 29)), (145, (6, 21)), (107, (6, 29)), (247, (25, 30)), (741, (25, 30)), (1048, (7, 23)), (1167, (32, 36)), (1039, (23, 30)), (1540, (6, 11)), (1574, (6, 13)), (1568, (6, 11)), (1592, (13, 27)), (134, (11, 17)), (693, (25, 30)), (213, (10, 15)), (244, (22, 27)), (1571, (10, 17)), (955, (13, 18)), (1020, (24, 28)), (131, (22, 28)), (100, (6, 29)), (141, (19, 32)), (252, (19, 24)), (1180, (35, 39)), (1565, (16, 21)), (1568, (16, 21)), (1237, (30, 33)), (1581, (27, 41)), (991, (37, 45)), (122, (6, 12)), (1048, (28, 32)), (705, (18, 23)), (225, (16, 21))])
[((100, (6, 29)), '*CHI:\tpeanut butter and jelly .\n'), ((107, (6, 29)), '*MOT:\tpeanut butter and jelly ?\n'), ((122, (6, 12)), '*CHI:\tcelery .\n'), ((131, (22, 28)), '*MOT:\tyou cut up some celery .\n'), ((134, (11, 17)), '*CHI:\twith celery ?\n'), ((137, (51, 57)), "*GMA:\t<what d'you@d have> [/] what you have on the celery [!] ?\n"), ((141, (19, 32)), "*MOT:\td'you@d have peanut butter ?\n"), ((145, (6, 21)), '*CHI:\tpean(ut) butter !\n'), ((213, (10, 15)), '*GMA:\tthe pizza [!] .\n'), ((216, (9, 14)), '*CHI:\tmy pizza ?\n'), ((222, (31, 37)), "*GMA:\tit's [///] you smell the cheese [!] (.) .\n"), ((225, (16, 21)), '*GMA:\tthat good pizza ?\n'), ((235, (22, 27)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((235, (64, 69)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((244, (22, 27)), "*GMA:\tthere's no more steak .\n"), ((247, (25, 30)), '*GMA:\tfinish eating your pizza .\n'), ((252, (19, 24)), "*CHI:\tthere's more steak !\n"), ((628, (24, 29)), '*CHI:\tone more piece of steak left [!] .\n'), ((666, (29, 34)), '*GMA:\teat [<] your delicious pizza .\n'), ((684, (20, 25)), '*GMA:\thow about the pizza ?\n'), ((693, (25, 30)), "*GMA:\tthis [!] one's the pizza .\n"), ((705, (18, 23)), '*CHI:\tI call this pizza too .\n'), ((721, (6, 11)), '*CHI:\tpizza .\n'), ((741, (25, 30)), '*CHI:\twho likes this [!] pizza ?\n'), ((936, (20, 24)), '*GFA:\tput some more milk .\n'), ((939, (21, 26)), "*CHI:\tGrandpa that's sugar [?] in there ?\n"), ((945, (21, 26)), '*GFA:\tgonna put some sugar on there too .\n'), ((955, (13, 18)), '*GFA:\tI like sugar on there .\n'), ((991, (37, 45)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((991, (50, 54)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((1020, (24, 28)), '*GMA:\tyou done with the milk ?\n'), ((1039, (23, 30)), '*CHI:\tbut (.) &-um (.) oatmeal in it ?\n'), ((1045, (16, 24)), "*GFA:\tit's just crackers and milk .\n"), ((1045, (29, 33)), "*GFA:\tit's just crackers and milk .\n"), ((1048, (7, 23)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1048, (28, 32)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1113, (22, 27)), '*GFA:\t<can I have the sugar and the spoon> [<] back ?\n'), ((1121, (29, 34)), '*GMA:\tyou already put enough sugar on there (.) .\n'), ((1149, (26, 31)), "*GFA:\tGrandma's trying to sugar me to death here .\n"), ((1161, (18, 23)), "*CHI:\tit's by the jelly !\n"), ((1167, (19, 27)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1167, (32, 36)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1180, (35, 39)), '*MOT:\tshe says she likes them with milk .\n'), ((1237, (30, 33)), '*GMA:\tthe night he was making ham in the oven .\n'), ((1540, (6, 11)), '*CHI:\tpizza .\n'), ((1546, (6, 13)), '*CHI:\tcalzone .\n'), ((1552, (6, 11)), '*CHI:\tsteak .\n'), ((1565, (6, 11)), '*CHI:\tsteak and pizza !\n'), ((1565, (16, 21)), '*CHI:\tsteak and pizza !\n'), ((1568, (6, 11)), '*GFA:\tsteak and pizza ?\n'), ((1568, (16, 21)), '*GFA:\tsteak and pizza ?\n'), ((1571, (10, 17)), '*GMA:\tand calzone [>] .\n'), ((1574, (6, 13)), '*CHI:\tcalzone [<] .\n'), ((1578, (10, 17)), '*GFA:\tand calzone !\n'), ((1581, (27, 41)), "*GMA:\tshe didn't like the <macaroni salad> [>] .\n"), ((1585, (25, 32)), '*MOT:\t<did you like that calzone xxx> [<] ?\n'), ((1592, (13, 27)), "*MOT:\tthat's Canadian bacon .\n")]
set([(16, (16, 22)), (63, (6, 10)), (721, (6, 11)), (1467, (40, 46)), (666, (29, 34)), (1534, (27, 33)), (1237, (30, 33)), (205, (21, 26)), (1048, (15, 23)), (1161, (18, 23)), (216, (9, 14)), (1537, (35, 41)), (684, (20, 25)), (235, (64, 69)), (1581, (27, 35)), (936, (20, 24)), (991, (50, 54)), (137, (51, 57)), (1121, (29, 34)), (1390, (7, 10)), (27, (8, 14)), (332, (21, 25)), (1045, (16, 24)), (235, (22, 27)), (805, (15, 22)), (1540, (6, 11)), (222, (31, 37)), (1149, (26, 31)), (945, (21, 26)), (1045, (29, 33)), (1113, (22, 27)), (628, (24, 29)), (1180, (35, 39)), (1089, (56, 62)), (122, (6, 12)), (247, (25, 30)), (741, (25, 30)), (955, (13, 18)), (714, (22, 26)), (1167, (32, 36)), (1039, (23, 30)), (96, (28, 33)), (145, (15, 21)), (1568, (6, 11)), (1384, (8, 11)), (1475, (25, 28)), (1446, (34, 39)), (107, (6, 19)), (693, (25, 30)), (1167, (19, 27)), (1592, (13, 27)), (213, (10, 15)), (244, (22, 27)), (939, (21, 26)), (819, (19, 26)), (30, (9, 15)), (1020, (24, 28)), (100, (6, 19)), (134, (11, 17)), (131, (22, 28)), (1565, (6, 11)), (141, (19, 32)), (252, (19, 24)), (1565, (16, 21)), (1568, (16, 21)), (51, (21, 26)), (323, (46, 50)), (1489, (14, 17)), (991, (37, 45)), (337, (19, 23)), (1048, (28, 32)), (1552, (6, 11)), (705, (18, 23)), (225, (16, 21))])
[((16, (16, 22)), '*CHI:\tis that a rabbit ?\n'), ((27, (8, 14)), '*GMA:\ta rabbit ?\n'), ((30, (9, 15)), '*CHI:\tno rabbit .\n'), ((51, (21, 26)), "*CHI:\tthat's not his green car .\n"), ((63, (6, 10)), '*MOT:\tblue and [>] .\n'), ((96, (28, 33)), "*MOT:\twhat d'you@d have for lunch today ?\n"), ((100, (6, 19)), '*CHI:\tpeanut butter and jelly .\n'), ((107, (6, 19)), '*MOT:\tpeanut butter and jelly ?\n'), ((122, (6, 12)), '*CHI:\tcelery .\n'), ((131, (22, 28)), '*MOT:\tyou cut up some celery .\n'), ((134, (11, 17)), '*CHI:\twith celery ?\n'), ((137, (51, 57)), "*GMA:\t<what d'you@d have> [/] what you have on the celery [!] ?\n"), ((141, (19, 32)), "*MOT:\td'you@d have peanut butter ?\n"), ((145, (15, 21)), '*CHI:\tpean(ut) butter !\n'), ((205, (21, 26)), "*GMA:\tyou're a silly goose .\n"), ((213, (10, 15)), '*GMA:\tthe pizza [!] .\n'), ((216, (9, 14)), '*CHI:\tmy pizza ?\n'), ((222, (31, 37)), "*GMA:\tit's [///] you smell the cheese [!] (.) .\n"), ((225, (16, 21)), '*GMA:\tthat good pizza ?\n'), ((235, (22, 27)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((235, (64, 69)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((244, (22, 27)), "*GMA:\tthere's no more steak .\n"), ((247, (25, 30)), '*GMA:\tfinish eating your pizza .\n'), ((252, (19, 24)), "*CHI:\tthere's more steak !\n"), ((323, (46, 50)), "*CHI:\t<I'm gonna put my> [/] I'm gonna put my food <in a paper> [/] in a paper bag [!] this (.) time .\n"), ((332, (21, 25)), '*CHI:\tI gonna put my food in a paper <bag [!]> [>] .\n'), ((337, (19, 23)), '*GMA:\tput [<] your food in a paper bag ?\n'), ((628, (24, 29)), '*CHI:\tone more piece of steak left [!] .\n'), ((666, (29, 34)), '*GMA:\teat [<] your delicious pizza .\n'), ((684, (20, 25)), '*GMA:\thow about the pizza ?\n'), ((693, (25, 30)), "*GMA:\tthis [!] one's the pizza .\n"), ((705, (18, 23)), '*CHI:\tI call this pizza too .\n'), ((714, (22, 26)), '*CHI:\tthis is kind of food .\n'), ((721, (6, 11)), '*CHI:\tpizza .\n'), ((741, (25, 30)), '*CHI:\twho likes this [!] pizza ?\n'), ((805, (15, 22)), '*MOT:\tyou want dessert ?\n'), ((819, (19, 26)), "*CHI:\tI don't want dessert .\n"), ((936, (20, 24)), '*GFA:\tput some more milk .\n'), ((939, (21, 26)), "*CHI:\tGrandpa that's sugar [?] in there ?\n"), ((945, (21, 26)), '*GFA:\tgonna put some sugar on there too .\n'), ((955, (13, 18)), '*GFA:\tI like sugar on there .\n'), ((991, (37, 45)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((991, (50, 54)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((1020, (24, 28)), '*GMA:\tyou done with the milk ?\n'), ((1039, (23, 30)), '*CHI:\tbut (.) &-um (.) oatmeal in it ?\n'), ((1045, (16, 24)), "*GFA:\tit's just crackers and milk .\n"), ((1045, (29, 33)), "*GFA:\tit's just crackers and milk .\n"), ((1048, (15, 23)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1048, (28, 32)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1089, (56, 62)), '*GFA:\tyou <sa(ved)> [//] you saved some room for my [!] supper (.) ?\n'), ((1113, (22, 27)), '*GFA:\t<can I have the sugar and the spoon> [<] back ?\n'), ((1121, (29, 34)), '*GMA:\tyou already put enough sugar on there (.) .\n'), ((1149, (26, 31)), "*GFA:\tGrandma's trying to sugar me to death here .\n"), ((1161, (18, 23)), "*CHI:\tit's by the jelly !\n"), ((1167, (19, 27)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1167, (32, 36)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1180, (35, 39)), '*MOT:\tshe says she likes them with milk .\n'), ((1237, (30, 33)), '*GMA:\tthe night he was making ham in the oven .\n'), ((1384, (8, 11)), '*GFA:\ta fan belt .\n'), ((1390, (7, 10)), '*CHI:\t<fan belt> [>] ?\n'), ((1446, (34, 39)), "*MOT:\tnow sit still in Papa's lap honey .\n"), ((1467, (40, 46)), "*GFA:\t<she's having her second [!]> [<] supper [!] .\n"), ((1475, (25, 28)), "*MOT:\tshe's going to get fat !\n"), ((1489, (14, 17)), "*GFA:\tI'm not fat [!] .\n"), ((1534, (27, 33)), "*GMA:\twhat d'you@d eat for supper before (.) ?\n"), ((1537, (35, 41)), "*GMA:\twhat d'you@d already eat for supper ?\n"), ((1540, (6, 11)), '*CHI:\tpizza .\n'), ((1552, (6, 11)), '*CHI:\tsteak .\n'), ((1565, (6, 11)), '*CHI:\tsteak and pizza !\n'), ((1565, (16, 21)), '*CHI:\tsteak and pizza !\n'), ((1568, (6, 11)), '*GFA:\tsteak and pizza ?\n'), ((1568, (16, 21)), '*GFA:\tsteak and pizza ?\n'), ((1581, (27, 35)), "*GMA:\tshe didn't like the <macaroni salad> [>] .\n"), ((1592, (13, 27)), "*MOT:\tthat's Canadian bacon .\n")]
calculating accuracy and recall
correct labels:
set(['cheese', 'ham', 'macaroni salad', 'sugar', 'jelly', 'oatmeal', 'milk', 'celery', 'peanut butter and jelly', 'calzone', 'saltine crackers', 'crackers', 'steak', 'canadian bacon', 'pean(ut) butter', 'peanut butter', 'pizza'])
predicted labels:
set(['cheese', 'honey', 'milk', 'blue', 'ham', 'sugar', 'celery', 'macaroni', 'pizza', 'food', 'dessert', 'fat', 'lunch', 'fan', 'rabbit', 'supper', 'butter', 'goose', 'jelly', 'oatmeal', 'green', 'crackers', 'steak', 'canadian bacon', 'peanut butter'])
file:HSLLD/HV1/MT//allmt1.cha
precision: 0.48
recall: 0.705882352941
true positives:['canadian bacon', 'celery', 'cheese', 'crackers', 'ham', 'jelly', 'milk', 'oatmeal', 'peanut butter', 'pizza', 'steak', 'sugar']
false positives: ['blue', 'butter', 'dessert', 'fan', 'fat', 'food', 'goose', 'green', 'honey', 'lunch', 'macaroni', 'rabbit', 'supper']
false negatives: ['calzone', 'macaroni salad', 'pean(ut) butter', 'peanut butter and jelly', 'saltine crackers']
# true pos: 12
# false pos: 13
# false neg: 5
HSLLD/HV1/MT//rilmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//rilmt1.cha
HSLLD/HV1/MT//sarmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//sarmt1.cha
HSLLD/HV1/MT//joymt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//joymt1.cha
HSLLD/HV1/MT//melmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//melmt1.cha
HSLLD/HV1/MT//tommt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tommt1.cha
HSLLD/HV1/MT//joemt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//joemt1.cha
HSLLD/HV1/MT//emimt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
7
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74331b8>)
[('that', 'DT'), ('s', 'VBZ'), ('on', 'IN'), ('the', 'DT'), ('on', 'IN'), ('that', 'DT'), ('yellow', 'JJ'), ('thing', 'NN')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74335a8>)
[('what', 'WP'), ('yellow', 'JJ'), ('things', 'NNS')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7433878>)
[('what', 'WP'), ('yellow', 'JJ'), ('thing', 'NN')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7433ab8>)
[('the', 'DT'), ('yellow', 'JJ'), ('thing', 'NN'), ('that', 'WDT'), ('um', 'JJ'), ('susan', 'NN'), ('had', 'VBD')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7433d88>)
[('what', 'WP'), ('yellow', 'JJ'), ('thing', 'NN')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
6
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7400290>)
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NN'), ('know', 'VBP'), ('what', 'WP'), ('yellow', 'JJ'), ('thing', 'NN'), ('you', 'PRP'), ('re', 'VBP'), ('talking', 'VBG'), ('about', 'IN'), ('emily', 'RB')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
6
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7400518>)
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('remember', 'VB'), ('yellow', 'JJ'), ('things', 'NNS')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
3
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7433ab8>)
[('do', 'VB'), ('you', 'PRP'), ('remember', 'VB'), ('a', 'DT'), ('yellow', 'JJ'), ('thing', 'NN'), ('that', 'IN'), ('she', 'PRP'), ('had', 'VBD')]
['yellow']
('food -> ', [])
candidates to check:
3
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7433fc8>)
[('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('remember', 'VB'), ('a', 'DT'), ('yellow', 'JJ'), ('thing', 'NN'), ('either', 'CC')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'butter', 6, 12]
butter
butter butter 499
[('butter', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b74009e0>)
[('heather', 'RB'), ('must', 'MD'), ('like', 'VB'), ('to', 'TO'), ('eat', 'VB'), ('off', 'RP'), ('the', 'DT'), ('um', 'NN'), ('table', 'NN'), ('more', 'JJR'), ('than', 'IN'), ('she', 'PRP'), ('likes', 'VBZ'), ('to', 'TO'), ('eat', 'VB'), ('off', 'RP'), ('the', 'DT'), ('dish', 'NN')]
['table']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
5
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7400f38>)
[('eat', 'VB'), ('your', 'PRP$'), ('own', 'JJ'), ('baby', 'NN')]
['baby']
('food -> ', [])
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
broccoli
broccoli broccoli 30
[('do', 'VBP'), ('you', 'PRP'), ('want', 'VB'), ('some', 'DT'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
2
broccoli
broccoli broccoli 30
[('i', 'JJ'), ('hate', 'VBP'), ('broccoli', 'NNS')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'pork', 25, 29]
pork
pork pork 541
[('mom', 'NN'), ('i', 'VBZ'), ('only', 'RB'), ('got', 'VBD'), ('one', 'CD'), ('pork', 'NN'), ('chop', 'NN')]
['pork']
('food -> ', [['pork', 'Pork Products']])
candidates to check:
6
candidates to check:
2
candidates to check:
4
candidates to check:
2
descended from food: [['NN'], 'porkchop', 26, 34]
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
9
broccoli
broccoli broccoli 30
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS'), ('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('potato', 'JJ'), ('salad', 'NN'), ('and', 'CC'), ('there', 'EX'), ('is', 'VBZ'), ('uh', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
potato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7428cb0>)
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS'), ('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('potato', 'JJ'), ('salad', 'NN'), ('and', 'CC'), ('there', 'EX'), ('is', 'VBZ'), ('uh', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['potato']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
potato salad
potato salad potato salad 143
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS'), ('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('potato', 'JJ'), ('salad', 'NN'), ('and', 'CC'), ('there', 'EX'), ('is', 'VBZ'), ('uh', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['potato', 'salad']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products'], ['potato salad', 'Vegetables and Vegetable Products']])
corn
corn corn 419
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS'), ('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('potato', 'JJ'), ('salad', 'NN'), ('and', 'CC'), ('there', 'EX'), ('is', 'VBZ'), ('uh', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products'], ['potato salad', 'Vegetables and Vegetable Products'], ['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
corn
corn corn 419
[('xxx', 'JJ'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
applesauce
applesauce applesauce 76
[('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('applesauce', 'NNS')]
['applesauce']
('food -> ', [['applesauce', 'Fruits and Fruit Juices']])
candidates to check:
3
descended from food: [['NNS'], 'porkchops', 32, 41]
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
descended from food: [['NNS'], 'porkchops', 15, 24]
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
corn
corn corn 419
[('oh', 'IN'), ('you', 'PRP'), ('want', 'VBP'), ('the', 'DT'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
corn
corn corn 419
[('you', 'PRP'), ('re', 'VBP'), ('too', 'RB'), ('little', 'JJ'), ('to', 'TO'), ('eat', 'VB'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN'), ('heather', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
2
descended from food: [['NNS'], 'porkchops', 20, 29]
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
4
corn
corn corn 419
[('nobody', 'NN'), ('takes', 'VBZ'), ('my', 'PRP$'), ('corn', 'NN'), ('heather', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
7
candidates to check:
2
candidates to check:
2
water
water water 18
[('water', 'NN'), ('mommy', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
1
candidates to check:
3
candidates to check:
3
corn
corn corn 419
[('is', 'VBZ'), ('there', 'EX'), ('any', 'DT'), ('more', 'JJR'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
3
broccoli
broccoli broccoli 30
[('there', 'RB'), ('s', 'VBZ'), ('more', 'JJR'), ('broccoli', 'NNS')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
8
broccoli
broccoli broccoli 30
[('eat', 'NN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
4
broccoli
broccoli broccoli 30
[('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
5
broccoli
broccoli broccoli 30
[('broccoli', 'NN'), ('s', 'NN'), ('good', 'NN'), ('for', 'IN'), ('you', 'PRP')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'dessert', 13, 20]
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b741fd88>)
[('what', 'WP'), ('s', 'VBD'), ('dessert', 'NN')]
['dessert']
('food -> ', [])
candidates to check:
2
honey
honey honey 304
[('honey', 'NN'), ('dew', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
5
honey
honey honey 304
[('honey', 'NN'), ('dew', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
8
fruit salad
fruit salad fruit salad 86
[('fruit', 'NN'), ('salad', 'NN')]
['fruit', 'salad']
('food -> ', [['fruit salad', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
6
descended from food: [['NN'], 'salad', 44, 49]
fruit salad
fruit salad fruit salad 86
[('i', 'JJ'), ('don', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('enough', 'JJ'), ('stuff', 'NN'), ('for', 'IN'), ('a', 'DT'), ('fruit', 'NN'), ('salad', 'NN')]
['fruit', 'salad']
('food -> ', [['fruit salad', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
5
candidates to check:
2
descended from food: [['NN'], 'applesauce', 24, 34]
applesauce
applesauce applesauce 76
[('i', 'NN'), ('want', 'VBP'), ('more', 'JJR'), ('applesauce', 'NNS')]
['applesauce']
('food -> ', [['applesauce', 'Fruits and Fruit Juices']])
candidates to check:
1
candidates to check:
7
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
corn
corn corn 419
[('i', 'NNS'), ('have', 'VBP'), ('a', 'DT'), ('corn', 'NN'), ('for', 'IN'), ('you', 'PRP'), ('if', 'IN'), ('you', 'PRP'), ('want', 'VBP')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
corn
corn corn 419
[('you', 'PRP'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['NNS'], 'applesauce', 27, 37]
applesauce
applesauce applesauce 76
[('can', 'MD'), ('i', 'VB'), ('have', 'VB'), ('some', 'DT'), ('more', 'JJR'), ('applesauce', 'NNS')]
['applesauce']
('food -> ', [['applesauce', 'Fruits and Fruit Juices']])
candidates to check:
5
candidates to check:
1
candidates to check:
6
candidates to check:
6
broccoli
broccoli broccoli 30
[('i', 'NN'), ('ate', 'VBP'), ('my', 'PRP$'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
6
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
corn
corn corn 419
[('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('some', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
4
descended from food: [['NN'], 'butter', 20, 26]
butter
butter butter 499
[('gi', 'NN'), ('ve', 'IN'), ('me', 'PRP'), ('the', 'DT'), ('butter', 'NN'), ('please', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
2
descended from food: [['NN'], 'butter', 17, 23]
butter
butter butter 499
[('i', 'NNS'), ('need', 'VBP'), ('the', 'DT'), ('butter', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
corn
corn corn 419
[('there', 'RB'), ('s', 'VBZ'), ('only', 'RB'), ('one', 'CD'), ('more', 'JJR'), ('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN'), ('and', 'CC'), ('three', 'CD'), ('of', 'IN'), ('you', 'PRP'), ('guys', 'VBP')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
4
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b736bfc8>)
[('you', 'PRP'), ('guys', 'VBP'), ('while', 'IN'), ('i', 'JJ'), ('m', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('shower', 'NN'), ('are', 'VBP'), ('cleaning', 'VBG'), ('off', 'RP'), ('this', 'DT'), ('table', 'NN')]
['table']
('food -> ', [])
candidates to check:
2
honey
honey honey 304
[('what', 'WP'), ('about', 'IN'), ('um', 'JJ'), ('honey', 'NN'), ('dew', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
2
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
12
cream
cream cream 72
[('mom', 'NN'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('the', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('now', 'RB')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('mom', 'NN'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('can', 'MD'), ('i', 'VB'), ('have', 'VBP'), ('the', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('now', 'RB')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
candidates to check:
2
candidates to check:
7
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
8
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
6
baby
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b741f1b8>)
[('you', 'PRP'), ('re', 'VBP'), ('gon', 'VB'), ('t', 'VB'), ('a', 'DT'), ('going', 'VBG'), ('to', 'TO'), ('be', 'VB'), ('with', 'IN'), ('the', 'DT'), ('baby', 'NN'), ('sitter', 'NN')]
['baby']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'ketchup', 6, 13]
candidates to check:
2
candidates to check:
1
candidates to check:
5
descended from food: [['NN'], 'ketchup', 6, 13]
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
4
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
3
salt
salt salt 0
[('salt', 'NN'), ('and', 'CC'), ('pepper', 'NN'), ('mom', 'NN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
pepper
pepper pepper 27
[('salt', 'NN'), ('and', 'CC'), ('pepper', 'NN'), ('mom', 'NN')]
['pepper']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
4
salt
salt salt 0
[('freddy', 'RB'), ('give', 'VB'), ('me', 'PRP'), ('the', 'DT'), ('salt', 'NN'), ('please', 'NN')]
['salt']
('food -> ', [['salt', 'Spices and Herbs']])
candidates to check:
1
descended from food: [['NN'], 'butter', 20, 26]
butter
butter butter 499
[('ma', 'NN'), ('i', 'NNS'), ('need', 'VBP'), ('the', 'DT'), ('butter', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
2
descended from food: [['NN'], 'butter', 18, 24]
butter
butter butter 499
[('where', 'WRB'), ('s', 'PDT'), ('the', 'DT'), ('butter', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
2
descended from food: [['NN'], 'butter', 18, 24]
butter
butter butter 499
[('where', 'WRB'), ('s', 'PDT'), ('the', 'DT'), ('butter', 'NN')]
['butter']
('food -> ', [['butter', 'Fats and Oils']])
candidates to check:
3
corn
corn corn 419
[('you', 'PRP'), ('re', 'VBP'), ('not', 'RB'), ('gon', 'VB'), ('t', 'VB'), ('a', 'DT'), ('going', 'VBG'), ('to', 'TO'), ('be', 'VB'), ('able', 'JJ'), ('to', 'TO'), ('finish', 'VB'), ('this', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
corn
corn corn 419
[('why', 'WRB'), ('don', 'JJ'), ('t', 'NN'), ('we', 'PRP'), ('save', 'VBP'), ('this', 'DT'), ('corn', 'NN'), ('for', 'IN'), ('you', 'PRP'), ('for', 'IN'), ('later', 'JJR')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
candidates to check:
8
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'food', 17, 21]
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'food', 22, 26]
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
descended from food: [['NN'], 'salad', 18, 23]
potato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7359710>)
[('have', 'VB'), ('potato', 'NN'), ('salad', 'NN')]
['potato']
('food -> ', [])
potato salad
potato salad potato salad 143
[('have', 'VB'), ('potato', 'NN'), ('salad', 'NN')]
['potato', 'salad']
('food -> ', [['potato salad', 'Vegetables and Vegetable Products']])
candidates to check:
3
descended from food: [['NN'], 'salad', 20, 25]
potato
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7359ea8>)
[('i', 'JJ'), ('hate', 'VBP'), ('potato', 'NN'), ('salad', 'NN')]
['potato']
('food -> ', [])
potato salad
potato salad potato salad 143
[('i', 'JJ'), ('hate', 'VBP'), ('potato', 'NN'), ('salad', 'NN')]
['potato', 'salad']
('food -> ', [['potato salad', 'Vegetables and Vegetable Products']])
candidates to check:
2
candidates to check:
1
broccoli
broccoli broccoli 30
[('xxx', 'NN'), ('broccoli', 'NN')]
['broccoli']
('food -> ', [['broccoli', 'Vegetables and Vegetable Products']])
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
descended from food: [['NNS'], 'applesauce', 16, 26]
applesauce
applesauce applesauce 76
[('have', 'VB'), ('more', 'JJR'), ('applesauce', 'NNS')]
['applesauce']
('food -> ', [['applesauce', 'Fruits and Fruit Juices']])
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
7
descended from food: [['NN'], 'food', 49, 53]
candidates to check:
4
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'pork', 10, 14]
pork
pork pork 541
[('one', 'CD'), ('pork', 'NN'), ('chop', 'NN')]
['pork']
('food -> ', [['pork', 'Pork Products']])
candidates to check:
1
candidates to check:
4
water
water water 18
[('i', 'NN'), ('want', 'VBP'), ('some', 'DT'), ('water', 'NN')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
descended from food: [['NN'], 'popsicle', 14, 22]
candidates to check:
1
candidates to check:
3
candidates to check:
6
descended from food: [['NN'], 'applesauce', 32, 42]
applesauce
applesauce applesauce 76
[('i', 'NN'), ('want', 'VBP'), ('some', 'DT'), ('more', 'RBR'), ('um', 'JJ'), ('applesauce', 'NN')]
['applesauce']
('food -> ', [['applesauce', 'Fruits and Fruit Juices']])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
7
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
loading solution set
calculating
set([(1324, (8, 18)), (1218, (18, 24)), (706, (20, 28)), (1534, (32, 42)), (966, (20, 26)), (823, (27, 37)), (523, (27, 37)), (335, (13, 21)), (1334, (6, 16)), (765, (40, 51)), (1203, (6, 10)), (772, (19, 30)), (1508, (18, 23)), (425, (19, 27)), (627, (26, 30)), (691, (24, 39)), (740, (38, 49)), (586, (20, 29)), (783, (21, 25)), (425, (81, 96)), (721, (6, 15)), (1228, (61, 65)), (984, (28, 43)), (700, (19, 27)), (1337, (16, 26)), (759, (21, 32)), (798, (21, 36)), (1074, (43, 52)), (442, (11, 26)), (709, (6, 14)), (527, (32, 41)), (384, (26, 34)), (734, (7, 18)), (359, (25, 34)), (573, (31, 46)), (563, (22, 37)), (969, (17, 23)), (943, (22, 26)), (724, (6, 15)), (836, (16, 24)), (1030, (26, 35)), (1206, (25, 29)), (1311, (11, 23)), (679, (6, 11)), (350, (16, 25)), (1203, (15, 21)), (703, (11, 19)), (257, (6, 12)), (1314, (13, 25)), (329, (29, 37)), (1040, (19, 30)), (1215, (18, 24)), (1499, (10, 19)), (425, (45, 57)), (1149, (6, 13)), (753, (24, 34)), (1525, (14, 22)), (1318, (10, 18)), (1561, (38, 48)), (547, (15, 24)), (1233, (29, 33)), (1209, (20, 26))])
[((257, (6, 12)), '*MOT:\tbutter .\n'), ((329, (29, 37)), '*MOT:\t<do you want> [<] some broccoli ?\n'), ((335, (13, 21)), '*BR3:\tI hate broccoli .\n'), ((350, (16, 25)), '*BR2:\t<any more porkchops> [<] ?\n'), ((359, (25, 34)), '*BR2:\tMom I only got one pork chop .\n'), ((384, (26, 34)), '*MOT:\tdo you want another porkchop ?\n'), ((425, (19, 27)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (45, 57)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (81, 96)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((442, (11, 26)), '*BR2:\t<xxx corn on the cob> [<] ?\n'), ((523, (27, 37)), '*CHI:\tcan I have some more applesauce [>] ?\n'), ((527, (32, 41)), '*MOT:\t<did Heather eat> [<] her porkchops ?\n'), ((547, (15, 24)), '*MOT:\tyou like porkchops ?\n'), ((563, (22, 37)), '*MOT:\toh you want the corn on the cob .\n'), ((573, (31, 46)), "*MOT:\tyou're too little to eat corn on the cob Heather .\n"), ((586, (20, 29)), '*MOT:\tshe wants the porkchops .\n'), ((627, (26, 30)), '*BR2:\tnobody [<] takes my corn Heather .\n'), ((679, (6, 11)), '*BR2:\twater Mommy .\n'), ((691, (24, 39)), '*BR1:\tis there any more corn on the cob ?\n'), ((700, (19, 27)), "*MOT:\tthere's more broccoli .\n"), ((703, (11, 19)), '*MOT:\t<eat broccoli> [>] .\n'), ((706, (20, 28)), "*BR1:\t<I don't want broccoli> [<] .\n"), ((709, (6, 14)), "*MOT:\tbroccoli's good for you .\n"), ((721, (6, 15)), '*MOT:\thoney+dew .\n'), ((724, (6, 15)), '*BR2:\thoney+dew [>] ?\n'), ((734, (7, 18)), '*BR1:\t<fruit salad> [<] ?\n'), ((740, (38, 49)), "*MOT:\tI don't have enough stuff for a fruit salad .\n"), ((753, (24, 34)), '*CHI:\t<I want> [<] more applesauce .\n'), ((759, (21, 32)), '*BR2:\twhat about the Fudgesicles [>] ?\n'), ((765, (40, 51)), '*BR2:\t<you said> [<] we were gonna have Fudgesicles .\n'), ((772, (19, 30)), '*MOT:\tyou can have Fudgesicles too .\n'), ((783, (21, 25)), '*MOT:\t<I have> [<] a corn for you <if you want> [>] .\n'), ((798, (21, 36)), "*MOT:\tyou don't want corn on the cob ?\n"), ((823, (27, 37)), '*CHI:\tcan I have some more applesauce .\n'), ((836, (16, 24)), '*CHI:\tI ate <my broccoli> [>] .\n'), ((943, (22, 26)), '*BR3:\tcan I have some corn ?\n'), ((966, (20, 26)), '*MOT:\tgi(ve) me the butter please .\n'), ((969, (17, 23)), '*CHI:\tI need the butter !\n'), ((984, (28, 43)), "*MOT:\tthere's only one more corn on the cob and three of you guys .\n"), ((1030, (26, 35)), '*BR1:\twhat about (.) &-um honey+dew ?\n'), ((1040, (19, 30)), '*MOT:\tyou have the Fudgesicles .\n'), ((1074, (43, 52)), '*BR1:\tmom <can I have> [/] can I have <the ice cream now> [>] .\n'), ((1149, (6, 13)), '*BR2:\tketchup .\n'), ((1203, (6, 10)), '*BR2:\tsalt and pepper Mom .\n'), ((1203, (15, 21)), '*BR2:\tsalt and pepper Mom .\n'), ((1206, (25, 29)), '*MOT:\tFreddy give me the salt please .\n'), ((1209, (20, 26)), '*CHI:\tMa I need the butter !\n'), ((1215, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1218, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1228, (61, 65)), "*MOT:\tyou're not gon(t)a [: going to] be able to finish this corn .\n"), ((1233, (29, 33)), "*MOT:\twhy don't we save this corn for you for later ?\n"), ((1311, (11, 23)), '*MOT:\thave potato salad .\n'), ((1314, (13, 25)), '*BR1:\tI hate potato salad .\n'), ((1318, (10, 18)), '*MOT:\txxx broccoli .\n'), ((1324, (8, 18)), '*BR2:\ta Fudgesicle !\n'), ((1334, (6, 16)), '*CHI:\tFudgesicle !\n'), ((1337, (16, 26)), '*MOT:\thave more applesauce .\n'), ((1499, (10, 19)), '*MOT:\tone pork chop .\n'), ((1508, (18, 23)), '*CHI:\tI want some water [>] !\n'), ((1525, (14, 22)), '*BR1:\txxx the popsicle .\n'), ((1534, (32, 42)), '*CHI:\tI want some more &-um (.) applesauce .\n'), ((1561, (38, 48)), "*BR2:\tyou're gonna get dirty with the Fudgesicle anyway (.) .\n")]
set([(1206, (25, 29)), (721, (6, 11)), (1218, (18, 24)), (706, (20, 28)), (116, (11, 17)), (691, (24, 28)), (966, (20, 26)), (724, (6, 11)), (212, (24, 30)), (823, (27, 37)), (329, (29, 37)), (335, (13, 21)), (267, (44, 49)), (147, (11, 17)), (573, (31, 35)), (127, (11, 17)), (1162, (6, 13)), (286, (20, 24)), (1030, (26, 31)), (442, (11, 15)), (1508, (18, 23)), (425, (19, 27)), (740, (38, 49)), (627, (26, 30)), (1203, (6, 10)), (1293, (17, 21)), (222, (27, 33)), (586, (20, 29)), (1363, (49, 53)), (1499, (10, 14)), (783, (21, 25)), (715, (13, 20)), (1228, (61, 65)), (984, (28, 32)), (700, (19, 27)), (1337, (16, 26)), (1138, (46, 50)), (563, (22, 26)), (205, (23, 29)), (1299, (22, 26)), (1534, (32, 42)), (709, (6, 14)), (527, (32, 41)), (384, (26, 34)), (734, (7, 18)), (523, (27, 37)), (1215, (18, 24)), (836, (16, 24)), (969, (17, 23)), (943, (22, 26)), (1209, (20, 26)), (1149, (6, 13)), (1311, (11, 23)), (679, (6, 11)), (1203, (15, 21)), (798, (21, 25)), (703, (11, 19)), (257, (6, 12)), (1314, (13, 25)), (359, (25, 29)), (1318, (10, 18)), (1024, (61, 66)), (425, (45, 57)), (1074, (43, 52)), (136, (10, 16)), (753, (24, 34)), (1525, (14, 22)), (425, (81, 85)), (103, (35, 41)), (547, (15, 24)), (1233, (29, 33)), (162, (28, 34))])
[((103, (35, 41)), "*CHI:\tthat's <on the> [//] on that yellow thing ?\n"), ((116, (11, 17)), '*CHI:\twhat yellow things ?\n'), ((127, (11, 17)), '*MOT:\twhat yellow thing ?\n'), ((136, (10, 16)), '*CHI:\tthe yellow thing that &-um (.) Susan had .\n'), ((147, (11, 17)), '*MOT:\twhat yellow thing ?\n'), ((162, (28, 34)), "*MOT:\tI don't know what [!] yellow thing you're talking about Emily .\n"), ((205, (23, 29)), "*MOT:\tI don't remember yellow things .\n"), ((212, (24, 30)), '*MOT:\tdo you remember a yellow thing that she had ?\n'), ((222, (27, 33)), "*MOT:\tyou don't remember a yellow thing either ?\n"), ((257, (6, 12)), '*MOT:\tbutter .\n'), ((267, (44, 49)), '*MOT:\tHeather must like to eat off the &-um table more than she likes to eat off the dish .\n'), ((286, (20, 24)), '*MOT:\t<eat your own baby> [<] !\n'), ((329, (29, 37)), '*MOT:\t<do you want> [<] some broccoli ?\n'), ((335, (13, 21)), '*BR3:\tI hate broccoli .\n'), ((359, (25, 29)), '*BR2:\tMom I only got one pork chop .\n'), ((384, (26, 34)), '*MOT:\tdo you want another porkchop ?\n'), ((425, (19, 27)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (45, 57)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (81, 85)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((442, (11, 15)), '*BR2:\t<xxx corn on the cob> [<] ?\n'), ((523, (27, 37)), '*CHI:\tcan I have some more applesauce [>] ?\n'), ((527, (32, 41)), '*MOT:\t<did Heather eat> [<] her porkchops ?\n'), ((547, (15, 24)), '*MOT:\tyou like porkchops ?\n'), ((563, (22, 26)), '*MOT:\toh you want the corn on the cob .\n'), ((573, (31, 35)), "*MOT:\tyou're too little to eat corn on the cob Heather .\n"), ((586, (20, 29)), '*MOT:\tshe wants the porkchops .\n'), ((627, (26, 30)), '*BR2:\tnobody [<] takes my corn Heather .\n'), ((679, (6, 11)), '*BR2:\twater Mommy .\n'), ((691, (24, 28)), '*BR1:\tis there any more corn on the cob ?\n'), ((700, (19, 27)), "*MOT:\tthere's more broccoli .\n"), ((703, (11, 19)), '*MOT:\t<eat broccoli> [>] .\n'), ((706, (20, 28)), "*BR1:\t<I don't want broccoli> [<] .\n"), ((709, (6, 14)), "*MOT:\tbroccoli's good for you .\n"), ((715, (13, 20)), "*BR1:\twhat's dessert ?\n"), ((721, (6, 11)), '*MOT:\thoney+dew .\n'), ((724, (6, 11)), '*BR2:\thoney+dew [>] ?\n'), ((734, (7, 18)), '*BR1:\t<fruit salad> [<] ?\n'), ((740, (38, 49)), "*MOT:\tI don't have enough stuff for a fruit salad .\n"), ((753, (24, 34)), '*CHI:\t<I want> [<] more applesauce .\n'), ((783, (21, 25)), '*MOT:\t<I have> [<] a corn for you <if you want> [>] .\n'), ((798, (21, 25)), "*MOT:\tyou don't want corn on the cob ?\n"), ((823, (27, 37)), '*CHI:\tcan I have some more applesauce .\n'), ((836, (16, 24)), '*CHI:\tI ate <my broccoli> [>] .\n'), ((943, (22, 26)), '*BR3:\tcan I have some corn ?\n'), ((966, (20, 26)), '*MOT:\tgi(ve) me the butter please .\n'), ((969, (17, 23)), '*CHI:\tI need the butter !\n'), ((984, (28, 32)), "*MOT:\tthere's only one more corn on the cob and three of you guys .\n"), ((1024, (61, 66)), "*MOT:\tyou guys while I'm in the shower are cleaning off this table .\n"), ((1030, (26, 31)), '*BR1:\twhat about (.) &-um honey+dew ?\n'), ((1074, (43, 52)), '*BR1:\tmom <can I have> [/] can I have <the ice cream now> [>] .\n'), ((1138, (46, 50)), "*MOT:\tyou're gon(t)a [: going to] be with the baby+sitter .\n"), ((1149, (6, 13)), '*BR2:\tketchup .\n'), ((1162, (6, 13)), '*BR2:\tketchup please Mom .\n'), ((1203, (6, 10)), '*BR2:\tsalt and pepper Mom .\n'), ((1203, (15, 21)), '*BR2:\tsalt and pepper Mom .\n'), ((1206, (25, 29)), '*MOT:\tFreddy give me the salt please .\n'), ((1209, (20, 26)), '*CHI:\tMa I need the butter !\n'), ((1215, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1218, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1228, (61, 65)), "*MOT:\tyou're not gon(t)a [: going to] be able to finish this corn .\n"), ((1233, (29, 33)), "*MOT:\twhy don't we save this corn for you for later ?\n"), ((1293, (17, 21)), '*CHI:\tis she xxx food .\n'), ((1299, (22, 26)), "*CHI:\tshe's taking my food !\n"), ((1311, (11, 23)), '*MOT:\thave potato salad .\n'), ((1314, (13, 25)), '*BR1:\tI hate potato salad .\n'), ((1318, (10, 18)), '*MOT:\txxx broccoli .\n'), ((1337, (16, 26)), '*MOT:\thave more applesauce .\n'), ((1363, (49, 53)), '*MOT:\tkeep [!] your mouth shut [!] when you have food in it .\n'), ((1499, (10, 14)), '*MOT:\tone pork chop .\n'), ((1508, (18, 23)), '*CHI:\tI want some water [>] !\n'), ((1525, (14, 22)), '*BR1:\txxx the popsicle .\n'), ((1534, (32, 42)), '*CHI:\tI want some more &-um (.) applesauce .\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'porkchop', 'porkchops', 'applesauce', 'fruit salad', 'pork chop', 'corn', 'fudgesicle', 'pepper', 'potato salad', 'ketchup', 'water', 'corn on the cob', 'honey+dew', 'fudgesicles', 'salt', 'broccoli', 'ice cream', 'popsicle'])
predicted labels:
set(['butter', 'honey', 'pork', 'porkchops', 'popsicle', 'fruit salad', 'pepper', 'food', 'dessert', 'corn', 'porkchop', 'yellow', 'ketchup', 'water', 'applesauce', 'potato salad', 'baby', 'table', 'salt', 'broccoli', 'ice cream'])
file:HSLLD/HV1/MT//emimt1.cha
precision: 0.666666666667
recall: 0.736842105263
true positives:['applesauce', 'broccoli', 'butter', 'corn', 'fruit salad', 'ice cream', 'ketchup', 'pepper', 'popsicle', 'porkchop', 'porkchops', 'potato salad', 'salt', 'water']
false positives: ['baby', 'dessert', 'food', 'honey', 'pork', 'table', 'yellow']
false negatives: ['corn on the cob', 'fudgesicle', 'fudgesicles', 'honey+dew', 'pork chop']
# true pos: 14
# false pos: 7
# false neg: 5
HSLLD/HV1/MT//tammt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tammt1.cha
HSLLD/HV1/MT//kevmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//kevmt1.cha
HSLLD/HV1/MT//jenmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jenmt1.cha
HSLLD/HV1/MT//karmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//karmt1.cha
HSLLD/HV1/MT//jacmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
4
candidates to check:
4
candidates to check:
1
duck
duck duck 84
[('and', 'CC'), ('the', 'DT'), ('howard', 'NN'), ('the', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [])
candidates to check:
4
candidates to check:
2
duck
duck duck 84
[('was', 'VBD'), ('that', 'IN'), ('the', 'DT'), ('howard', 'NN'), ('the', 'DT'), ('duck', 'NN'), ('tape', 'NN')]
['duck']
('food -> ', [])
candidates to check:
1
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
1
duck
duck duck 84
[('where', 'WRB'), ('is', 'VBZ'), ('howard', 'PDT'), ('the', 'DT'), ('duck', 'NN')]
['duck']
('food -> ', [])
candidates to check:
9
candidates to check:
5
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
7
candidates to check:
5
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
3
descended from food: [['NN'], 'dessert', 35, 42]
brownies
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7394710>)
[('want', 'VB'), ('me', 'PRP'), ('to', 'TO'), ('make', 'VB'), ('brownies', 'NNS'), ('for', 'IN'), ('dessert', 'NN')]
['brownies']
('food -> ', [])
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b73947a0>)
[('want', 'VB'), ('me', 'PRP'), ('to', 'TO'), ('make', 'VB'), ('brownies', 'NNS'), ('for', 'IN'), ('dessert', 'NN')]
['dessert']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
5
candidates to check:
2
descended from food: [['NNS'], 'spaghetti', 34, 43]
spaghetti
spaghetti spaghetti 100
[('did', 'VBD'), ('you', 'PRP'), ('eat', 'VB'), ('all', 'DT'), ('of', 'IN'), ('your', 'PRP$'), ('spaghetti', 'NNS')]
['spaghetti']
('food -> ', [['spaghetti', 'Meals, Entrees, and Side Dishes']])
candidates to check:
5
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
4
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
5
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
6
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
9
candidates to check:
4
candidates to check:
1
candidates to check:
5
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b73915a8>)
[('there', 'RB'), ('s', 'RB'), ('yellow', 'VB')]
['yellow']
('food -> ', [])
candidates to check:
5
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7391878>)
[('i', 'JJ'), ('mean', 'VBP'), ('red', 'JJ'), ('yellow', 'NN'), ('green', 'NN'), ('blue', 'NN')]
['yellow']
('food -> ', [])
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7391560>)
[('i', 'JJ'), ('mean', 'VBP'), ('red', 'JJ'), ('yellow', 'NN'), ('green', 'NN'), ('blue', 'NN')]
['green']
('food -> ', [])
blue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7391830>)
[('i', 'JJ'), ('mean', 'VBP'), ('red', 'JJ'), ('yellow', 'NN'), ('green', 'NN'), ('blue', 'NN')]
['blue']
('food -> ', [])
candidates to check:
1
candidates to check:
2
blue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b739f680>)
[('blue', 'NN')]
['blue']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
8
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
2
brownies
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b739fa70>)
[('i', 'JJ'), ('m', 'NN'), ('gon', 'NN'), ('na', 'TO'), ('make', 'VB'), ('some', 'DT'), ('brownies', 'NNS'), ('anyway', 'VBP')]
['brownies']
('food -> ', [])
candidates to check:
4
brownies
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7391710>)
[('don', 'NN'), ('t', 'NN'), ('you', 'PRP'), ('want', 'VBP'), ('some', 'DT'), ('brownies', 'NNS')]
['brownies']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
5
candidates to check:
4
brownies
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7391290>)
[('candles', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('brownies', 'NNS')]
['brownies']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
4
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
6
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
3
candidates to check:
6
candidates to check:
4
candidates to check:
1
candidates to check:
3
loading solution set
calculating
set([(725, (26, 34)), (311, (22, 30)), (329, (34, 43)), (721, (26, 34))])
[((311, (22, 30)), '*MOT:\twant me to make brownies for dessert ?\n'), ((329, (34, 43)), '*MOT:\tdid you eat all of your (.) spaghetti [>] ?\n'), ((721, (26, 34)), "*MOT:\tI'm gonna make some brownies anyway .\n"), ((725, (26, 34)), "*MOT:\tdon't you want some brownies ?\n")]
set([(561, (30, 34)), (311, (22, 30)), (311, (35, 42)), (46, (26, 30)), (558, (14, 20)), (561, (17, 23)), (763, (21, 29)), (725, (26, 34)), (561, (24, 29)), (53, (30, 34)), (721, (26, 34)), (218, (26, 30)), (329, (34, 43)), (571, (6, 10))])
[((46, (26, 30)), '*CHI:\t<and the Howard the Duck [/]> [>] .\n'), ((53, (30, 34)), '*CHI:\twas that the Howard the Duck tape ?\n'), ((218, (26, 30)), '*CHI:\twhere is Howard the Duck ?\n'), ((311, (22, 30)), '*MOT:\twant me to make brownies for dessert ?\n'), ((311, (35, 42)), '*MOT:\twant me to make brownies for dessert ?\n'), ((329, (34, 43)), '*MOT:\tdid you eat all of your (.) spaghetti [>] ?\n'), ((558, (14, 20)), "*BRO:\tthere's yellow .\n"), ((561, (17, 23)), '*BRO:\tI mean red yellow green blue .\n'), ((561, (24, 29)), '*BRO:\tI mean red yellow green blue .\n'), ((561, (30, 34)), '*BRO:\tI mean red yellow green blue .\n'), ((571, (6, 10)), '*CHI:\tblue .\n'), ((721, (26, 34)), "*MOT:\tI'm gonna make some brownies anyway .\n"), ((725, (26, 34)), "*MOT:\tdon't you want some brownies ?\n"), ((763, (21, 29)), '*MOT:\tcandles in the brownies ?\n')]
calculating accuracy and recall
correct labels:
set(['spaghetti', 'brownies'])
predicted labels:
set(['blue', 'brownies', 'dessert', 'yellow', 'green', 'duck', 'spaghetti'])
file:HSLLD/HV1/MT//jacmt1.cha
precision: 0.285714285714
recall: 1.0
true positives:['brownies', 'spaghetti']
false positives: ['blue', 'dessert', 'duck', 'green', 'yellow']
false negatives: []
# true pos: 2
# false pos: 5
# false neg: 0
HSLLD/HV1/MT//deamt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//deamt1.cha
HSLLD/HV1/MT//gremt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
5
candidates to check:
1
candidates to check:
1
descended from food: [['NN'], 'sandwich', 15, 23]
candidates to check:
3
candidates to check:
6
table
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7bb1b00>)
[('chi', 'NNS'), ('stop', 'VBP'), ('singin', 'NN'), ('g', 'NN'), ('at', 'IN'), ('the', 'DT'), ('table', 'NN'), ('and', 'CC'), ('eat', 'NN')]
['table']
('food -> ', [])
candidates to check:
5
candidates to check:
3
candidates to check:
5
candidates to check:
4
milk
milk milk 46
[('drink', 'VB'), ('your', 'PRP$'), ('milk', 'NN'), ('eat', 'NN')]
['milk']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
descended from food: [['NN'], 'sandwich', 32, 40]
candidates to check:
6
candidates to check:
5
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
7
candidates to check:
3
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
4
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
6
candidates to check:
9
candidates to check:
3
candidates to check:
3
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'sandwich', 94, 102]
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
4
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'sandwich', 37, 45]
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
5
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'sandwich', 14, 22]
candidates to check:
1
candidates to check:
11
candidates to check:
6
loading solution set
calculating
set([(78, (32, 40)), (24, (15, 23)), (44, (18, 22))])
[((24, (15, 23)), '*MOT:\teat your sandwich .\n'), ((44, (18, 22)), '*MOT:\t<drink your milk> [<] [///] eat !\n'), ((78, (32, 40)), '*MOT:\tthen sit [!] and eat your sandwich .\n')]
set([(30, (32, 37)), (24, (15, 23)), (78, (32, 40)), (355, (14, 22)), (224, (94, 102)), (309, (37, 45)), (44, (18, 22))])
[((24, (15, 23)), '*MOT:\teat your sandwich .\n'), ((30, (32, 37)), '*MOT:\tChi stop singin(g) at the table and eat .\n'), ((44, (18, 22)), '*MOT:\t<drink your milk> [<] [///] eat !\n'), ((78, (32, 40)), '*MOT:\tthen sit [!] and eat your sandwich .\n'), ((224, (94, 102)), "*MOT:\t(..) <when you're done [>]> [/] (.) when you're done with that I('ve) got some more (.) sandwich .\n"), ((309, (37, 45)), '*MOT:\tyou have_to finish eating your sandwich .\n'), ((355, (14, 22)), '*MOT:\teat the sandwich .\n')]
calculating accuracy and recall
correct labels:
set(['sandwich', 'milk'])
predicted labels:
set(['table', 'sandwich', 'milk'])
file:HSLLD/HV1/MT//gremt1.cha
precision: 0.666666666667
recall: 1.0
true positives:['milk', 'sandwich']
false positives: ['table']
false negatives: []
# true pos: 2
# false pos: 1
# false neg: 0
HSLLD/HV1/MT//diamt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
candidates to check:
7
descended from food: [['NN'], 'supper', 31, 37]
candidates to check:
5
candidates to check:
4
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'meat', 11, 15]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b73a3f80>)
[('yeah', 'RB'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
1
mustard
mustard mustard 60
[('xxx', 'NN'), ('xxx', 'NNP'), ('get', 'VB'), ('some', 'DT'), ('mustard', 'NN'), ('come', 'VBN'), ('on', 'IN')]
['mustard']
('food -> ', [])
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
8
candidates to check:
1
candidates to check:
1
candidates to check:
4
candidates to check:
5
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
3
corn
corn corn 419
[('the', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
5
macaroni
macaroni macaroni 128
[('macaroni', 'NN')]
['macaroni']
('food -> ', [['macaroni', 'Cereal Grains and Pasta']])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'pizza', 6, 11]
pizza
pizza pizza 274
[('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'pizza', 6, 11]
pizza
pizza pizza 274
[('pizza', 'NN')]
['pizza']
('food -> ', [['pizza', 'Fast Foods']])
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
5
water
water water 18
[('water', 'NN'), ('wings', 'NNS')]
['water']
('food -> ', [['water', 'Beverages']])
candidates to check:
3
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'supper', 44, 50]
candidates to check:
1
candidates to check:
4
candidates to check:
1
descended from food: [['NN'], 'supper', 27, 33]
candidates to check:
4
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
4
candidates to check:
3
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
8
candidates to check:
1
candidates to check:
7
candidates to check:
2
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
10
shark
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b73ddef0>)
[('did', 'VBD'), ('did', 'VBD'), ('daddy', 'VB'), ('make', 'VB'), ('believe', 'NN'), ('he', 'PRP'), ('was', 'VBD'), ('the', 'DT'), ('shark', 'NN'), ('in', 'IN'), ('the', 'DT'), ('in', 'IN'), ('the', 'DT'), ('beg', 'NN'), ('inning', 'VBG'), ('don', 'JJ'), ('t', 'NN'), ('touch', 'NN'), ('that', 'IN')]
['shark']
('food -> ', [])
candidates to check:
1
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'lunch', 37, 42]
candidates to check:
6
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'feed', 19, 23]
candidates to check:
2
candidates to check:
4
descended from food: [['NN'], 'soup', 80, 84]
soup
soup soup 72
[('i', 'JJ'), ('think', 'VBP'), ('i', 'IN'), ('i', 'NN'), ('i', 'VBP'), ('had', 'VBD'), ('i', 'NN'), ('i', 'NN'), ('had', 'VBD'), ('a', 'DT'), ('bowl', 'NN'), ('of', 'IN'), ('soup', 'NN')]
['soup']
('food -> ', [['soup', 'American Indian/Alaska Native Foods']])
candidates to check:
2
descended from food: [['NN'], 'soup', 35, 39]
soup
soup soup 72
[('no', 'DT'), ('you', 'PRP'), ('didn', 'VBP'), ('t', 'NNS'), ('have', 'VBP'), ('a', 'DT'), ('bowl', 'NN'), ('of', 'IN'), ('soup', 'NN'), ('you', 'PRP'), ('had', 'VBD'), ('what', 'WP')]
['soup']
('food -> ', [['soup', 'American Indian/Alaska Native Foods']])
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'lunch', 28, 33]
candidates to check:
5
tuna fish
tuna fish tuna fish 130
[('um', 'JJ'), ('tuna', 'NN'), ('fish', 'NN')]
['tuna', 'fish']
('food -> ', [['tuna fish', 'Finfish and Shellfish Products']])
fish
fish fish 305
[('um', 'JJ'), ('tuna', 'NN'), ('fish', 'NN')]
['fish']
('food -> ', [['tuna fish', 'Finfish and Shellfish Products'], ['fish', 'Finfish and Shellfish Products']])
candidates to check:
1
candidates to check:
2
descended from food: [['NN'], 'bread', 29, 34]
bread
bread bread 186
[('did', 'VBD'), ('you', 'PRP'), ('have', 'VBP'), ('it', 'PRP'), ('in', 'IN'), ('the', 'DT'), ('bread', 'NN')]
['bread']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'milk', 6, 10]
milk
milk milk 46
[('milk', 'NN')]
['milk']
('food -> ', [])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
descended from food: [['NN'], 'honey', 6, 11]
honey
honey honey 304
[('honey', 'NN')]
['honey']
('food -> ', [['honey', 'Sweets']])
candidates to check:
1
candidates to check:
1
candidates to check:
4
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b73da1b8>)
[('what', 'WP'), ('did', 'VBD'), ('you', 'PRP'), ('have', 'VBP'), ('for', 'IN'), ('dessert', 'NN')]
['dessert']
('food -> ', [])
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
8
cream
cream cream 72
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['ice cream', 'Dairy and Egg Products'], ['ice cream cone', 'Dairy and Egg Products']])
candidates to check:
8
cream
cream cream 72
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['ice cream', 'Dairy and Egg Products'], ['ice cream cone', 'Dairy and Egg Products']])
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
corn
corn corn 419
[('corn', 'NN'), ('on', 'IN'), ('the', 'DT'), ('cob', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
6
candidates to check:
5
candidates to check:
3
corn
corn corn 419
[('no', 'DT'), ('the', 'DT'), ('farm', 'NN'), ('is', 'VBZ'), ('where', 'WRB'), ('they', 'PRP'), ('grow', 'VBP'), ('the', 'DT'), ('corn', 'NN')]
['corn']
('food -> ', [['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
1
candidates to check:
5
ground
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b73080e0>)
[('because', 'IN'), ('they', 'PRP'), ('put', 'VBD'), ('it', 'PRP'), ('the', 'DT'), ('seeds', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('ground', 'NN'), ('and', 'CC'), ('the', 'DT'), ('corn', 'NN'), ('comes', 'VBZ'), ('up', 'RP')]
['ground']
('food -> ', [])
seeds
seeds seeds 592
[('because', 'IN'), ('they', 'PRP'), ('put', 'VBD'), ('it', 'PRP'), ('the', 'DT'), ('seeds', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('ground', 'NN'), ('and', 'CC'), ('the', 'DT'), ('corn', 'NN'), ('comes', 'VBZ'), ('up', 'RP')]
['seeds']
('food -> ', [['seeds', 'Nut and Seed Products']])
corn
corn corn 419
[('because', 'IN'), ('they', 'PRP'), ('put', 'VBD'), ('it', 'PRP'), ('the', 'DT'), ('seeds', 'NNS'), ('in', 'IN'), ('the', 'DT'), ('ground', 'NN'), ('and', 'CC'), ('the', 'DT'), ('corn', 'NN'), ('comes', 'VBZ'), ('up', 'RP')]
['corn']
('food -> ', [['seeds', 'Nut and Seed Products'], ['corn', 'American Indian/Alaska Native Foods']])
candidates to check:
2
seeds
seeds seeds 592
[('but', 'CC'), ('how', 'WRB'), ('seeds', 'NNS'), ('come', 'VBP'), ('up', 'RP')]
['seeds']
('food -> ', [['seeds', 'Nut and Seed Products']])
candidates to check:
2
candidates to check:
1
seeds
seeds seeds 592
[('how', 'WRB'), ('seeds', 'NNS'), ('come', 'VBP'), ('up', 'RP')]
['seeds']
('food -> ', [['seeds', 'Nut and Seed Products']])
candidates to check:
1
candidates to check:
4
candidates to check:
1
candidates to check:
4
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
11
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
2
candidates to check:
1
descended from food: [['NN'], 'meat', 11, 15]
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7314200>)
[('more', 'RBR'), ('meat', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
meat
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7314758>)
[('you', 'PRP'), ('eat', 'VBP'), ('some', 'DT'), ('of', 'IN'), ('that', 'DT'), ('and', 'CC'), ('i', 'VB'), ('ll', 'VBP'), ('give', 'VB'), ('you', 'PRP'), ('more', 'JJR'), ('meat', 'NN'), ('donna', 'NN')]
['meat']
('food -> ', [])
candidates to check:
1
descended from food: [['NNS'], 'chicken', 16, 23]
chicken
chicken chicken 234
[('some', 'DT'), ('more', 'RBR'), ('chicken', 'NNS')]
['chicken']
('food -> ', [])
candidates to check:
1
descended from food: [['NN'], 'chicken', 6, 13]
chicken
chicken chicken 234
[('chicken', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
3
descended from food: [['NN'], 'steak', 30, 35]
chicken
chicken chicken 234
[('that', 'DT'), ('s', 'VBZ'), ('not', 'RB'), ('chicken', 'VB'), ('it', 'PRP'), ('s', 'JJ'), ('steak', 'NN')]
['chicken']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
8
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
4
candidates to check:
1
candidates to check:
3
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
blue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7320a70>)
[('blue', 'NN'), ('and', 'CC'), ('red', 'JJ')]
['blue']
('food -> ', [])
candidates to check:
2
blue
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b73191b8>)
[('blue', 'NN'), ('and', 'CC'), ('red', 'JJ'), ('and', 'CC'), ('what', 'WP'), ('else', 'RB')]
['blue']
('food -> ', [])
candidates to check:
5
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7314290>)
[('green', 'JJ'), ('and', 'CC'), ('white', 'JJ')]
['green']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
3
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b73c5200>)
[('green', 'JJ')]
['green']
('food -> ', [])
candidates to check:
3
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7320c68>)
[('green', 'JJ')]
['green']
('food -> ', [])
candidates to check:
3
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7320b48>)
[('and', 'CC'), ('yellow', 'VB'), ('green', 'NN')]
['yellow']
('food -> ', [])
green
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7320e60>)
[('and', 'CC'), ('yellow', 'VB'), ('green', 'NN')]
['green']
('food -> ', [])
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
1
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7320fc8>)
[('was', 'VBD'), ('there', 'EX'), ('any', 'DT'), ('yellow', 'NN')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
5
candidates to check:
2
yellow
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7320b90>)
[('there', 'EX'), ('was', 'VBD'), ('yellow', 'JJ')]
['yellow']
('food -> ', [])
candidates to check:
2
candidates to check:
2
descended from food: [['NN'], 'orange', 16, 22]
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7319440>)
[('there', 'EX'), ('was', 'VBD'), ('orange', 'NN')]
['orange']
('food -> ', [])
candidates to check:
3
descended from food: [['NN'], 'orange', 19, 25]
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7319908>)
[('oh', 'IN'), ('there', 'EX'), ('was', 'VBD'), ('orange', 'NN')]
['orange']
('food -> ', [])
candidates to check:
2
candidates to check:
3
descended from food: [['NN'], 'orange', 26, 32]
orange
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b7319c20>)
[('oh', 'UH'), ('i', 'NN'), ('didn', 'VBP'), ('t', 'NN'), ('see', 'VBP'), ('the', 'DT'), ('orange', 'NN')]
['orange']
('food -> ', [])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
4
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
2
descended from food: [['NN'], 'dessert', 57, 64]
dessert
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fb7b731c7a0>)
[('if', 'IN'), ('you', 'PRP'), ('eat', 'VBP'), ('all', 'PDT'), ('that', 'DT'), ('up', 'RP'), ('what', 'WP'), ('would', 'MD'), ('you', 'PRP'), ('like', 'IN'), ('for', 'IN'), ('dessert', 'NN')]
['dessert']
('food -> ', [])
candidates to check:
11
cream
cream cream 72
[('um', 'JJ'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('um', 'JJ'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('um', 'JJ'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['ice cream', 'Dairy and Egg Products'], ['ice cream cone', 'Dairy and Egg Products']])
candidates to check:
8
cream
cream cream 72
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['ice cream', 'Dairy and Egg Products'], ['ice cream cone', 'Dairy and Egg Products']])
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
7
cream
cream cream 72
[('but', 'CC'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('now', 'RB')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('but', 'CC'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('now', 'RB')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('but', 'CC'), ('i', 'JJ'), ('don', 'VBP'), ('t', 'JJ'), ('want', 'VBP'), ('any', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('now', 'RB')]
['ice', 'cream', 'cone']
('food -> ', [['ice cream', 'Dairy and Egg Products'], ['ice cream cone', 'Dairy and Egg Products']])
candidates to check:
7
cream
cream cream 72
[('but', 'CC'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('but', 'CC'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('but', 'CC'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['ice cream', 'Dairy and Egg Products'], ['ice cream cone', 'Dairy and Egg Products']])
candidates to check:
7
candidates to check:
9
cream
cream cream 72
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('tomorrow', 'NN')]
['cream']
('food -> ', [])
ice cream
ice cream ice cream 265
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('tomorrow', 'NN')]
['ice', 'cream']
('food -> ', [['ice cream', 'Dairy and Egg Products']])
ice cream cone
ice cream cone ice cream cone 354
[('mommy', 'NN'), ('i', 'NN'), ('want', 'VBP'), ('an', 'DT'), ('ice', 'NN'), ('cream', 'NN'), ('cone', 'NN'), ('tomorrow', 'NN')]
['ice', 'cream', 'cone']
('food -> ', [['ice cream', 'Dairy and Egg Products'], ['ice cream cone', 'Dairy and Egg Products']])
candidates to check:
3
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
6
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
2
candidates to check:
5
candidates to check:
5
candidates to check:
5
candidates to check:
2
candidates to check:
3
candidates to check:
1
candidates to check:
3
candidates to check:
3
descended from food: [['NN'], 'milk', 32, 36]
milk
milk milk 46
[('would', 'MD'), ('you', 'PRP'), ('like', 'IN'), ('a', 'DT'), ('glass', 'NN'), ('of', 'IN'), ('milk', 'NN'), ('now', 'RB')]
['milk']
('food -> ', [])
candidates to check:
2
descended from food: [['NN'], 'juice', 36, 41]
juice
juice juice 52
[('how', 'WRB'), ('about', 'IN'), ('a', 'DT'), ('glass', 'NN'), ('of', 'IN'), ('uh', 'JJ'), ('juice', 'NN')]
['juice']
('food -> ', [['juice', 'Fruits and Fruit Juices']])
candidates to check:
2
descended from food: [['NN'], 'popsicle', 15, 23]
candidates to check:
1
descended from food: [['NN'], 'popsicle', 8, 16]
candidates to check:
3
candidates to check:
3
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
3
candidates to check:
2
candidates to check:
1
candidates to check:
5
candidates to check:
5
candidates to check:
4
candidates to check:
5
candidates to check:
6
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
2
candidates to check:
5
candidates to check:
1
candidates to check:
2
candidates to check:
2
candidates to check:
2
loading solution set
calculating
set([(1355, (15, 23)), (1358, (8, 16)), (212, (6, 14)), (692, (29, 34)), (802, (41, 45)), (749, (6, 20)), (232, (6, 11)), (1281, (6, 15)), (771, (6, 21)), (1248, (6, 15)), (746, (6, 14)), (662, (35, 39)), (1284, (6, 15)), (1194, (6, 20)), (700, (6, 10)), (1342, (32, 36)), (930, (50, 54)), (1237, (33, 42)), (753, (6, 20)), (1218, (22, 36)), (935, (16, 23)), (668, (6, 10)), (685, (15, 24)), (1212, (20, 34)), (241, (6, 11)), (1191, (15, 29)), (941, (30, 35)), (927, (11, 15)), (659, (80, 84)), (36, (11, 20)), (1273, (6, 15)), (32, (6, 15)), (1351, (36, 41)), (67, (23, 30)), (938, (6, 13)), (199, (10, 14)), (29, (10, 19)), (941, (17, 24)), (1207, (27, 41)), (811, (63, 67))])
[((29, (10, 19)), '*CHI:\txxx cucumbers .\n'), ((32, (6, 15)), '*MOT:\tcucumbers and what else (.) ?\n'), ((36, (11, 20)), '*CHI:\t&-um cucumbers .\n'), ((67, (23, 30)), '*FAT:\txxx xxx get some mustard come on .\n'), ((199, (10, 14)), '*CHI:\tthe corn [?] .\n'), ((212, (6, 14)), '*CHI:\tmacaroni [!] .\n'), ((232, (6, 11)), '*SIB:\tpizza ?\n'), ((241, (6, 11)), '*CHI:\tpizza .\n'), ((659, (80, 84)), '*CHI:\t<I think> [//] (.) <I> [/] <I> [//] <I had> [//] <I> [//] I had a bowl of soup .\n'), ((662, (35, 39)), "*MOT:\tno you didn't have a bowl of soup you had what ?\n"), ((668, (6, 10)), '*MOT:\ttuna ?\n'), ((685, (15, 24)), '*CHI:\t&-um (.) tuna+fish .\n'), ((692, (29, 34)), '*AUN:\tdid you have it in the bread ?\n'), ((700, (6, 10)), '*AUN:\tmilk [?] ?\n'), ((746, (6, 14)), '*CHI:\tice cone .\n'), ((749, (6, 20)), '*MOT:\tice cream cone .\n'), ((753, (6, 20)), '*CHI:\tice cream cone !\n'), ((771, (6, 21)), '*AUN:\tcorn on the cob .\n'), ((802, (41, 45)), '*MOT:\tno the farm is where they grow the corn .\n'), ((811, (63, 67)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((927, (11, 15)), '*CHI:\tmore meat .\n'), ((930, (50, 54)), "*MOT:\tyou eat some of that and I'll give you more meat Donna [?] .\n"), ((935, (16, 23)), '*CHI:\tsome more chicken .\n'), ((938, (6, 13)), '*CHI:\tchicken .\n'), ((941, (17, 24)), "*MOT:\tthat's not chicken it's steak .\n"), ((941, (30, 35)), "*MOT:\tthat's not chicken it's steak .\n"), ((1191, (15, 29)), '*CHI:\t&-um (.) ice cream cone .\n'), ((1194, (6, 20)), '*MOT:\tice cream cone ?\n'), ((1207, (27, 41)), "*CHI:\tbut I don't want any ice cream cone now .\n"), ((1212, (20, 34)), '*CHI:\tbut I want an ice cream cone .\n'), ((1218, (22, 36)), '*CHI:\tMommy I want an ice cream cone tomorrow .\n'), ((1237, (33, 42)), '*MOT:\tyou [/] you want some more cucumbers ?\n'), ((1248, (6, 15)), '*CHI:\tcucumbers (.) .\n'), ((1273, (6, 15)), '*SIB:\tcucumbers Chi .\n'), ((1281, (6, 15)), '*CHI:\tcucumbers .\n'), ((1284, (6, 15)), '*MOT:\tcucumbers ?\n'), ((1342, (32, 36)), '*MOT:\twould you like a glass of milk now ?\n'), ((1351, (36, 41)), '*MOT:\thow about a glass of &-uh (.) juice ?\n'), ((1355, (15, 23)), '*CHI:\tI want a popsicle .\n'), ((1358, (8, 16)), '*MOT:\ta popsicle ?\n')]
set([(811, (35, 40)), (1123, (20, 26)), (1092, (6, 11)), (1358, (8, 16)), (212, (6, 14)), (692, (29, 34)), (199, (10, 14)), (802, (41, 45)), (552, (48, 53)), (1185, (57, 64)), (749, (6, 20)), (232, (6, 11)), (1140, (19, 25)), (935, (16, 23)), (241, (6, 11)), (811, (48, 54)), (700, (6, 10)), (1355, (15, 23)), (1342, (32, 36)), (930, (50, 54)), (826, (10, 15)), (1147, (26, 32)), (753, (6, 20)), (1218, (22, 36)), (438, (27, 33)), (427, (44, 50)), (1105, (10, 16)), (1194, (6, 20)), (1207, (27, 41)), (1212, (20, 34)), (304, (6, 11)), (938, (6, 13)), (662, (35, 39)), (1137, (16, 22)), (1191, (15, 29)), (1133, (16, 22)), (1088, (6, 10)), (1105, (17, 22)), (941, (30, 35)), (927, (11, 15)), (659, (80, 84)), (1085, (6, 10)), (642, (37, 42)), (1351, (36, 41)), (67, (23, 30)), (734, (29, 36)), (655, (19, 23)), (1099, (6, 11)), (720, (6, 11)), (771, (6, 10)), (680, (28, 33)), (685, (20, 24)), (941, (17, 24)), (818, (14, 19)), (811, (63, 67)), (18, (31, 37)), (1102, (6, 11)), (55, (11, 15))])
[((18, (31, 37)), "*MOT:\tokay girls it's time for supper let's go !\n"), ((55, (11, 15)), '*MOT:\tyeah meat ?\n'), ((67, (23, 30)), '*FAT:\txxx xxx get some mustard come on .\n'), ((199, (10, 14)), '*CHI:\tthe corn [?] .\n'), ((212, (6, 14)), '*CHI:\tmacaroni [!] .\n'), ((232, (6, 11)), '*SIB:\tpizza ?\n'), ((241, (6, 11)), '*CHI:\tpizza .\n'), ((304, (6, 11)), '*MOT:\twater wings (.) ?\n'), ((427, (44, 50)), '*AUN:\tare you going to go in the pool after supper with me ?\n'), ((438, (27, 33)), "*AUN:\tno I didn't come for supper .\n"), ((552, (48, 53)), "*MOT:\tdid [/] did Daddy make believe he was the shark <in the> [//] in the beg(inning) [///] don't touch that !\n"), ((642, (37, 42)), '*AUN:\t&-um (.) what did you have for lunch today ?\n'), ((655, (19, 23)), "*AUN:\tMommy didn't feed you ?\n"), ((659, (80, 84)), '*CHI:\t<I think> [//] (.) <I> [/] <I> [//] <I had> [//] <I> [//] I had a bowl of soup .\n'), ((662, (35, 39)), "*MOT:\tno you didn't have a bowl of soup you had what ?\n"), ((680, (28, 33)), '*MOT:\twhat did you have for lunch today ?\n'), ((685, (20, 24)), '*CHI:\t&-um (.) tuna+fish .\n'), ((692, (29, 34)), '*AUN:\tdid you have it in the bread ?\n'), ((700, (6, 10)), '*AUN:\tmilk [?] ?\n'), ((720, (6, 11)), '*FAT:\thoney [?] ?\n'), ((734, (29, 36)), '*MOT:\t<what did you have for dessert> [<] ?\n'), ((749, (6, 20)), '*MOT:\tice cream cone .\n'), ((753, (6, 20)), '*CHI:\tice cream cone !\n'), ((771, (6, 10)), '*AUN:\tcorn on the cob .\n'), ((802, (41, 45)), '*MOT:\tno the farm is where they grow the corn .\n'), ((811, (35, 40)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((811, (48, 54)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((811, (63, 67)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((818, (14, 19)), '*CHI:\tbut how seeds come up ?\n'), ((826, (10, 15)), '*CHI:\thow seeds come up ?\n'), ((927, (11, 15)), '*CHI:\tmore meat .\n'), ((930, (50, 54)), "*MOT:\tyou eat some of that and I'll give you more meat Donna [?] .\n"), ((935, (16, 23)), '*CHI:\tsome more chicken .\n'), ((938, (6, 13)), '*CHI:\tchicken .\n'), ((941, (17, 24)), "*MOT:\tthat's not chicken it's steak .\n"), ((941, (30, 35)), "*MOT:\tthat's not chicken it's steak .\n"), ((1085, (6, 10)), '*CHI:\tblue and red .\n'), ((1088, (6, 10)), '*MOT:\tblue and red and what else ?\n'), ((1092, (6, 11)), '*CHI:\tgreen [?] and white (.) .\n'), ((1099, (6, 11)), '*AUN:\tgreen .\n'), ((1102, (6, 11)), '*CHI:\tgreen .\n'), ((1105, (10, 16)), '*CHI:\tand yellow green .\n'), ((1105, (17, 22)), '*CHI:\tand yellow green .\n'), ((1123, (20, 26)), '*MOT:\twas there any yellow ?\n'), ((1133, (16, 22)), '*CHI:\tthere was yellow .\n'), ((1137, (16, 22)), '*CHI:\tthere was orange .\n'), ((1140, (19, 25)), '*MOT:\toh there was orange ?\n'), ((1147, (26, 32)), "*MOT:\toh I didn't see the orange .\n"), ((1185, (57, 64)), '*MOT:\tif you eat all that up (.) what would you like for dessert ?\n'), ((1191, (15, 29)), '*CHI:\t&-um (.) ice cream cone .\n'), ((1194, (6, 20)), '*MOT:\tice cream cone ?\n'), ((1207, (27, 41)), "*CHI:\tbut I don't want any ice cream cone now .\n"), ((1212, (20, 34)), '*CHI:\tbut I want an ice cream cone .\n'), ((1218, (22, 36)), '*CHI:\tMommy I want an ice cream cone tomorrow .\n'), ((1342, (32, 36)), '*MOT:\twould you like a glass of milk now ?\n'), ((1351, (36, 41)), '*MOT:\thow about a glass of &-uh (.) juice ?\n'), ((1355, (15, 23)), '*CHI:\tI want a popsicle .\n'), ((1358, (8, 16)), '*MOT:\ta popsicle ?\n')]
calculating accuracy and recall
correct labels:
set(['steak', 'mustard', 'ice cream cone', 'juice', 'corn', 'popsicle', 'cucumbers', 'meat', 'soup', 'tuna+fish', 'corn on the cob', 'macaroni', 'ice cone', 'chicken', 'tuna', 'bread', 'milk', 'pizza'])
predicted labels:
set(['feed', 'shark', 'popsicle', 'ice cream cone', 'fish', 'yellow', 'honey', 'juice', 'chicken', 'milk', 'ground', 'blue', 'macaroni', 'orange', 'pizza', 'mustard', 'dessert', 'corn', 'water', 'lunch', 'supper', 'bread', 'meat', 'soup', 'seeds', 'green', 'steak'])
file:HSLLD/HV1/MT//diamt1.cha
precision: 0.481481481481
recall: 0.722222222222
true positives:['bread', 'chicken', 'corn', 'ice cream cone', 'juice', 'macaroni', 'meat', 'milk', 'mustard', 'pizza', 'popsicle', 'soup', 'steak']
false positives: ['blue', 'dessert', 'feed', 'fish', 'green', 'ground', 'honey', 'lunch', 'orange', 'seeds', 'shark', 'supper', 'water', 'yellow']
false negatives: ['corn on the cob', 'cucumbers', 'ice cone', 'tuna', 'tuna+fish']
# true pos: 13
# false pos: 14
# false neg: 5
HSLLD/HV1/MT//remmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//remmt1.cha
HSLLD/HV1/MT//trumt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//trumt1.cha
HSLLD/HV1/MT//jusmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jusmt1.cha
HSLLD/HV1/MT//rosmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//rosmt1.cha
HSLLD/HV1/MT//seamt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//seamt1.cha
HSLLD/HV1/MT//arlmt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//arlmt1.cha
HSLLD/HV1/MT//trimt1.cha
[['NN', 'NN'],
 ['NN'],
 ['NN', 'NNS'],
 ['NNS'],
 ['JJ', 'NN'],
 ['NN', 'NN', 'NN'],
 ['JJ', 'NN', 'NN'],
 ['JJ', 'NNS'],
 ['VBN', 'NNS'],
 ['VBN', 'NN'],
 ['JJ', 'NN', 'NNS'],
 ['NN', 'NN', 'NNS'],
 ['NNS', 'NN'],
 ['NNP', 'IN']]
adding extra names
Added names by Yelena Mejova
9758
400
10113
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//trimt1.cha
precision: 0.475324675325
recall 0.7625
# true pos: 183
# false pos: 202
# false neg: 57
total runtime: 74.8299860954
