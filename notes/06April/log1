HSLLD/HV1/MT//zanmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//zanmt1.cha
HSLLD/HV1/MT//arlmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//arlmt1.cha
HSLLD/HV1/MT//jenmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jenmt1.cha
HSLLD/HV1/MT//jasmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jasmt1.cha
HSLLD/HV1/MT//trumt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//trumt1.cha
HSLLD/HV1/MT//chamt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//chamt1.cha
HSLLD/HV1/MT//maymt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//maymt1.cha
HSLLD/HV1/MT//admmt1.cha
loading solution set
carrots carrots 35
peas peas 116
beef stew beef stew 99
beef beef 310
stew stew 32
carrots carrots 35
carrots carrots 35
carrots carrots 35
carrots carrots 35
carrot carrot 341
butter butter 499
bread bread 186
honey honey 304
pepper pepper 27
salt salt 0
butter butter 499
bread bread 186
butter butter 499
bread bread 186
butter butter 499
bread bread 186
butter butter 499
carrots carrots 35
bread bread 186
butter butter 499
bread bread 186
potato chips potato chips 487
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5c7248>)
no calories detected for food word
cookie cookie 507
honey honey 304
bread bread 186
chicken chicken 234
spices spices 312
loading solution set
calculating
set([(196, (25, 37)), (79, (34, 38)), (651, (18, 24)), (869, (16, 23)), (644, (27, 31)), (308, (30, 36)), (115, (21, 28)), (284, (30, 36)), (329, (29, 35)), (121, (48, 55)), (155, (15, 21)), (644, (6, 18)), (79, (22, 29)), (284, (41, 46)), (276, (27, 31)), (810, (55, 60)), (314, (50, 55)), (134, (37, 44)), (276, (36, 42)), (329, (19, 24)), (634, (8, 15)), (314, (60, 66)), (308, (20, 25)), (99, (31, 40)), (651, (37, 43)), (631, (8, 15)), (104, (14, 21)), (305, (15, 27)), (314, (15, 22))])
[((79, (22, 29)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((79, (34, 38)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((99, (31, 40)), "*FAT:\tAdam's not gonna eat her beef stew .\n"), ((104, (14, 21)), '*MOT:\tsee the carrots in there ?\n'), ((115, (21, 28)), '*CHI:\t<I have my xxx carrots> [<] .\n'), ((121, (48, 55)), '*MOT:\tsee if we can <find some more of> [>] the carrots in here .\n'), ((134, (37, 44)), "*MOT:\there you go here's some of the carrots right on top !\n"), ((155, (15, 21)), '*CHI:\tI have a carrot haha [x 2] &=singing .\n'), ((196, (25, 37)), '*MOT:\tAdam you want some butter bread ?\n'), ((276, (27, 31)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((276, (36, 42)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((284, (30, 36)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((284, (41, 46)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((305, (15, 27)), '*MOT:\tyou want butter bread ?\n'), ((308, (20, 25)), '*MOT:\tyou want some bread and butter ?\n'), ((308, (30, 36)), '*MOT:\tyou want some bread and butter ?\n'), ((314, (15, 22)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (50, 55)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (60, 66)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((329, (19, 24)), "*MOT:\tthere's your bread and butter right there .\n"), ((329, (29, 35)), "*MOT:\tthere's your bread and butter right there .\n"), ((631, (8, 15)), '*CHI:\ta brownie .\n'), ((634, (8, 15)), '*CHI:\ta brownie .\n'), ((644, (6, 18)), '*CHI:\tpotato chips (.) and coke .\n'), ((644, (27, 31)), '*CHI:\tpotato chips (.) and coke .\n'), ((651, (18, 24)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((651, (37, 43)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((810, (55, 60)), "*FAT:\tyep alright well you don't have_to skitch@f your bread in it just put it on the table if you don't want it Kim .\n"), ((869, (16, 23)), '*SIS:\tI have my chicken Spices.\n')]
set([(196, (25, 37)), (253, (38, 43)), (79, (34, 38)), (651, (18, 24)), (806, (18, 23)), (308, (30, 36)), (115, (21, 28)), (284, (30, 36)), (869, (16, 30)), (329, (29, 35)), (121, (48, 55)), (155, (15, 21)), (644, (6, 18)), (79, (22, 29)), (284, (41, 46)), (276, (27, 31)), (810, (55, 60)), (314, (50, 55)), (134, (37, 44)), (276, (36, 42)), (329, (19, 24)), (314, (60, 66)), (308, (20, 25)), (99, (31, 40)), (651, (37, 43)), (104, (14, 21)), (305, (15, 27)), (314, (15, 22))])
[((79, (22, 29)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((79, (34, 38)), '*MOT:\tKim got lots_of carrots and peas in the xxx .\n'), ((99, (31, 40)), "*FAT:\tAdam's not gonna eat her beef stew .\n"), ((104, (14, 21)), '*MOT:\tsee the carrots in there ?\n'), ((115, (21, 28)), '*CHI:\t<I have my xxx carrots> [<] .\n'), ((121, (48, 55)), '*MOT:\tsee if we can <find some more of> [>] the carrots in here .\n'), ((134, (37, 44)), "*MOT:\there you go here's some of the carrots right on top !\n"), ((155, (15, 21)), '*CHI:\tI have a carrot haha [x 2] &=singing .\n'), ((196, (25, 37)), '*MOT:\tAdam you want some butter bread ?\n'), ((253, (38, 43)), "*MOT:\t<there's no kids out> [<] there honey .\n"), ((276, (27, 31)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((276, (36, 42)), '*MOT:\t<let me> [<] see the salt and pepper .\n'), ((284, (30, 36)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((284, (41, 46)), "*MOT:\tsure you don't want any butter and bread Adam ?\n"), ((305, (15, 27)), '*MOT:\tyou want butter bread ?\n'), ((308, (20, 25)), '*MOT:\tyou want some bread and butter ?\n'), ((308, (30, 36)), '*MOT:\tyou want some bread and butter ?\n'), ((314, (15, 22)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (50, 55)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((314, (60, 66)), "*MOT:\teat some carrots on there I'll give you the bread and butter .\n"), ((329, (19, 24)), "*MOT:\tthere's your bread and butter right there .\n"), ((329, (29, 35)), "*MOT:\tthere's your bread and butter right there .\n"), ((644, (6, 18)), '*CHI:\tpotato chips (.) and coke .\n'), ((651, (18, 24)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((651, (37, 43)), '*CHI:\tMommy ate a cookie and I ate a cookie .\n'), ((806, (18, 23)), "*FAT:\tI'll eat it honey .\n"), ((810, (55, 60)), "*FAT:\tyep alright well you don't have_to skitch@f your bread in it just put it on the table if you don't want it Kim .\n"), ((869, (16, 30)), '*SIS:\tI have my chicken Spices.\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'pepper', 'potato chips', 'coke', 'carrots', 'butter bread', 'peas', 'brownie', 'carrot', 'cookie', 'chicken', 'salt', 'beef stew', 'bread'])
predicted labels:
set(['butter', 'chicken spices', 'pepper', 'potato chips', 'carrots', 'butter bread', 'peas', 'honey', 'carrot', 'cookie', 'salt', 'beef stew', 'bread'])
file:HSLLD/HV1/MT//admmt1.cha
precision: 0.846153846154
recall: 0.785714285714
true positives:['beef stew', 'bread', 'butter', 'butter bread', 'carrot', 'carrots', 'cookie', 'peas', 'pepper', 'potato chips', 'salt']
false positives: ['chicken spices', 'honey']
false negatives: ['brownie', 'chicken', 'coke']
# true pos: 11
# false pos: 2
# false neg: 3
HSLLD/HV1/MT//aimmt1.cha
loading solution set
milk milk 46
chocolate chocolate 598
milk milk 46
chocolate chocolate 598
chocolate chocolate 598
milk milk 46
chocolate chocolate 598
milk milk 46
chocolate chocolate 598
milk milk 46
chocolate chocolate 598
juice juice 52
juice juice 52
juice juice 52
juice juice 52
juice juice 52
potatoes potatoes 62
pepper pepper 27
pepper pepper 27
soup soup 72
soup soup 72
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f482b48>)
no calories detected for food word
pepper pepper 27
applesauce applesauce 76
water water 18
water water 18
water water 18
milk milk 46
milk milk 46
milk milk 46
loading solution set
calculating
set([(887, (15, 24)), (1991, (32, 42)), (884, (19, 23)), (884, (28, 37)), (1633, (10, 14)), (2031, (22, 27)), (1499, (6, 14)), (881, (15, 24)), (2046, (18, 23)), (1409, (10, 15)), (881, (6, 10)), (1399, (32, 37)), (864, (21, 30)), (1549, (18, 24)), (1545, (22, 28)), (2276, (20, 24)), (2284, (20, 24)), (1468, (32, 37)), (1481, (20, 25)), (864, (39, 43)), (887, (6, 10)), (852, (21, 25)), (873, (14, 23)), (2043, (16, 21)), (860, (27, 36)), (1841, (6, 12)), (1386, (26, 31)), (1630, (24, 28))])
[((852, (21, 25)), '*CHI:\tcan I get some milk please (.) ?\n'), ((860, (27, 36)), '*CHI:\tMommy can I get some chocolate (.) ?\n'), ((864, (21, 30)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((864, (39, 43)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((873, (14, 23)), '*CHI:\txxx [>] chocolate .\n'), ((881, (6, 10)), '*CHI:\tmilk and chocolate .\n'), ((881, (15, 24)), '*CHI:\tmilk and chocolate .\n'), ((884, (19, 23)), '*CHI:\tMommy I want milk and chocolate .\n'), ((884, (28, 37)), '*CHI:\tMommy I want milk and chocolate .\n'), ((887, (6, 10)), '*CHI:\tmilk and chocolate (.) .\n'), ((887, (15, 24)), '*CHI:\tmilk and chocolate (.) .\n'), ((1386, (26, 31)), "*BRO:\tdidn't you get some juice ?\n"), ((1399, (32, 37)), "*CHI:\tDaddy I didn't ask for no juice .\n"), ((1409, (10, 15)), '*CHI:\txxx juice thank you .\n'), ((1468, (32, 37)), '*MOT:\tI am [!] gonna bring some juice .\n'), ((1481, (20, 25)), "*MOT:\tI'm gonna get juice .\n"), ((1499, (6, 14)), '*MOT:\tpotatoes only [?] (.) .\n'), ((1545, (22, 28)), "*CHI:\tI don't like no pepper .\n"), ((1549, (18, 24)), '*CHI:\tdo you like pepper ?\n'), ((1630, (24, 28)), '*MOT:\twant some of this soup xxx ?\n'), ((1633, (10, 14)), '*BRO:\txxx soup bowl ?\n'), ((1841, (6, 12)), '*CHI:\tpepper (.) .\n'), ((1991, (32, 42)), '*MOT:\t<eat [/] eat [/] eat your applesauce> [<] .\n'), ((2031, (22, 27)), '*CHI:\tI want that [?] water .\n'), ((2043, (16, 21)), '*FAT:\tneed some water xxx .\n'), ((2046, (18, 23)), '*CHI:\tI want some water xxx .\n'), ((2276, (20, 24)), '*MOT:\tyou drink any milk ?\n'), ((2284, (20, 24)), '*MOT:\tyou drink any milk ?\n')]
set([(887, (15, 24)), (1771, (29, 33)), (884, (19, 23)), (884, (28, 37)), (1633, (10, 14)), (2031, (22, 27)), (1499, (6, 14)), (881, (15, 24)), (2046, (18, 23)), (1409, (10, 15)), (881, (6, 10)), (2180, (29, 33)), (1399, (32, 37)), (864, (21, 30)), (1549, (18, 24)), (1545, (22, 28)), (2276, (20, 24)), (2284, (20, 24)), (1468, (32, 37)), (1481, (20, 25)), (864, (39, 43)), (887, (6, 10)), (852, (21, 25)), (1991, (32, 42)), (873, (14, 23)), (2043, (16, 21)), (860, (27, 36)), (1841, (6, 12)), (1386, (26, 31)), (1630, (24, 28))])
[((852, (21, 25)), '*CHI:\tcan I get some milk please (.) ?\n'), ((860, (27, 36)), '*CHI:\tMommy can I get some chocolate (.) ?\n'), ((864, (21, 30)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((864, (39, 43)), '*CHI:\tcan I get some chocolate too and milk too .\n'), ((873, (14, 23)), '*CHI:\txxx [>] chocolate .\n'), ((881, (6, 10)), '*CHI:\tmilk and chocolate .\n'), ((881, (15, 24)), '*CHI:\tmilk and chocolate .\n'), ((884, (19, 23)), '*CHI:\tMommy I want milk and chocolate .\n'), ((884, (28, 37)), '*CHI:\tMommy I want milk and chocolate .\n'), ((887, (6, 10)), '*CHI:\tmilk and chocolate (.) .\n'), ((887, (15, 24)), '*CHI:\tmilk and chocolate (.) .\n'), ((1386, (26, 31)), "*BRO:\tdidn't you get some juice ?\n"), ((1399, (32, 37)), "*CHI:\tDaddy I didn't ask for no juice .\n"), ((1409, (10, 15)), '*CHI:\txxx juice thank you .\n'), ((1468, (32, 37)), '*MOT:\tI am [!] gonna bring some juice .\n'), ((1481, (20, 25)), "*MOT:\tI'm gonna get juice .\n"), ((1499, (6, 14)), '*MOT:\tpotatoes only [?] (.) .\n'), ((1545, (22, 28)), "*CHI:\tI don't like no pepper .\n"), ((1549, (18, 24)), '*CHI:\tdo you like pepper ?\n'), ((1630, (24, 28)), '*MOT:\twant some of this soup xxx ?\n'), ((1633, (10, 14)), '*BRO:\txxx soup bowl ?\n'), ((1771, (29, 33)), '*CHI:\txxx I picked up my own meat (.) .\n'), ((1841, (6, 12)), '*CHI:\tpepper (.) .\n'), ((1991, (32, 42)), '*MOT:\t<eat [/] eat [/] eat your applesauce> [<] .\n'), ((2031, (22, 27)), '*CHI:\tI want that [?] water .\n'), ((2043, (16, 21)), '*FAT:\tneed some water xxx .\n'), ((2046, (18, 23)), '*CHI:\tI want some water xxx .\n'), ((2180, (29, 33)), "*MOT:\t<don't throw away that milk> [<] .\n"), ((2276, (20, 24)), '*MOT:\tyou drink any milk ?\n'), ((2284, (20, 24)), '*MOT:\tyou drink any milk ?\n')]
calculating accuracy and recall
correct labels:
set(['pepper', 'soup', 'potatoes', 'chocolate', 'water', 'juice', 'applesauce', 'milk'])
predicted labels:
set(['pepper', 'meat', 'soup', 'potatoes', 'chocolate', 'water', 'juice', 'applesauce', 'milk'])
file:HSLLD/HV1/MT//aimmt1.cha
precision: 0.888888888889
recall: 1.0
true positives:['applesauce', 'chocolate', 'juice', 'milk', 'pepper', 'potatoes', 'soup', 'water']
false positives: ['meat']
false negatives: []
# true pos: 8
# false pos: 1
# false neg: 0
HSLLD/HV1/MT//tamtp1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tamtp1.cha
HSLLD/HV1/MT//raumt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//raumt1.cha
HSLLD/HV1/MT//mitmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//mitmt1.cha
HSLLD/HV1/MT//joymt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//joymt1.cha
HSLLD/HV1/MT//rosmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//rosmt1.cha
HSLLD/HV1/MT//deamt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//deamt1.cha
HSLLD/HV1/MT//trimt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//trimt1.cha
HSLLD/HV1/MT//catmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//catmt1.cha
HSLLD/HV1/MT//gremt1.cha
loading solution set
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f66e638>)
no calories detected for food word
milk milk 46
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6953f8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f695d88>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f695fc8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6950e0>)
no calories detected for food word
loading solution set
calculating
set([(78, (32, 40)), (24, (15, 23)), (44, (18, 22))])
[((24, (15, 23)), '*MOT:\teat your sandwich .\n'), ((44, (18, 22)), '*MOT:\t<drink your milk> [<] [///] eat !\n'), ((78, (32, 40)), '*MOT:\tthen sit [!] and eat your sandwich .\n')]
set([(24, (15, 23)), (78, (32, 40)), (355, (14, 22)), (224, (94, 102)), (309, (37, 45)), (44, (18, 22))])
[((24, (15, 23)), '*MOT:\teat your sandwich .\n'), ((44, (18, 22)), '*MOT:\t<drink your milk> [<] [///] eat !\n'), ((78, (32, 40)), '*MOT:\tthen sit [!] and eat your sandwich .\n'), ((224, (94, 102)), "*MOT:\t(..) <when you're done [>]> [/] (.) when you're done with that I('ve) got some more (.) sandwich .\n"), ((309, (37, 45)), '*MOT:\tyou have_to finish eating your sandwich .\n'), ((355, (14, 22)), '*MOT:\teat the sandwich .\n')]
calculating accuracy and recall
correct labels:
set(['sandwich', 'milk'])
predicted labels:
set(['sandwich', 'milk'])
file:HSLLD/HV1/MT//gremt1.cha
precision: 1.0
recall: 1.0
true positives:['milk', 'sandwich']
false positives: []
false negatives: []
# true pos: 2
# false pos: 0
# false neg: 0
HSLLD/HV1/MT//karmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//karmt1.cha
HSLLD/HV1/MT//annmt1.cha
loading solution set
sunshine sunshine 416
honey honey 304
meatballs meatballs 197
bread bread 186
cherries cherries 83
honey honey 304
honey honey 304
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4d5ef0>)
no calories detected for food word
tea tea 2
tea tea 2
milk milk 46
milk milk 46
milk milk 46
milk milk 46
pie pie 290
honey honey 304
loading solution set
calculating
set([(183, (25, 30)), (226, (27, 35)), (655, (27, 31)), (640, (11, 15)), (734, (52, 55)), (166, (29, 38)), (667, (35, 44)), (384, (10, 16)), (662, (14, 23)), (667, (6, 15))])
[((166, (29, 38)), '*CHI:\t(..) Bob you made good meatballs .\n'), ((183, (25, 30)), "*CHI:\tI'm gettin(g) more bread .\n"), ((226, (27, 35)), '*CHI:\t(..) can I have more cherries ?\n'), ((384, (10, 16)), '*CHI:\txxx tomato .\n'), ((640, (11, 15)), '*MOT:\t<the milk> [<] ?\n'), ((655, (27, 31)), "*MA1:\twell then it's gross milk don't buy it anymore .\n"), ((662, (14, 23)), "*MOT:\tno it's skim milk it's good !\n"), ((667, (6, 15)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((667, (35, 44)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((734, (52, 55)), '*MA1:\tyou said you [//] she could help you make the pie .\n')]
set([(183, (25, 30)), (111, (40, 48)), (226, (27, 35)), (734, (52, 55)), (662, (19, 23)), (655, (27, 31)), (640, (11, 15)), (667, (11, 15)), (166, (29, 38)), (230, (11, 16)), (469, (25, 28)), (384, (10, 16)), (313, (11, 16)), (798, (6, 11)), (460, (25, 28)), (667, (40, 44)), (147, (11, 16)), (111, (18, 26))])
[((111, (18, 26)), '*CHI:\t<you are my sunshine my> [<] only sunshine .\n'), ((111, (40, 48)), '*CHI:\t<you are my sunshine my> [<] only sunshine .\n'), ((147, (11, 16)), '*FE1:\twhat honey ?\n'), ((166, (29, 38)), '*CHI:\t(..) Bob you made good meatballs .\n'), ((183, (25, 30)), "*CHI:\tI'm gettin(g) more bread .\n"), ((226, (27, 35)), '*CHI:\t(..) can I have more cherries ?\n'), ((230, (11, 16)), '*MOT:\twhat honey xxx Anna finish your supper please .\n'), ((313, (11, 16)), '*FE1:\twhat honey ?\n'), ((384, (10, 16)), '*CHI:\txxx tomato .\n'), ((460, (25, 28)), "*MOT:\twho else gives you tea parties at eleven o'clock at night huh ?\n"), ((469, (25, 28)), '*MOT:\tNana lets you have tea parties at night like I do ?\n'), ((640, (11, 15)), '*MOT:\t<the milk> [<] ?\n'), ((655, (27, 31)), "*MA1:\twell then it's gross milk don't buy it anymore .\n"), ((662, (19, 23)), "*MOT:\tno it's skim milk it's good !\n"), ((667, (11, 15)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((667, (40, 44)), "*MOT:\tskim milk I know that's what skim milk tastes like .\n"), ((734, (52, 55)), '*MA1:\tyou said you [//] she could help you make the pie .\n'), ((798, (6, 11)), "*MOT:\thoney I don't know (.) I don't have the time you know ?\n")]
calculating accuracy and recall
correct labels:
set(['tomato', 'skim milk', 'meatballs', 'pie', 'cherries', 'milk', 'bread'])
predicted labels:
set(['tomato', 'tea', 'sunshine', 'meatballs', 'pie', 'honey', 'cherries', 'milk', 'bread'])
file:HSLLD/HV1/MT//annmt1.cha
precision: 0.666666666667
recall: 0.857142857143
true positives:['bread', 'cherries', 'meatballs', 'milk', 'pie', 'tomato']
false positives: ['honey', 'sunshine', 'tea']
false negatives: ['skim milk']
# true pos: 6
# false pos: 3
# false neg: 1
HSLLD/HV1/MT//tommt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tommt1.cha
HSLLD/HV1/MT//kevmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//kevmt1.cha
HSLLD/HV1/MT//jammt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jammt1.cha
HSLLD/HV1/MT//anamt1.cha
loading solution set
juice juice 52
cheese cheese 280
cheese cheese 280
cheese cheese 280
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f404878>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f404cb0>)
no calories detected for food word
juice juice 52
juice juice 52
juice juice 52
strawberries strawberries 96
milk milk 46
muffin muffin 255
water water 18
muffin muffin 255
onions onions 26
onions onions 26
onions onions 26
onions onions 26
onions onions 26
honey honey 304
juice juice 52
juice juice 52
juice juice 52
juice juice 52
muffin muffin 255
muffin muffin 255
juice juice 52
juice juice 52
juice juice 52
juice juice 52
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4126c8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f3f0cf8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f412128>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f3f85f0>)
no calories detected for food word
duck duck 84
honey honey 304
honey honey 304
duck duck 84
duck duck 84
honey honey 304
loading solution set
calculating
set([(1481, (41, 49)), (163, (11, 15)), (723, (57, 62)), (850, (66, 74)), (69, (28, 34)), (650, (37, 45)), (1124, (24, 33)), (618, (19, 25)), (1217, (25, 34)), (1026, (77, 82)), (551, (15, 23)), (465, (30, 37)), (47, (21, 27)), (733, (29, 34)), (837, (45, 53)), (401, (19, 24)), (745, (8, 14)), (647, (28, 36)), (661, (16, 21)), (755, (58, 63)), (505, (19, 25)), (510, (17, 23)), (1202, (31, 40)), (915, (31, 39)), (1143, (23, 32)), (1489, (17, 25)), (1486, (17, 25)), (1164, (36, 45)), (163, (26, 38)), (133, (23, 28)), (438, (14, 20)), (865, (28, 36)), (37, (18, 23)), (850, (34, 39)), (792, (24, 32)), (809, (44, 52)), (505, (41, 47)), (137, (10, 15)), (739, (20, 26)), (1550, (9, 17)), (450, (23, 31)), (447, (13, 22)), (1226, (31, 39)), (714, (57, 62)), (462, (25, 32)), (441, (34, 41)), (804, (28, 36)), (608, (25, 31)), (53, (27, 33)), (689, (25, 33)), (390, (14, 20)), (526, (17, 25)), (623, (26, 32)), (763, (31, 36)), (160, (15, 20)), (770, (48, 56)), (453, (13, 21))])
[((37, (18, 23)), '*MOT:\tso you want juice like that (.) ?\n'), ((47, (21, 27)), '*BRO:\tI like it with cheese .\n'), ((53, (27, 33)), "*MOT:\tI don't have (.) xxx cheese .\n"), ((69, (28, 34)), "*MOT:\tI don't have any good cheese look .\n"), ((133, (23, 28)), '*MOT:\tdo you like that juice ?\n'), ((137, (10, 15)), '*CHI:\txxx juice .\n'), ((160, (15, 20)), '*MOT:\tthis (.) juice .\n'), ((163, (11, 15)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((163, (26, 38)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((390, (14, 20)), '*MOT:\teat the muffin then .\n'), ((401, (19, 24)), '*MOT:\tlook at this water .\n'), ((438, (14, 20)), '*MOT:\teat the muffin okay .\n'), ((441, (34, 41)), "*MOT:\thurry up and I'll get you a vitamin (.) after you finish your dinner ?\n"), ((447, (13, 22)), '*BRO:\tI want popsicles .\n'), ((450, (23, 31)), "*MOT:\tthat's right the popsicle too .\n"), ((453, (13, 21)), '*BRO:\twant a popsicle (.) ?\n'), ((462, (25, 32)), "*CHI:\tbut I don't want a vitamin .\n"), ((465, (30, 37)), "*MOT:\tthen you won't eat your vitamin that's no problem Mariana .\n"), ((505, (19, 25)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((505, (41, 47)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((510, (17, 23)), '*BRO:\tI hate [!] onions .\n'), ((526, (17, 25)), '*MOT:\tyou want a popsicle you know what to do .\n'), ((551, (15, 23)), '*BRO:\tI want a popsicle .\n'), ((608, (25, 31)), "*BRO:\tI don't like those onions .\n"), ((618, (19, 25)), "*BRO:\tI don't want onions .\n"), ((623, (26, 32)), "*MOT:\tit doesn't have any onions Mikey .\n"), ((647, (28, 36)), "*MOT:\t&-uh Mikey's having a popsicle .\n"), ((650, (37, 45)), "*MOT:\tmaybe Mariana doesn't want any popsicle (.) .\n"), ((661, (16, 21)), '*MOT:\tdrink the juice too (.) .\n'), ((689, (25, 33)), "*BRO:\tbet it'll melt the popsicle .\n"), ((714, (57, 62)), '*MOT:\ttell [/] tell Mariana to come in now and drink the juice .\n'), ((723, (57, 62)), '*BRO:\tMariana [!] Mariana [!] come on [?] and drink your juice .\n'), ((733, (29, 34)), '*MOT:\tokay Mariana drink the juice .\n'), ((739, (20, 26)), '*MOT:\tand eat your <muffin [?] > [>] .\n'), ((745, (8, 14)), '*CHI:\ta muffin ?\n'), ((755, (58, 63)), '*MOT:\teither one as long as you eat it (.) and drink your juice (.) .\n'), ((763, (31, 36)), '*MOT:\twould you like some more juice ?\n'), ((770, (48, 56)), "*MOT:\tfinish that xxx and then I'll get you the popsicle .\n"), ((792, (24, 32)), '*MOT:\thow can you eat a popsicle then (.) ?\n'), ((804, (28, 36)), "*BRO:\twhen you [//] I eat a popsicle <I don't> [/] I don't +...\n"), ((809, (44, 52)), "*BRO:\tI was eating in the store and I ate a popsicle and I didn't hurt my throat .\n"), ((837, (45, 53)), "*MOT:\tgood lord if you drink you can't eat a popsicle if it is gonna (.) create so much pain .\n"), ((850, (34, 39)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((850, (66, 74)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((865, (28, 36)), "*MOT:\tthen you can't have a popsicle if it's only going to <hurt your> [/] hurt your throat .\n"), ((915, (31, 39)), "*MOT:\tyou're not able to eat a popsicle <so xxx> [>] .\n"), ((1026, (77, 82)), '*CHI:\t<he says> [/] <he says> [//] <Mikey says> [>] [/] Mikey says only this juice .\n'), ((1124, (24, 33)), '*BRO:\tno but there were popsicles in the box .\n'), ((1143, (23, 32)), "*MOT:\tthere're no more popsicles .\n"), ((1164, (36, 45)), '*MOT:\thow can you expect to be more popsicles ?\n'), ((1202, (31, 40)), '*BRO:\tnuhhuh when we get those popsicles (.) those are for the picnic .\n'), ((1217, (25, 34)), '*CHI:\tand I can open the popsicles .\n'), ((1226, (31, 39)), '*CHI:\t<and I> [<] can open the popsicle .\n'), ((1481, (41, 49)), '*MOT:\t<not right now when you finish the popsicle> [>] .\n'), ((1486, (17, 25)), '*BRO:\t<bite your popsicle> [<] .\n'), ((1489, (17, 25)), '*BRO:\tbite your <popsicle Mariana> [>] .\n'), ((1550, (9, 17)), '*BRO:\tmy popsicle melting .\n')]
set([(163, (11, 15)), (2346, (24, 29)), (723, (57, 62)), (69, (28, 34)), (733, (29, 34)), (618, (19, 25)), (1955, (28, 33)), (47, (21, 27)), (101, (75, 80)), (850, (34, 39)), (661, (16, 21)), (1054, (11, 16)), (755, (58, 63)), (1235, (24, 28)), (505, (19, 25)), (510, (17, 23)), (1071, (15, 20)), (163, (26, 38)), (133, (23, 28)), (438, (14, 20)), (745, (8, 14)), (1057, (10, 15)), (2175, (19, 23)), (93, (75, 80)), (505, (41, 47)), (137, (10, 15)), (2188, (10, 14)), (1315, (10, 15)), (658, (14, 19)), (401, (19, 24)), (714, (57, 62)), (739, (20, 26)), (1026, (77, 82)), (608, (25, 31)), (53, (27, 33)), (390, (14, 20)), (1041, (25, 30)), (37, (18, 23)), (623, (26, 32)), (763, (31, 36)), (160, (15, 20))])
[((37, (18, 23)), '*MOT:\tso you want juice like that (.) ?\n'), ((47, (21, 27)), '*BRO:\tI like it with cheese .\n'), ((53, (27, 33)), "*MOT:\tI don't have (.) xxx cheese .\n"), ((69, (28, 34)), "*MOT:\tI don't have any good cheese look .\n"), ((93, (75, 80)), '*MOT:\tfor giving me (.) the things I need (.) the sun and the rain and the apple seed .\n'), ((101, (75, 80)), '*BRO:\tfor giving me (.) the things I need (.) the sun and the rain and the apple seed .\n'), ((133, (23, 28)), '*MOT:\tdo you like that juice ?\n'), ((137, (10, 15)), '*CHI:\txxx juice .\n'), ((160, (15, 20)), '*MOT:\tthis (.) juice .\n'), ((163, (11, 15)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((163, (26, 38)), '*MOT:\twith milk and <&-uh strawberries> [>] .\n'), ((390, (14, 20)), '*MOT:\teat the muffin then .\n'), ((401, (19, 24)), '*MOT:\tlook at this water .\n'), ((438, (14, 20)), '*MOT:\teat the muffin okay .\n'), ((505, (19, 25)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((505, (41, 47)), "*BRO:\tI don't like onions I don't I hate onions .\n"), ((510, (17, 23)), '*BRO:\tI hate [!] onions .\n'), ((608, (25, 31)), "*BRO:\tI don't like those onions .\n"), ((618, (19, 25)), "*BRO:\tI don't want onions .\n"), ((623, (26, 32)), "*MOT:\tit doesn't have any onions Mikey .\n"), ((658, (14, 19)), '*MOT:\tcome on honey [?] (.) .\n'), ((661, (16, 21)), '*MOT:\tdrink the juice too (.) .\n'), ((714, (57, 62)), '*MOT:\ttell [/] tell Mariana to come in now and drink the juice .\n'), ((723, (57, 62)), '*BRO:\tMariana [!] Mariana [!] come on [?] and drink your juice .\n'), ((733, (29, 34)), '*MOT:\tokay Mariana drink the juice .\n'), ((739, (20, 26)), '*MOT:\tand eat your <muffin [?] > [>] .\n'), ((745, (8, 14)), '*CHI:\ta muffin ?\n'), ((755, (58, 63)), '*MOT:\teither one as long as you eat it (.) and drink your juice (.) .\n'), ((763, (31, 36)), '*MOT:\twould you like some more juice ?\n'), ((850, (34, 39)), "*MOT:\tif it doesn't hurt with the juice then it won't hurt with a popsicle (.) .\n"), ((1026, (77, 82)), '*CHI:\t<he says> [/] <he says> [//] <Mikey says> [>] [/] Mikey says only this juice .\n'), ((1041, (25, 30)), '*MOT:\twe have a cherry a grape and an orange one .\n'), ((1054, (11, 16)), '*BRO:\t<the grape> [<] .\n'), ((1057, (10, 15)), '*BRO:\tthe grape .\n'), ((1071, (15, 20)), "*MOT:\tthat's a grape .\n"), ((1235, (24, 28)), "*BRO:\tthat's (.) Donald Duck .\n"), ((1315, (10, 15)), '*MOT:\twhy honey ?\n'), ((1955, (28, 33)), '*MOT:\tyou finish that first honey .\n'), ((2175, (19, 23)), '*MOT:\tlike [?] the duck tales .\n'), ((2188, (10, 14)), "*BRO:\tthe duck tales don't got a dog .\n"), ((2346, (24, 29)), "*MOT:\twhat's the matter honey [>] ?\n")]
calculating accuracy and recall
correct labels:
set(['cheese', 'popsicle', 'muffin', 'vitamin', 'popsicles', 'water', 'juice', 'strawberries', 'onions', 'milk'])
predicted labels:
set(['cheese', 'grape', 'apple', 'muffin', 'water', 'juice', 'honey', 'strawberries', 'duck', 'onions', 'milk'])
file:HSLLD/HV1/MT//anamt1.cha
precision: 0.636363636364
recall: 0.7
true positives:['cheese', 'juice', 'milk', 'muffin', 'onions', 'strawberries', 'water']
false positives: ['apple', 'duck', 'grape', 'honey']
false negatives: ['popsicle', 'popsicles', 'vitamin']
# true pos: 7
# false pos: 4
# false neg: 3
HSLLD/HV1/MT//joemt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//joemt1.cha
HSLLD/HV1/MT//stnmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//stnmt1.cha
HSLLD/HV1/MT//zenmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//zenmt1.cha
HSLLD/HV1/MT//sarmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//sarmt1.cha
HSLLD/HV1/MT//megmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//megmt1.cha
HSLLD/HV1/MT//jebmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jebmt1.cha
HSLLD/HV1/MT//davmt1.cha
loading solution set
broccoli broccoli 30
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f656050>)
no calories detected for food word
juice juice 52
fish fish 305
fish fish 305
fish fish 305
fish fish 305
fish fish 305
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6568c0>)
no calories detected for food word
chicken chicken 234
mother's mother's 469
chicken chicken 234
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f656ea8>)
no calories detected for food word
chicken chicken 234
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6587e8>)
no calories detected for food word
juice juice 52
water water 18
water water 18
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f658758>)
no calories detected for food word
egg egg 357
egg egg 357
juice juice 52
broccoli broccoli 30
broccoli broccoli 30
broccoli broccoli 30
broccoli broccoli 30
carrots carrots 35
peas peas 116
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f658c68>)
no calories detected for food word
broccoli broccoli 30
broccoli broccoli 30
broccoli broccoli 30
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f656b00>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f656f38>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f656b90>)
no calories detected for food word
chocolate chocolate 598
chocolate chocolate 598
chocolate chocolate 598
chocolate chocolate 598
broccoli broccoli 30
chocolate chocolate 598
chocolate cake chocolate cake 371
cake cake 412
chocolate chocolate 598
chocolate cake chocolate cake 371
cake cake 412
chocolate chocolate 598
chocolate cake chocolate cake 371
cake cake 412
chocolate chocolate 598
chocolate chocolate 598
broccoli broccoli 30
loading solution set
calculating
set([(189, (51, 61)), (2278, (6, 11)), (2339, (27, 45)), (1253, (26, 35)), (2304, (10, 19)), (1868, (43, 51)), (657, (61, 68)), (103, (38, 48)), (231, (6, 11)), (634, (10, 18)), (2048, (17, 25)), (1262, (36, 45)), (324, (36, 44)), (1904, (44, 52)), (2541, (48, 56)), (1887, (26, 34)), (1936, (62, 69)), (1012, (6, 11)), (2347, (13, 27)), (2350, (20, 34)), (221, (16, 24)), (2288, (21, 29)), (958, (41, 51)), (1876, (20, 28)), (565, (32, 40)), (1852, (38, 48)), (2270, (17, 22)), (1536, (40, 45)), (2354, (22, 36)), (845, (25, 35)), (2319, (6, 15)), (1936, (43, 48)), (2556, (29, 39)), (585, (25, 32)), (2285, (17, 29)), (321, (18, 26)), (609, (24, 31)), (1936, (74, 78)), (1209, (39, 49)), (2359, (19, 28)), (2006, (53, 61)), (2326, (19, 28)), (830, (11, 19)), (1528, (29, 39)), (2288, (61, 70)), (973, (31, 36)), (1019, (22, 27)), (968, (17, 27)), (2084, (42, 50)), (289, (17, 22))])
[((103, (38, 48)), "*MOT:\tsave some and don't eat all the cantaloupe .\n"), ((189, (51, 61)), '*MOT:\twell if it hurts that much (.) just eat your cantaloupe .\n'), ((221, (16, 24)), '*MOT:\twant some broccoli ?\n'), ((231, (6, 11)), '*MOT:\tlemon [<] !\n'), ((289, (17, 22)), '*FAT:\twatch your juice [>] .\n'), ((321, (18, 26)), '*FAT:\tthat was my ice cube .\n'), ((324, (36, 44)), '*FAT:\tthat little (.) squeal was my ice cube .\n'), ((565, (32, 40)), '*FAT:\t<here have> [<] some more sandwich .\n'), ((585, (25, 32)), '*MOT:\twanna [<] try some chicken ?\n'), ((609, (24, 31)), '*CHI:\tthat [/] that was chicken .\n'), ((634, (10, 18)), '*FAT:\t+, <sandwich then Chi> [<] .\n'), ((657, (61, 68)), '*MOT:\tthat was a couple o(f) weeks [!] ago that you ate that chicken .\n'), ((830, (11, 19)), '*FAT:\tgood sandwich though huh ?\n'), ((845, (25, 35)), "*FAT:\tdon't you want any cantaloupe ?\n"), ((958, (41, 51)), "*MOT:\tdon't you even want your delicious cantaloupe ?\n"), ((968, (17, 27)), '*MOT:\tnice juicy cantaloupe ?\n'), ((973, (31, 36)), "*MOT:\twhy don't you drink your juice at least ?\n"), ((1012, (6, 11)), '*CHI:\twater [!] ?\n'), ((1019, (22, 27)), "*MOT:\tthat's not even water is it ?\n"), ((1209, (39, 49)), "*MOT:\tmaybe it'll eat the rest of your cantaloupe .\n"), ((1253, (26, 35)), '*MOT:\thad a hankering for egg salad did you &=laughs ?\n'), ((1262, (36, 45)), "*FAT:\t<it looks so good (.) all the egg salad's> [<] popping out of the sandwiches .\n"), ((1528, (29, 39)), '*MOT:\tare you gonna eat your cantaloupe ?\n'), ((1536, (40, 45)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1852, (38, 48)), '*FAT:\there you want some more of this cantaloupe Chi ?\n'), ((1868, (43, 51)), "*CHI:\they [!] <don't cover> [<] up (.) the broccoli !\n"), ((1876, (20, 28)), '*MOT:\tyou want more broccoli ?\n'), ((1887, (26, 34)), "*MOT:\tI'll bring you some broccoli .\n"), ((1904, (44, 52)), '*MOT:\tChi wants to try a little (.) tree of broccoli .\n'), ((1936, (43, 48)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (62, 69)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (74, 78)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((2006, (53, 61)), "*FAT:\tgo on in there I'll bring you a piece of it [= broccoli] .\n"), ((2048, (17, 25)), '*FAT:\ta piece of broccoli .\n'), ((2084, (42, 50)), "*MOT:\twhy don't you sit down and try that broccoli now ?\n"), ((2270, (17, 22)), '*MOT:\tit has got candy inside .\n'), ((2278, (6, 11)), '*CHI:\tcandy inside ?\n'), ((2285, (17, 29)), '*FAT:\tyeah chewy Tootsie Roll .\n'), ((2288, (21, 29)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2288, (61, 70)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2304, (10, 19)), '*CHI:\tbut chocolate <gives me a tummy+ache> [>] .\n'), ((2319, (6, 15)), '*FAT:\tchocolate gives him a tummy+ache ?\n'), ((2326, (19, 28)), "*CHI:\tI don't like chocolate xxx [>] .\n"), ((2339, (27, 45)), "*MOT:\t<you don't like> [<] chocolate broccoli ?\n"), ((2347, (13, 27)), '*CHI:\tI like chocolate cake .\n'), ((2350, (20, 34)), '*MOT:\tyou only want chocolate cake ?\n'), ((2354, (22, 36)), '*MOT:\twell it has got chocolate cake sprinkled inside it .\n'), ((2359, (19, 28)), "*CHI:\tI don't like chocolate [?] .\n"), ((2541, (48, 56)), "*FAT:\tyou don't want any more of that delicious broccoli huh ?\n"), ((2556, (29, 39)), "*MOT:\tyou [<] don't any more cantaloupe ?\n")]
set([(528, (30, 34)), (2278, (6, 11)), (1253, (26, 35)), (369, (21, 25)), (2304, (10, 19)), (657, (61, 68)), (1868, (43, 51)), (231, (6, 11)), (634, (10, 18)), (2288, (21, 30)), (2048, (17, 25)), (2006, (53, 61)), (1936, (62, 69)), (1904, (44, 52)), (1887, (26, 34)), (601, (67, 75)), (1012, (6, 11)), (534, (38, 42)), (2347, (13, 27)), (2350, (20, 34)), (2339, (27, 45)), (1876, (20, 28)), (565, (32, 40)), (2270, (17, 22)), (1536, (40, 45)), (2354, (22, 36)), (2319, (6, 15)), (1936, (43, 48)), (585, (25, 32)), (541, (18, 22)), (2541, (48, 56)), (609, (24, 31)), (221, (16, 24)), (2359, (19, 28)), (2326, (19, 28)), (435, (20, 24)), (830, (11, 19)), (2288, (61, 70)), (973, (31, 36)), (1019, (22, 27)), (1936, (74, 78)), (1262, (36, 39)), (2084, (42, 50)), (289, (17, 22))])
[((221, (16, 24)), '*MOT:\twant some broccoli ?\n'), ((231, (6, 11)), '*MOT:\tlemon [<] !\n'), ((289, (17, 22)), '*FAT:\twatch your juice [>] .\n'), ((369, (21, 25)), "*MOT:\tdidn't we play Fish ?\n"), ((435, (20, 24)), '*CHI:\tand we played Fish .\n'), ((528, (30, 34)), '*CHI:\t<we did> [//] we played Fish !\n'), ((534, (38, 42)), '*CHI:\t<and we> [>] (.) played another Fish right ?\n'), ((541, (18, 22)), '*MOT:\tdid we play Fish twice ?\n'), ((565, (32, 40)), '*FAT:\t<here have> [<] some more sandwich .\n'), ((585, (25, 32)), '*MOT:\twanna [<] try some chicken ?\n'), ((601, (67, 75)), "*CHI:\tI tried it when you have [?] a party <at (.) at> [/] at your mother's house .\n"), ((609, (24, 31)), '*CHI:\tthat [/] that was chicken .\n'), ((634, (10, 18)), '*FAT:\t+, <sandwich then Chi> [<] .\n'), ((657, (61, 68)), '*MOT:\tthat was a couple o(f) weeks [!] ago that you ate that chicken .\n'), ((830, (11, 19)), '*FAT:\tgood sandwich though huh ?\n'), ((973, (31, 36)), "*MOT:\twhy don't you drink your juice at least ?\n"), ((1012, (6, 11)), '*CHI:\twater [!] ?\n'), ((1019, (22, 27)), "*MOT:\tthat's not even water is it ?\n"), ((1253, (26, 35)), '*MOT:\thad a hankering for egg salad did you &=laughs ?\n'), ((1262, (36, 39)), "*FAT:\t<it looks so good (.) all the egg salad's> [<] popping out of the sandwiches .\n"), ((1536, (40, 45)), '*FAT:\t<here dip [/]> [<] dip it in your juice and see what it tastes like .\n'), ((1868, (43, 51)), "*CHI:\they [!] <don't cover> [<] up (.) the broccoli !\n"), ((1876, (20, 28)), '*MOT:\tyou want more broccoli ?\n'), ((1887, (26, 34)), "*MOT:\tI'll bring you some broccoli .\n"), ((1904, (44, 52)), '*MOT:\tChi wants to try a little (.) tree of broccoli .\n'), ((1936, (43, 48)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (62, 69)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((1936, (74, 78)), '*MOT:\tyou always tell me that you eat your salad [!] and your carrots and peas .\n'), ((2006, (53, 61)), "*FAT:\tgo on in there I'll bring you a piece of it [= broccoli] .\n"), ((2048, (17, 25)), '*FAT:\ta piece of broccoli .\n'), ((2084, (42, 50)), "*MOT:\twhy don't you sit down and try that broccoli now ?\n"), ((2270, (17, 22)), '*MOT:\tit has got candy inside .\n'), ((2278, (6, 11)), '*CHI:\tcandy inside ?\n'), ((2288, (21, 30)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2288, (61, 70)), "*MOT:\tyou know those lollipops that you eat and then there's chocolate inside ?\n"), ((2304, (10, 19)), '*CHI:\tbut chocolate <gives me a tummy+ache> [>] .\n'), ((2319, (6, 15)), '*FAT:\tchocolate gives him a tummy+ache ?\n'), ((2326, (19, 28)), "*CHI:\tI don't like chocolate xxx [>] .\n"), ((2339, (27, 45)), "*MOT:\t<you don't like> [<] chocolate broccoli ?\n"), ((2347, (13, 27)), '*CHI:\tI like chocolate cake .\n'), ((2350, (20, 34)), '*MOT:\tyou only want chocolate cake ?\n'), ((2354, (22, 36)), '*MOT:\twell it has got chocolate cake sprinkled inside it .\n'), ((2359, (19, 28)), "*CHI:\tI don't like chocolate [?] .\n"), ((2541, (48, 56)), "*FAT:\tyou don't want any more of that delicious broccoli huh ?\n")]
calculating accuracy and recall
correct labels:
set(['cantaloupe', 'sandwich', 'lemon', 'salad', 'tootsie roll', 'carrots', 'egg salad', 'candy', 'peas', 'water', 'juice', 'lollipop', 'chocolate broccoli', 'ice cube', 'chocolate cake', 'chicken', 'chocolate', 'broccoli'])
predicted labels:
set(['sandwich', 'lemon', 'lollipops', 'salad', "mother's", 'fish', 'carrots', 'egg salad', 'candy', 'peas', 'water', 'juice', 'chocolate broccoli', 'chocolate cake', 'chicken', 'chocolate', 'egg', 'broccoli'])
file:HSLLD/HV1/MT//davmt1.cha
precision: 0.777777777778
recall: 0.777777777778
true positives:['broccoli', 'candy', 'carrots', 'chicken', 'chocolate', 'chocolate broccoli', 'chocolate cake', 'egg salad', 'juice', 'lemon', 'peas', 'salad', 'sandwich', 'water']
false positives: ['egg', 'fish', 'lollipops', "mother's"]
false negatives: ['cantaloupe', 'ice cube', 'lollipop', 'tootsie roll']
# true pos: 14
# false pos: 4
# false neg: 4
HSLLD/HV1/MT//brimt1.cha
loading solution set
butter butter 499
noodles noodles 138
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5da050>)
no calories detected for food word
applesauce applesauce 76
loading solution set
calculating
set([(452, (20, 30)), (148, (45, 52)), (148, (31, 37))])
[((148, (31, 37)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((148, (45, 52)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((452, (20, 30)), '*MOT:\tyou want some applesauce or somethin(g) ?\n')]
set([(336, (27, 31)), (148, (45, 52)), (452, (20, 30)), (148, (31, 37))])
[((148, (31, 37)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((148, (45, 52)), '*MOT:\t<<put your> [/] put your butter on the noodles> [<] okay ?\n'), ((336, (27, 31)), '*MOT:\tI have some of those snap things that you throw on the ground .\n'), ((452, (20, 30)), '*MOT:\tyou want some applesauce or somethin(g) ?\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'noodles', 'applesauce'])
predicted labels:
set(['butter', 'snap', 'noodles', 'applesauce'])
file:HSLLD/HV1/MT//brimt1.cha
precision: 0.75
recall: 1.0
true positives:['applesauce', 'butter', 'noodles']
false positives: ['snap']
false negatives: []
# true pos: 3
# false pos: 1
# false neg: 0
HSLLD/HV1/MT//vicmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//vicmt1.cha
HSLLD/HV1/MT//devmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//devmt1.cha
HSLLD/HV1/MT//conmt1.cha
loading solution set
milk milk 46
juice juice 52
milk milk 46
juice juice 52
milk milk 46
juice juice 52
milk milk 46
juice juice 52
milk milk 46
juice juice 52
milk milk 46
juice juice 52
milk milk 46
milk milk 46
milk milk 46
water water 18
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f584320>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f584710>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5842d8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f584128>)
no calories detected for food word
milk milk 46
milk milk 46
spaghetti spaghetti 100
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f584248>)
no calories detected for food word
peaches peaches 72
milk milk 46
milk milk 46
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5a2758>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5a25f0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5a2b48>)
no calories detected for food word
cucumber cucumber 12
lettuce lettuce 16
lettuce lettuce 16
lettuce lettuce 16
lettuce lettuce 16
tomatoes tomatoes 213
lettuce lettuce 16
tomatoes tomatoes 213
lettuce lettuce 16
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f59c878>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f574248>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f59c950>)
no calories detected for food word
dressing dressing 169
lettuce lettuce 16
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f59cdd0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5745a8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5744d0>)
no calories detected for food word
lettuce lettuce 16
lettuce lettuce 16
lettuce lettuce 16
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f574320>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f574878>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5850e0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f574b48>)
no calories detected for food word
loading solution set
calculating
set([(51, (63, 68)), (889, (19, 26)), (48, (6, 10)), (39, (11, 16)), (44, (11, 16)), (51, (36, 40)), (722, (9, 19)), (686, (66, 73)), (51, (47, 51)), (686, (42, 50)), (527, (26, 30)), (390, (13, 17)), (51, (69, 73)), (51, (6, 10)), (36, (6, 10)), (48, (17, 21)), (719, (14, 21)), (760, (47, 52)), (394, (6, 10)), (51, (58, 62)), (578, (18, 24)), (368, (18, 24)), (654, (14, 20)), (819, (29, 37)), (51, (52, 57)), (291, (22, 26)), (769, (26, 34)), (80, (24, 30)), (441, (6, 15)), (708, (25, 32)), (658, (6, 14)), (26, (6, 10)), (828, (30, 37)), (901, (25, 33)), (51, (30, 35)), (51, (15, 20)), (486, (17, 24)), (869, (18, 25)), (30, (16, 21)), (288, (26, 30)), (521, (46, 50)), (671, (6, 13)), (479, (25, 34)), (44, (6, 10)), (39, (6, 10)), (51, (25, 29)), (675, (13, 20)), (665, (11, 21)), (745, (23, 36)), (346, (32, 37)), (869, (10, 17)), (760, (24, 32)), (847, (32, 42)), (51, (41, 46)), (281, (11, 15)), (878, (26, 33)), (48, (11, 16)), (44, (17, 21)), (62, (10, 15)), (715, (22, 30)), (39, (17, 21)), (668, (11, 18))])
[((26, (6, 10)), '*CHI:\tmilk [!] .\n'), ((30, (16, 21)), '*JAK:\t<&m> [//] juice .\n'), ((36, (6, 10)), '*FAT:\tmilk .\n'), ((39, (6, 10)), '*MOT:\tmilk juice milk .\n'), ((39, (11, 16)), '*MOT:\tmilk juice milk .\n'), ((39, (17, 21)), '*MOT:\tmilk juice milk .\n'), ((44, (6, 10)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (11, 16)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (17, 21)), '*CHI:\tmilk juice milk zzz .\n'), ((48, (6, 10)), '*FAT:\tmilk juice milk .\n'), ((48, (11, 16)), '*FAT:\tmilk juice milk .\n'), ((48, (17, 21)), '*FAT:\tmilk juice milk .\n'), ((51, (6, 10)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (15, 20)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (25, 29)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (30, 35)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (36, 40)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (41, 46)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (47, 51)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (52, 57)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (58, 62)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (63, 68)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (69, 73)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((62, (10, 15)), '*JAK:\t<no juice> [<] .\n'), ((80, (24, 30)), '*MOT:\twell you eat some supper now before I give you more okay (11.) ?\n'), ((281, (11, 15)), '*CHI:\tmore milk (.) .\n'), ((288, (26, 30)), '*MOT:\tsay can I have more milk please .\n'), ((291, (22, 26)), '*CHI:\tcan I have more milk please .\n'), ((346, (32, 37)), "*SIS:\txxx just a quick glass of water and we're gonna go back .\n"), ((368, (18, 24)), "*MOT:\tthat's that coffee I made by mistake .\n"), ((390, (13, 17)), '*CHI:\tlittle milk ?\n'), ((394, (6, 10)), '*CHI:\tmilk Mama ?\n'), ((441, (6, 15)), '*MOT:\tspaghetti on his shirt .\n'), ((479, (25, 34)), "*SIS:\tyou didn't buy xxx diet soda ?\n"), ((486, (17, 24)), '*MOT:\tbehind the peaches .\n'), ((521, (46, 50)), "*MOT:\t<xxx> [<] because you drank all of that milk so fast that's probably why .\n"), ((527, (26, 30)), '*JAK:\tyou drank all that <milk> [>] up .\n'), ((578, (18, 24)), '*MOT:\there have a tomato Jake .\n'), ((654, (14, 20)), '*MOT:\tanother tomato ?\n'), ((658, (6, 14)), '*MOT:\tcucumber ?\n'), ((665, (11, 21)), '*CHI:\tmore cucum(ber) .\n'), ((668, (11, 18)), '*MOT:\tsome lettuce .\n'), ((671, (6, 13)), '*MOT:\tlettuce ?\n'), ((675, (13, 20)), '*JAK:\tI like lettuce !\n'), ((686, (42, 50)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((686, (66, 73)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((708, (25, 32)), '*MOT:\tConner do you want lettuce ?\n'), ((715, (22, 30)), '*MOT:\tand do you want tomatoes too ?\n'), ((719, (14, 21)), '*CHI:\tno just lettuce .\n'), ((722, (9, 19)), '*CHI:\tno (to)matoes !\n'), ((745, (23, 36)), "*MOT:\tI don't have any diet dressing for you May .\n"), ((760, (24, 32)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((760, (47, 52)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((769, (26, 34)), '*SIS:\tput your finger [?] dressing .\n'), ((819, (29, 37)), "*MOT:\toh you didn't want the dressing ?\n"), ((828, (30, 37)), '*MOT:\t<you just> [<] want the lettuce ?\n'), ((847, (32, 42)), '*JAK:\twith salad with some more (to)matoes .\n'), ((869, (10, 17)), '*CHI:\txxx lettuce lettuce .\n'), ((869, (18, 25)), '*CHI:\txxx lettuce lettuce .\n'), ((878, (26, 33)), '*JAK:\tI want two more the lettuce .\n'), ((889, (19, 26)), '*MOT:\tyou like the lettuce ?\n'), ((901, (25, 33)), '*MOT:\tyou have plenty of dressing there Jake .\n')]
set([(558, (22, 26)), (760, (47, 52)), (819, (29, 37)), (281, (11, 15)), (786, (52, 56)), (521, (46, 50)), (686, (42, 50)), (44, (6, 16)), (390, (13, 17)), (51, (69, 73)), (51, (6, 10)), (36, (6, 10)), (479, (25, 29)), (48, (17, 21)), (719, (14, 21)), (39, (6, 16)), (394, (6, 10)), (578, (18, 24)), (368, (18, 24)), (654, (14, 20)), (48, (6, 16)), (291, (22, 26)), (745, (23, 27)), (869, (10, 25)), (441, (6, 15)), (30, (16, 21)), (658, (6, 14)), (44, (17, 21)), (828, (30, 37)), (51, (58, 68)), (889, (19, 26)), (51, (15, 20)), (486, (17, 24)), (51, (47, 57)), (288, (26, 30)), (39, (17, 21)), (1028, (21, 27)), (835, (30, 35)), (671, (6, 13)), (384, (19, 24)), (527, (26, 30)), (686, (66, 73)), (1023, (27, 32)), (675, (13, 20)), (841, (11, 16)), (346, (32, 37)), (847, (11, 16)), (51, (25, 35)), (878, (26, 33)), (377, (20, 30)), (934, (63, 67)), (26, (6, 10)), (62, (10, 15)), (715, (22, 30)), (51, (36, 46)), (668, (11, 18)), (708, (25, 32)), (946, (108, 113))])
[((26, (6, 10)), '*CHI:\tmilk [!] .\n'), ((30, (16, 21)), '*JAK:\t<&m> [//] juice .\n'), ((36, (6, 10)), '*FAT:\tmilk .\n'), ((39, (6, 16)), '*MOT:\tmilk juice milk .\n'), ((39, (17, 21)), '*MOT:\tmilk juice milk .\n'), ((44, (6, 16)), '*CHI:\tmilk juice milk zzz .\n'), ((44, (17, 21)), '*CHI:\tmilk juice milk zzz .\n'), ((48, (6, 16)), '*FAT:\tmilk juice milk .\n'), ((48, (17, 21)), '*FAT:\tmilk juice milk .\n'), ((51, (6, 10)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (15, 20)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (25, 35)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (36, 46)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (47, 57)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (58, 68)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((51, (69, 73)), '*JAK:\tmilk (.) juice (.) milk juice milk juice milk juice milk juice milk .\n'), ((62, (10, 15)), '*JAK:\t<no juice> [<] .\n'), ((281, (11, 15)), '*CHI:\tmore milk (.) .\n'), ((288, (26, 30)), '*MOT:\tsay can I have more milk please .\n'), ((291, (22, 26)), '*CHI:\tcan I have more milk please .\n'), ((346, (32, 37)), "*SIS:\txxx just a quick glass of water and we're gonna go back .\n"), ((368, (18, 24)), "*MOT:\tthat's that coffee I made by mistake .\n"), ((377, (20, 30)), '*SIS:\tthis dumb [?] coffee mix .\n'), ((384, (19, 24)), "*MOT:\tthere's &-um fruit punch in the yellow jug (10.) .\n"), ((390, (13, 17)), '*CHI:\tlittle milk ?\n'), ((394, (6, 10)), '*CHI:\tmilk Mama ?\n'), ((441, (6, 15)), '*MOT:\tspaghetti on his shirt .\n'), ((479, (25, 29)), "*SIS:\tyou didn't buy xxx diet soda ?\n"), ((486, (17, 24)), '*MOT:\tbehind the peaches .\n'), ((521, (46, 50)), "*MOT:\t<xxx> [<] because you drank all of that milk so fast that's probably why .\n"), ((527, (26, 30)), '*JAK:\tyou drank all that <milk> [>] up .\n'), ((558, (22, 26)), "*MOT:\tthat's on May's diet .\n"), ((578, (18, 24)), '*MOT:\there have a tomato Jake .\n'), ((654, (14, 20)), '*MOT:\tanother tomato ?\n'), ((658, (6, 14)), '*MOT:\tcucumber ?\n'), ((668, (11, 18)), '*MOT:\tsome lettuce .\n'), ((671, (6, 13)), '*MOT:\tlettuce ?\n'), ((675, (13, 20)), '*JAK:\tI like lettuce !\n'), ((686, (42, 50)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((686, (66, 73)), "*SIS:\t<there's a whole bowl> [<] with two tomatoes and a piece of lettuce .\n"), ((708, (25, 32)), '*MOT:\tConner do you want lettuce ?\n'), ((715, (22, 30)), '*MOT:\tand do you want tomatoes too ?\n'), ((719, (14, 21)), '*CHI:\tno just lettuce .\n'), ((745, (23, 27)), "*MOT:\tI don't have any diet dressing for you May .\n"), ((760, (47, 52)), "*MOT:\toh you can't have dressing <on your> [>] salad ?\n"), ((786, (52, 56)), '*SIS:\tthere was one piece of paper in here with the diet .\n'), ((819, (29, 37)), "*MOT:\toh you didn't want the dressing ?\n"), ((828, (30, 37)), '*MOT:\t<you just> [<] want the lettuce ?\n'), ((835, (30, 35)), '*JAK:\t<&w> [/] <&w> [/] <with salad> [>] .\n'), ((841, (11, 16)), '*JAK:\twith salad .\n'), ((847, (11, 16)), '*JAK:\twith salad with some more (to)matoes .\n'), ((869, (10, 25)), '*CHI:\txxx lettuce lettuce .\n'), ((878, (26, 33)), '*JAK:\tI want two more the lettuce .\n'), ((889, (19, 26)), '*MOT:\tyou like the lettuce ?\n'), ((934, (63, 67)), '*SIS:\tdo you know where the other part of the &-um paper of my diet is ?\n'), ((946, (108, 113)), '*SIS:\tyeah I had that little piece xxx my lunch and when I got_to my drink and when I got_to the end of the salad I was full .\n'), ((1023, (27, 32)), "*CHI:\tJake you <didn't eat salad> [>] .\n"), ((1028, (21, 27)), '*MOT:\t<this is a big tomato> [<] .\n')]
calculating accuracy and recall
correct labels:
set(['diet soda', 'peaches', 'coffee', 'salad', 'lettuce', 'diet dressing', '(to)matoes', 'cucum(ber)', 'water', 'juice', 'cucumber', 'tomato', 'supper', 'dressing', 'spaghetti', 'milk', 'tomatoes'])
predicted labels:
set(['tomato', 'peaches', 'coffee', 'coffee mix', 'salad', 'lettuce', 'lettuce lettuce', 'diet', 'water', 'juice', 'fruit', 'cucumber', 'dressing', 'milk juice', 'spaghetti', 'milk', 'tomatoes'])
file:HSLLD/HV1/MT//conmt1.cha
precision: 0.705882352941
recall: 0.705882352941
true positives:['coffee', 'cucumber', 'dressing', 'juice', 'lettuce', 'milk', 'peaches', 'salad', 'spaghetti', 'tomato', 'tomatoes', 'water']
false positives: ['coffee mix', 'diet', 'fruit', 'lettuce lettuce', 'milk juice']
false negatives: ['(to)matoes', 'cucum(ber)', 'diet dressing', 'diet soda', 'supper']
# true pos: 12
# false pos: 5
# false neg: 5
HSLLD/HV1/MT//emimt1.cha
loading solution set
butter butter 499
broccoli broccoli 30
broccoli broccoli 30
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6c4128>)
no calories detected for food word
pork pork 541
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6c4320>)
no calories detected for food word
corn corn 419
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6c4170>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6c4098>)
no calories detected for food word
potato salad potato salad 143
broccoli broccoli 30
corn corn 419
applesauce applesauce 76
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4826c8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6ded40>)
no calories detected for food word
corn corn 419
corn corn 419
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6deb90>)
no calories detected for food word
corn corn 419
water water 18
corn corn 419
broccoli broccoli 30
broccoli broccoli 30
broccoli broccoli 30
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5a21b8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6deb90>)
no calories detected for food word
fruit salad fruit salad 86
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6de638>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6deb90>)
no calories detected for food word
fruit salad fruit salad 86
applesauce applesauce 76
corn corn 419
corn corn 419
applesauce applesauce 76
broccoli broccoli 30
corn corn 419
butter butter 499
butter butter 499
corn corn 419
ice cream ice cream 265
cream cream 72
pepper pepper 27
salt salt 0
salt salt 0
butter butter 499
butter butter 499
butter butter 499
corn corn 419
corn corn 419
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6c34d0>)
no calories detected for food word
potato salad potato salad 143
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6deb90>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6c37a0>)
no calories detected for food word
potato salad potato salad 143
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6deb90>)
no calories detected for food word
broccoli broccoli 30
applesauce applesauce 76
pork pork 541
water water 18
applesauce applesauce 76
loading solution set
calculating
set([(1324, (8, 18)), (1218, (18, 24)), (706, (20, 28)), (1534, (32, 42)), (966, (20, 26)), (823, (27, 37)), (523, (27, 37)), (335, (13, 21)), (1334, (6, 16)), (765, (40, 51)), (1203, (6, 10)), (772, (19, 30)), (1508, (18, 23)), (425, (19, 27)), (627, (26, 30)), (691, (24, 39)), (740, (38, 49)), (586, (20, 29)), (783, (21, 25)), (425, (81, 96)), (721, (6, 15)), (1228, (61, 65)), (984, (28, 43)), (700, (19, 27)), (1337, (16, 26)), (759, (21, 32)), (798, (21, 36)), (1074, (43, 52)), (442, (11, 26)), (709, (6, 14)), (527, (32, 41)), (384, (26, 34)), (734, (7, 18)), (359, (25, 34)), (573, (31, 46)), (563, (22, 37)), (969, (17, 23)), (943, (22, 26)), (724, (6, 15)), (836, (16, 24)), (1030, (26, 35)), (1206, (25, 29)), (1311, (11, 23)), (679, (6, 11)), (350, (16, 25)), (1203, (15, 21)), (703, (11, 19)), (257, (6, 12)), (1314, (13, 25)), (329, (29, 37)), (1040, (19, 30)), (1215, (18, 24)), (1499, (10, 19)), (425, (45, 57)), (1149, (6, 13)), (753, (24, 34)), (1525, (14, 22)), (1318, (10, 18)), (1561, (38, 48)), (547, (15, 24)), (1233, (29, 33)), (1209, (20, 26))])
[((257, (6, 12)), '*MOT:\tbutter .\n'), ((329, (29, 37)), '*MOT:\t<do you want> [<] some broccoli ?\n'), ((335, (13, 21)), '*BR3:\tI hate broccoli .\n'), ((350, (16, 25)), '*BR2:\t<any more porkchops> [<] ?\n'), ((359, (25, 34)), '*BR2:\tMom I only got one pork chop .\n'), ((384, (26, 34)), '*MOT:\tdo you want another porkchop ?\n'), ((425, (19, 27)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (45, 57)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (81, 96)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((442, (11, 26)), '*BR2:\t<xxx corn on the cob> [<] ?\n'), ((523, (27, 37)), '*CHI:\tcan I have some more applesauce [>] ?\n'), ((527, (32, 41)), '*MOT:\t<did Heather eat> [<] her porkchops ?\n'), ((547, (15, 24)), '*MOT:\tyou like porkchops ?\n'), ((563, (22, 37)), '*MOT:\toh you want the corn on the cob .\n'), ((573, (31, 46)), "*MOT:\tyou're too little to eat corn on the cob Heather .\n"), ((586, (20, 29)), '*MOT:\tshe wants the porkchops .\n'), ((627, (26, 30)), '*BR2:\tnobody [<] takes my corn Heather .\n'), ((679, (6, 11)), '*BR2:\twater Mommy .\n'), ((691, (24, 39)), '*BR1:\tis there any more corn on the cob ?\n'), ((700, (19, 27)), "*MOT:\tthere's more broccoli .\n"), ((703, (11, 19)), '*MOT:\t<eat broccoli> [>] .\n'), ((706, (20, 28)), "*BR1:\t<I don't want broccoli> [<] .\n"), ((709, (6, 14)), "*MOT:\tbroccoli's good for you .\n"), ((721, (6, 15)), '*MOT:\thoney+dew .\n'), ((724, (6, 15)), '*BR2:\thoney+dew [>] ?\n'), ((734, (7, 18)), '*BR1:\t<fruit salad> [<] ?\n'), ((740, (38, 49)), "*MOT:\tI don't have enough stuff for a fruit salad .\n"), ((753, (24, 34)), '*CHI:\t<I want> [<] more applesauce .\n'), ((759, (21, 32)), '*BR2:\twhat about the Fudgesicles [>] ?\n'), ((765, (40, 51)), '*BR2:\t<you said> [<] we were gonna have Fudgesicles .\n'), ((772, (19, 30)), '*MOT:\tyou can have Fudgesicles too .\n'), ((783, (21, 25)), '*MOT:\t<I have> [<] a corn for you <if you want> [>] .\n'), ((798, (21, 36)), "*MOT:\tyou don't want corn on the cob ?\n"), ((823, (27, 37)), '*CHI:\tcan I have some more applesauce .\n'), ((836, (16, 24)), '*CHI:\tI ate <my broccoli> [>] .\n'), ((943, (22, 26)), '*BR3:\tcan I have some corn ?\n'), ((966, (20, 26)), '*MOT:\tgi(ve) me the butter please .\n'), ((969, (17, 23)), '*CHI:\tI need the butter !\n'), ((984, (28, 43)), "*MOT:\tthere's only one more corn on the cob and three of you guys .\n"), ((1030, (26, 35)), '*BR1:\twhat about (.) &-um honey+dew ?\n'), ((1040, (19, 30)), '*MOT:\tyou have the Fudgesicles .\n'), ((1074, (43, 52)), '*BR1:\tmom <can I have> [/] can I have <the ice cream now> [>] .\n'), ((1149, (6, 13)), '*BR2:\tketchup .\n'), ((1203, (6, 10)), '*BR2:\tsalt and pepper Mom .\n'), ((1203, (15, 21)), '*BR2:\tsalt and pepper Mom .\n'), ((1206, (25, 29)), '*MOT:\tFreddy give me the salt please .\n'), ((1209, (20, 26)), '*CHI:\tMa I need the butter !\n'), ((1215, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1218, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1228, (61, 65)), "*MOT:\tyou're not gon(t)a [: going to] be able to finish this corn .\n"), ((1233, (29, 33)), "*MOT:\twhy don't we save this corn for you for later ?\n"), ((1311, (11, 23)), '*MOT:\thave potato salad .\n'), ((1314, (13, 25)), '*BR1:\tI hate potato salad .\n'), ((1318, (10, 18)), '*MOT:\txxx broccoli .\n'), ((1324, (8, 18)), '*BR2:\ta Fudgesicle !\n'), ((1334, (6, 16)), '*CHI:\tFudgesicle !\n'), ((1337, (16, 26)), '*MOT:\thave more applesauce .\n'), ((1499, (10, 19)), '*MOT:\tone pork chop .\n'), ((1508, (18, 23)), '*CHI:\tI want some water [>] !\n'), ((1525, (14, 22)), '*BR1:\txxx the popsicle .\n'), ((1534, (32, 42)), '*CHI:\tI want some more &-um (.) applesauce .\n'), ((1561, (38, 48)), "*BR2:\tyou're gonna get dirty with the Fudgesicle anyway (.) .\n")]
set([(706, (20, 28)), (1534, (32, 42)), (691, (24, 28)), (966, (20, 26)), (823, (27, 37)), (523, (27, 37)), (335, (13, 21)), (573, (31, 35)), (329, (29, 37)), (1203, (6, 10)), (442, (11, 15)), (1508, (18, 23)), (425, (19, 27)), (627, (26, 30)), (1218, (18, 24)), (740, (38, 49)), (586, (20, 29)), (1499, (10, 14)), (783, (21, 25)), (1228, (61, 65)), (984, (28, 32)), (700, (19, 27)), (1337, (16, 26)), (563, (22, 26)), (527, (32, 41)), (384, (26, 34)), (734, (7, 18)), (836, (16, 24)), (969, (17, 23)), (943, (22, 26)), (1209, (20, 26)), (1206, (25, 29)), (1311, (11, 23)), (679, (6, 11)), (350, (16, 25)), (1203, (15, 21)), (798, (21, 25)), (703, (11, 19)), (257, (6, 12)), (1314, (13, 25)), (359, (25, 29)), (1318, (10, 18)), (1215, (18, 24)), (425, (45, 57)), (1074, (43, 52)), (753, (24, 34)), (425, (81, 85)), (547, (15, 24)), (1233, (29, 33))])
[((257, (6, 12)), '*MOT:\tbutter .\n'), ((329, (29, 37)), '*MOT:\t<do you want> [<] some broccoli ?\n'), ((335, (13, 21)), '*BR3:\tI hate broccoli .\n'), ((350, (16, 25)), '*BR2:\t<any more porkchops> [<] ?\n'), ((359, (25, 29)), '*BR2:\tMom I only got one pork chop .\n'), ((384, (26, 34)), '*MOT:\tdo you want another porkchop ?\n'), ((425, (19, 27)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (45, 57)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((425, (81, 85)), "*MOT:\tthere's more broccoli (.) there's more potato salad <and there is &-uh (.) corn on the cob> [>] .\n"), ((442, (11, 15)), '*BR2:\t<xxx corn on the cob> [<] ?\n'), ((523, (27, 37)), '*CHI:\tcan I have some more applesauce [>] ?\n'), ((527, (32, 41)), '*MOT:\t<did Heather eat> [<] her porkchops ?\n'), ((547, (15, 24)), '*MOT:\tyou like porkchops ?\n'), ((563, (22, 26)), '*MOT:\toh you want the corn on the cob .\n'), ((573, (31, 35)), "*MOT:\tyou're too little to eat corn on the cob Heather .\n"), ((586, (20, 29)), '*MOT:\tshe wants the porkchops .\n'), ((627, (26, 30)), '*BR2:\tnobody [<] takes my corn Heather .\n'), ((679, (6, 11)), '*BR2:\twater Mommy .\n'), ((691, (24, 28)), '*BR1:\tis there any more corn on the cob ?\n'), ((700, (19, 27)), "*MOT:\tthere's more broccoli .\n"), ((703, (11, 19)), '*MOT:\t<eat broccoli> [>] .\n'), ((706, (20, 28)), "*BR1:\t<I don't want broccoli> [<] .\n"), ((734, (7, 18)), '*BR1:\t<fruit salad> [<] ?\n'), ((740, (38, 49)), "*MOT:\tI don't have enough stuff for a fruit salad .\n"), ((753, (24, 34)), '*CHI:\t<I want> [<] more applesauce .\n'), ((783, (21, 25)), '*MOT:\t<I have> [<] a corn for you <if you want> [>] .\n'), ((798, (21, 25)), "*MOT:\tyou don't want corn on the cob ?\n"), ((823, (27, 37)), '*CHI:\tcan I have some more applesauce .\n'), ((836, (16, 24)), '*CHI:\tI ate <my broccoli> [>] .\n'), ((943, (22, 26)), '*BR3:\tcan I have some corn ?\n'), ((966, (20, 26)), '*MOT:\tgi(ve) me the butter please .\n'), ((969, (17, 23)), '*CHI:\tI need the butter !\n'), ((984, (28, 32)), "*MOT:\tthere's only one more corn on the cob and three of you guys .\n"), ((1074, (43, 52)), '*BR1:\tmom <can I have> [/] can I have <the ice cream now> [>] .\n'), ((1203, (6, 10)), '*BR2:\tsalt and pepper Mom .\n'), ((1203, (15, 21)), '*BR2:\tsalt and pepper Mom .\n'), ((1206, (25, 29)), '*MOT:\tFreddy give me the salt please .\n'), ((1209, (20, 26)), '*CHI:\tMa I need the butter !\n'), ((1215, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1218, (18, 24)), "*MOT:\twhere's the butter ?\n"), ((1228, (61, 65)), "*MOT:\tyou're not gon(t)a [: going to] be able to finish this corn .\n"), ((1233, (29, 33)), "*MOT:\twhy don't we save this corn for you for later ?\n"), ((1311, (11, 23)), '*MOT:\thave potato salad .\n'), ((1314, (13, 25)), '*BR1:\tI hate potato salad .\n'), ((1318, (10, 18)), '*MOT:\txxx broccoli .\n'), ((1337, (16, 26)), '*MOT:\thave more applesauce .\n'), ((1499, (10, 14)), '*MOT:\tone pork chop .\n'), ((1508, (18, 23)), '*CHI:\tI want some water [>] !\n'), ((1534, (32, 42)), '*CHI:\tI want some more &-um (.) applesauce .\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'porkchop', 'porkchops', 'applesauce', 'fruit salad', 'pork chop', 'corn', 'fudgesicle', 'pepper', 'potato salad', 'ketchup', 'water', 'corn on the cob', 'honey+dew', 'fudgesicles', 'salt', 'broccoli', 'ice cream', 'popsicle'])
predicted labels:
set(['butter', 'pork', 'porkchops', 'fruit salad', 'corn', 'porkchop', 'potato salad', 'water', 'applesauce', 'pepper', 'salt', 'broccoli', 'ice cream'])
file:HSLLD/HV1/MT//emimt1.cha
precision: 0.923076923077
recall: 0.631578947368
true positives:['applesauce', 'broccoli', 'butter', 'corn', 'fruit salad', 'ice cream', 'pepper', 'porkchop', 'porkchops', 'potato salad', 'salt', 'water']
false positives: ['pork']
false negatives: ['corn on the cob', 'fudgesicle', 'fudgesicles', 'honey+dew', 'ketchup', 'popsicle', 'pork chop']
# true pos: 12
# false pos: 1
# false neg: 7
HSLLD/HV1/MT//kurmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//kurmt1.cha
HSLLD/HV1/MT//mormt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//mormt1.cha
HSLLD/HV1/MT//aprmt1.cha
loading solution set
corn corn 419
potatoes potatoes 62
potatoes potatoes 62
milk milk 46
water water 18
milk milk 46
potatoes potatoes 62
chicken chicken 234
van's van's 471
ice cream ice cream 265
cream cream 72
ice cream ice cream 265
cream cream 72
honey honey 304
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4a9cb0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f200>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f320>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f1b8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f488>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f5f0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4a9b90>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f6c8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f830>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f560>)
no calories detected for food word
ham ham 141
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f998>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f6c8>)
no calories detected for food word
broccoli broccoli 30
pork pork 541
broccoli broccoli 30
egg egg 357
chicken chicken 234
chicken chicken 234
chicken chicken 234
potatoes potatoes 62
potatoes potatoes 62
potatoes potatoes 62
water water 18
potatoes potatoes 62
water water 18
potatoes potatoes 62
water water 18
potatoes potatoes 62
chicken chicken 234
corn corn 419
corn corn 419
milk milk 46
milk milk 46
honey honey 304
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f49f4d0>)
no calories detected for food word
oats oats 389
honey honey 304
oats oats 389
honey honey 304
chicken chicken 234
fried chicken fried chicken 234
cabbage cabbage 28
potatoes potatoes 62
potatoes potatoes 62
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4a9200>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f83b0e0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f83b2d8>)
no calories detected for food word
loading solution set
calculating
set([(1059, (27, 40)), (1000, (31, 41)), (1031, (6, 26)), (873, (6, 13)), (190, (30, 35)), (598, (27, 38)), (1034, (21, 35)), (270, (19, 26)), (551, (26, 31)), (590, (91, 96)), (876, (6, 10)), (802, (18, 26)), (184, (6, 13)), (163, (13, 20)), (621, (95, 103)), (621, (68, 78)), (267, (23, 31)), (833, (19, 27)), (783, (36, 43)), (1682, (32, 40)), (866, (6, 16)), (583, (26, 30)), (1728, (23, 29)), (790, (25, 32)), (525, (49, 54)), (1677, (38, 46)), (858, (66, 74)), (190, (21, 25)), (190, (13, 20)), (533, (6, 17)), (533, (18, 28)), (571, (64, 73)), (1034, (7, 11)), (70, (21, 25)), (533, (38, 48)), (621, (35, 45)), (443, (15, 24)), (879, (6, 10)), (172, (6, 10)), (536, (34, 43)), (590, (41, 59)), (793, (17, 25)), (548, (28, 33)), (187, (6, 13)), (805, (15, 23)), (99, (28, 36)), (1037, (19, 32)), (433, (103, 112)), (618, (17, 25)), (85, (6, 14)), (830, (35, 43)), (771, (28, 35)), (1634, (34, 43))])
[((70, (21, 25)), '*AUN:\t<you want> [<] corn ?\n'), ((85, (6, 14)), '*MOT:\tpotatoes there .\n'), ((99, (28, 36)), '*COU:\tthank [//] I like (.) potatoes .\n'), ((163, (13, 20)), '*COU:\tI want koolaid [>] .\n'), ((172, (6, 10)), '*CHI:\tmilk [?] .\n'), ((184, (6, 13)), '*CHI:\tkoolaid [>] .\n'), ((187, (6, 13)), '*COU:\tkoolaid [<] .\n'), ((190, (13, 20)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (21, 25)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (30, 35)), '*MOT:\twe got koolaid milk and water .\n'), ((267, (23, 31)), '*AUN:\teat some of your potatoes .\n'), ((270, (19, 26)), '*MOT:\tanybody want chicken ?\n'), ((433, (103, 112)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((443, (15, 24)), '*MOT:\twho want ice cream ?\n'), ((525, (49, 54)), '*MOT:\twhen I go to the store tomorrow and get my sodas .\n'), ((533, (6, 17)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (18, 28)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (38, 48)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((536, (34, 43)), '*MOT:\tand &-um (.) I have my &-uh slim fast .\n'), ((548, (28, 33)), '*AUN:\t<I been living on (.) salad> [<] .\n'), ((551, (26, 31)), "*AUN:\tI've been living on salad for the last week .\n"), ((571, (64, 73)), "*MOT:\t+^ but I'm just gonna try to cut out (.) a meal and drink diet soda .\n"), ((583, (26, 30)), "*MOT:\t+^ I think it's the soda so (.) I'm gonna (.) drink nothin(g) but diet sodas and +...\n"), ((590, (41, 59)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (91, 96)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((598, (27, 38)), '*MOT:\tand I had a &-um (.) diet Sprite for lunch .\n'), ((618, (17, 25)), '*MOT:\tI got some broccoli in there .\n'), ((621, (35, 45)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (68, 78)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (95, 103)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((771, (28, 35)), '*COU:\t<can I have> [<] more chicken ?\n'), ((783, (36, 43)), '*COU:\t<grandma can I have some more chicken> [<] ?\n'), ((790, (25, 32)), '*COU:\tcan have some more chicken ?\n'), ((793, (17, 25)), '*MOT:\twhat about potatoes ?\n'), ((802, (18, 26)), '*AUN:\tshe ate her potatoes .\n'), ((805, (15, 23)), '*MOT:\tyou want potatoes April ?\n'), ((830, (35, 43)), '*MOT:\t+^ that whole big package of potatoes .\n'), ((833, (19, 27)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((858, (66, 74)), '*MOT:\tso it turned out to be (.) <just enough &p> [/] just enough potatoes .\n'), ((866, (6, 16)), '*CHI:\t(po)tatoes .\n'), ((873, (6, 13)), '*CHI:\tchicken ?\n'), ((876, (6, 10)), '*COU:\tcorn [>] .\n'), ((879, (6, 10)), '*CHI:\tcorn [<] .\n'), ((1000, (31, 41)), '*AUN:\tkinda [: kind of] like a milk shake xxx .\n'), ((1031, (6, 26)), '*AUN:\toats and bran cereal ?\n'), ((1034, (7, 11)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (21, 35)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1037, (19, 32)), '*AUN:\tsomethin(g) <nut and honey> [>] ?\n'), ((1059, (27, 40)), '*CHI:\tcan I have some more fried chicken &=whispering .\n'), ((1634, (34, 43)), "*MOT:\tthey're not just to wrap up popsicles with .\n"), ((1677, (38, 46)), '*MOT:\tand eat some more of those good potatoes .\n'), ((1682, (32, 40)), '*MOT:\t+^ eat some more of those potatoes !\n'), ((1728, (23, 29)), '*AUN:\tI got find a new cereal [>] .\n')]
set([(1000, (31, 35)), (571, (64, 68)), (1059, (27, 40)), (1034, (30, 35)), (873, (6, 13)), (190, (30, 35)), (1022, (6, 11)), (621, (68, 72)), (551, (26, 31)), (590, (91, 96)), (876, (6, 10)), (793, (17, 25)), (802, (18, 26)), (1728, (23, 29)), (507, (66, 70)), (621, (95, 103)), (1707, (40, 44)), (825, (24, 29)), (267, (23, 31)), (833, (19, 27)), (783, (36, 43)), (1486, (9, 16)), (1682, (32, 40)), (833, (47, 52)), (1677, (38, 46)), (879, (6, 10)), (590, (47, 59)), (790, (25, 32)), (1034, (21, 25)), (1034, (7, 11)), (500, (24, 29)), (530, (30, 34)), (1037, (27, 32)), (858, (66, 74)), (190, (21, 25)), (270, (19, 26)), (533, (6, 17)), (621, (35, 39)), (70, (21, 25)), (598, (27, 38)), (443, (15, 24)), (172, (6, 10)), (1031, (6, 10)), (533, (33, 37)), (548, (28, 33)), (805, (15, 23)), (997, (28, 32)), (99, (28, 36)), (403, (45, 50)), (1031, (20, 26)), (583, (72, 76)), (433, (103, 112)), (533, (18, 22)), (838, (33, 38)), (618, (17, 25)), (85, (6, 14)), (830, (35, 43)), (709, (18, 21)), (1710, (18, 24)), (771, (28, 35))])
[((70, (21, 25)), '*AUN:\t<you want> [<] corn ?\n'), ((85, (6, 14)), '*MOT:\tpotatoes there .\n'), ((99, (28, 36)), '*COU:\tthank [//] I like (.) potatoes .\n'), ((172, (6, 10)), '*CHI:\tmilk [?] .\n'), ((190, (21, 25)), '*MOT:\twe got koolaid milk and water .\n'), ((190, (30, 35)), '*MOT:\twe got koolaid milk and water .\n'), ((267, (23, 31)), '*AUN:\teat some of your potatoes .\n'), ((270, (19, 26)), '*MOT:\tanybody want chicken ?\n'), ((403, (45, 50)), "*AUN:\tand what's the little girl name on you van's name April ?\n"), ((433, (103, 112)), '*MOT:\t<and maybe if you> [<] sit at the table talk and eat your food or [/] and probably can have some ice cream afterwards .\n'), ((443, (15, 24)), '*MOT:\twho want ice cream ?\n'), ((500, (24, 29)), '*AUN:\tthis is delicious honey got all up on my dress .\n'), ((507, (66, 70)), "*MOT:\twell I'm trying to get back in form again so &-um (.) on my diet today .\n"), ((530, (30, 34)), "*MOT:\tI'm buyin(g) everything diet .\n"), ((533, (6, 17)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (18, 22)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((533, (33, 37)), '*MOT:\tdiet Sprite diet Slice (.) diet ginger+ale .\n'), ((548, (28, 33)), '*AUN:\t<I been living on (.) salad> [<] .\n'), ((551, (26, 31)), "*AUN:\tI've been living on salad for the last week .\n"), ((571, (64, 68)), "*MOT:\t+^ but I'm just gonna try to cut out (.) a meal and drink diet soda .\n"), ((583, (72, 76)), "*MOT:\t+^ I think it's the soda so (.) I'm gonna (.) drink nothin(g) but diet sodas and +...\n"), ((590, (47, 59)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((590, (91, 96)), '*MOT:\tso today I had lunch and took me a spice ham sandwich to eat lunch and then I had an apple .\n'), ((598, (27, 38)), '*MOT:\tand I had a &-um (.) diet Sprite for lunch .\n'), ((618, (17, 25)), '*MOT:\tI got some broccoli in there .\n'), ((621, (35, 39)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (68, 72)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((621, (95, 103)), '*MOT:\tand &-uh (.) xxx and put (.) pork chops to make that (.) baby pork chops and (.) fix the broccoli and I have food tomorrow .\n'), ((709, (18, 21)), '*MOT:\tmy hospital egg crate thing (.) got tore [?] up .\n'), ((771, (28, 35)), '*COU:\t<can I have> [<] more chicken ?\n'), ((783, (36, 43)), '*COU:\t<grandma can I have some more chicken> [<] ?\n'), ((790, (25, 32)), '*COU:\tcan have some more chicken ?\n'), ((793, (17, 25)), '*MOT:\twhat about potatoes ?\n'), ((802, (18, 26)), '*AUN:\tshe ate her potatoes .\n'), ((805, (15, 23)), '*MOT:\tyou want potatoes April ?\n'), ((825, (24, 29)), '*MOT:\t+^ I put all that water in that thing .\n'), ((830, (35, 43)), '*MOT:\t+^ that whole big package of potatoes .\n'), ((833, (19, 27)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((833, (47, 52)), "*MOT:\tand then the potatoes didn't have enough water in there .\n"), ((838, (33, 38)), '*MOT:\t+^ I tried to add (.) more water to it .\n'), ((858, (66, 74)), '*MOT:\tso it turned out to be (.) <just enough &p> [/] just enough potatoes .\n'), ((873, (6, 13)), '*CHI:\tchicken ?\n'), ((876, (6, 10)), '*COU:\tcorn [>] .\n'), ((879, (6, 10)), '*CHI:\tcorn [<] .\n'), ((997, (28, 32)), '*MOT:\t+^ even with the skim milk .\n'), ((1000, (31, 35)), '*AUN:\tkinda [: kind of] like a milk shake xxx .\n'), ((1022, (6, 11)), '*AUN:\thoney I tell you what .\n'), ((1031, (6, 10)), '*AUN:\toats and bran cereal ?\n'), ((1031, (20, 26)), '*AUN:\toats and bran cereal ?\n'), ((1034, (7, 11)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (21, 25)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1034, (30, 35)), '*AUN:\t<oats and> [/] oats and honey ?\n'), ((1037, (27, 32)), '*AUN:\tsomethin(g) <nut and honey> [>] ?\n'), ((1059, (27, 40)), '*CHI:\tcan I have some more fried chicken &=whispering .\n'), ((1486, (9, 16)), '*COU:\tmy cabbage patch do every time she have a &-um bottle and [/] and a pamper .\n'), ((1677, (38, 46)), '*MOT:\tand eat some more of those good potatoes .\n'), ((1682, (32, 40)), '*MOT:\t+^ eat some more of those potatoes !\n'), ((1707, (40, 44)), '*AUN:\txxx is <on a> [/] on a noncooking diet .\n'), ((1710, (18, 24)), '*AUN:\t+^ she eats cereal .\n'), ((1728, (23, 29)), '*AUN:\tI got find a new cereal [>] .\n')]
calculating accuracy and recall
correct labels:
set(['diet soda', 'milk shake', 'apple', 'fried chicken', 'slim fast', 'chicken', 'oats and honey', 'milk', 'ice cream', 'ginger+ale', 'oats and bran cereal', 'popsicles', 'nut and honey', 'diet sprite', 'corn', 'water', 'cereal', '(po)tatoes', 'broccoli', 'koolaid', 'salad', 'oats', 'potatoes', 'sodas', 'spice ham sandwich', 'pork chops', 'soda', 'diet slice'])
predicted labels:
set(["van's", 'honey', 'diet sprite', 'cabbage', 'apple', 'salad', 'oats', 'potatoes', 'corn', 'pork', 'diet', 'broccoli', 'water', 'fried chicken', 'cereal', 'ham sandwich', 'chicken', 'egg', 'milk', 'ice cream'])
file:HSLLD/HV1/MT//aprmt1.cha
precision: 0.65
recall: 0.464285714286
true positives:['apple', 'broccoli', 'cereal', 'chicken', 'corn', 'diet sprite', 'fried chicken', 'ice cream', 'milk', 'oats', 'potatoes', 'salad', 'water']
false positives: ['cabbage', 'diet', 'egg', 'ham sandwich', 'honey', 'pork', "van's"]
false negatives: ['(po)tatoes', 'diet slice', 'diet soda', 'ginger+ale', 'koolaid', 'milk shake', 'nut and honey', 'oats and bran cereal', 'oats and honey', 'popsicles', 'pork chops', 'slim fast', 'soda', 'sodas', 'spice ham sandwich']
# true pos: 13
# false pos: 7
# false neg: 15
HSLLD/HV1/MT//termt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//termt1.cha
HSLLD/HV1/MT//ethmt1.cha
loading solution set
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f45a6c8>)
no calories detected for food word
biscuits biscuits 263
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f44a3f8>)
no calories detected for food word
chocolate chocolate 598
chocolate chocolate 598
chicken chicken 234
chicken chicken 234
chicken chicken 234
chicken chicken 234
biscuits biscuits 263
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f44a638>)
no calories detected for food word
chicken chicken 234
honey honey 304
biscuits biscuits 263
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f46a488>)
no calories detected for food word
chicken chicken 234
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f46a3b0>)
no calories detected for food word
honey honey 304
chicken chicken 234
chicken chicken 234
biscuits biscuits 263
honey honey 304
honey honey 304
cake cake 412
cake cake 412
eggs eggs 131
cake cake 412
eggs eggs 131
honey honey 304
eggs eggs 131
honey honey 304
cake cake 412
cake cake 412
mcdonald's mcdonald's 222
fish fish 305
white fish white fish 119
honey honey 304
chicken chicken 234
honey honey 304
milk milk 46
loading solution set
calculating
set([(317, (10, 17)), (2568, (27, 31)), (2568, (12, 16)), (2716, (6, 14)), (2707, (7, 15)), (2988, (15, 23)), (750, (13, 20)), (168, (6, 15)), (2732, (6, 16)), (150, (32, 37)), (425, (16, 23)), (2349, (58, 63)), (2559, (13, 17)), (2988, (6, 14)), (1504, (55, 63)), (775, (53, 60)), (309, (10, 17)), (584, (32, 40)), (2376, (56, 61)), (2537, (91, 95)), (2637, (30, 34)), (137, (19, 27)), (171, (19, 26)), (2991, (32, 40)), (2559, (23, 27)), (393, (59, 67)), (161, (6, 11)), (3082, (14, 18)), (164, (18, 28)), (2897, (26, 33)), (2654, (27, 31)), (2732, (23, 33)), (1504, (43, 50)), (1504, (25, 33)), (33, (63, 67)), (1092, (30, 35)), (2644, (41, 45)), (1464, (28, 35)), (387, (25, 32)), (164, (32, 41))])
[((33, (63, 67)), '*MOT:\tyou may <wh(ile)> [//] just while I <&s> [//] cut up the meat .\n'), ((137, (19, 27)), '*MOT:\txxx and &-um biscuits .\n'), ((150, (32, 37)), '*FAT:\t&-uh (.) do you want some Quick ?\n'), ((161, (6, 11)), '*CHI:\tQuick .\n'), ((164, (18, 28)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((164, (32, 41)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((168, (6, 15)), '*CHI:\tchocolate .\n'), ((171, (19, 26)), "*MOT:\tso how's the chicken look ?\n"), ((309, (10, 17)), '*CHI:\tthe chicken is too ?\n'), ((317, (10, 17)), '*MOT:\tthe chicken is [//] should be pretty cool .\n'), ((387, (25, 32)), "*FAT:\tI'm afraid the (.) chicken is &-uh (.) not as well cooked as [/] as usual .\n"), ((393, (59, 67)), "*MOT:\twell <it's> [/] it's probably better cooked than the biscuits though .\n"), ((425, (16, 23)), "*FAT:\thow's the chicken Munchkin ?\n"), ((584, (32, 40)), "*FAT:\t<the bi(s)cuits> [//] the biscuits aren't burned .\n"), ((750, (13, 20)), "*MOT:\toh the chicken's xxx .\n"), ((775, (53, 60)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((1092, (30, 35)), '*FAT:\t(a)re you drinking your Quick ?\n'), ((1464, (28, 35)), '*MOT:\twant another piece of chicken ?\n'), ((1504, (25, 33)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (43, 50)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (55, 63)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((2349, (58, 63)), '*FAT:\twell teacher I want you to make sure you drink your Quick and I want you to make sure you finish your dinner .\n'), ((2376, (56, 61)), '*FAT:\they teach make sure you &-uh finish drinking your Quick .\n'), ((2537, (91, 95)), "*MOT:\tI think maybe we should celebrate Brook's birthday today even though we don't have a cake .\n"), ((2559, (13, 17)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2559, (23, 27)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2568, (12, 16)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2568, (27, 31)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2637, (30, 34)), '*CHI:\twell (.) do we have any eggs ?\n'), ((2644, (41, 45)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2654, (27, 31)), "*MOT:\tso Brook doesn't eat cake .\n"), ((2707, (7, 15)), "*CHI:\t<McDonald's> [>] ?\n"), ((2716, (6, 14)), "*CHI:\tMcDonald's ?\n"), ((2732, (6, 16)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2732, (23, 33)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2897, (26, 33)), "*MOT:\tthink that's enough chicken for him ?\n"), ((2988, (6, 14)), '*CHI:\tgum drop gum drop .\n'), ((2988, (15, 23)), '*CHI:\tgum drop gum drop .\n'), ((2991, (32, 40)), '*CHI:\tnot by the hair of my gum gum drop .\n'), ((3082, (14, 18)), '*MOT:\tis your milk finished ?\n')]
set([(317, (10, 17)), (2568, (27, 31)), (2568, (12, 16)), (2644, (6, 11)), (513, (41, 46)), (784, (81, 89)), (168, (6, 15)), (2732, (6, 16)), (1940, (24, 29)), (2861, (11, 16)), (2975, (56, 61)), (425, (16, 23)), (2716, (6, 16)), (2559, (13, 17)), (410, (46, 54)), (1504, (55, 63)), (775, (53, 60)), (309, (10, 17)), (584, (32, 40)), (2537, (91, 95)), (2637, (30, 34)), (1171, (39, 44)), (137, (19, 27)), (171, (19, 26)), (2633, (17, 22)), (2559, (23, 27)), (393, (59, 67)), (3082, (14, 18)), (164, (18, 28)), (2897, (26, 33)), (2654, (27, 31)), (2732, (23, 33)), (1504, (43, 50)), (1504, (25, 33)), (33, (63, 67)), (775, (24, 32)), (2644, (41, 45)), (1943, (29, 34)), (1464, (28, 35)), (387, (25, 32)), (164, (32, 41))])
[((33, (63, 67)), '*MOT:\tyou may <wh(ile)> [//] just while I <&s> [//] cut up the meat .\n'), ((137, (19, 27)), '*MOT:\txxx and &-um biscuits .\n'), ((164, (18, 28)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((164, (32, 41)), '*FAT:\tdo you want strawberry or chocolate ?\n'), ((168, (6, 15)), '*CHI:\tchocolate .\n'), ((171, (19, 26)), "*MOT:\tso how's the chicken look ?\n"), ((309, (10, 17)), '*CHI:\tthe chicken is too ?\n'), ((317, (10, 17)), '*MOT:\tthe chicken is [//] should be pretty cool .\n'), ((387, (25, 32)), "*FAT:\tI'm afraid the (.) chicken is &-uh (.) not as well cooked as [/] as usual .\n"), ((393, (59, 67)), "*MOT:\twell <it's> [/] it's probably better cooked than the biscuits though .\n"), ((410, (46, 54)), '*FAT:\twell I told Nathaniel that going out to barbecue saves more of a symbolic cash than after it was started barbecuing season .\n'), ((425, (16, 23)), "*FAT:\thow's the chicken Munchkin ?\n"), ((513, (41, 46)), '*MOT:\tdo you have_to use the bath+room , Honey ?\n'), ((584, (32, 40)), "*FAT:\t<the bi(s)cuits> [//] the biscuits aren't burned .\n"), ((775, (24, 32)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((775, (53, 60)), "*FAT:\tusually the first barbecue of the year the (.) chicken isn't cooked right it takes a (.) couple times in the warm weather .\n"), ((784, (81, 89)), '*FAT:\tin the warm weather you can still cook it and just stay out there with the barbecue .\n'), ((1171, (39, 44)), '*MOT:\twe gave her her birthday present Honey in August when she had her birthday .\n'), ((1464, (28, 35)), '*MOT:\twant another piece of chicken ?\n'), ((1504, (25, 33)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (43, 50)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1504, (55, 63)), '*MOT:\tI like to wrap the biscuits and have chicken and biscuits .\n'), ((1940, (24, 29)), '*CHI:\tI learned it from Honey [?] .\n'), ((1943, (29, 34)), '*MOT:\tthat was a nice one of Honey .\n'), ((2537, (91, 95)), "*MOT:\tI think maybe we should celebrate Brook's birthday today even though we don't have a cake .\n"), ((2559, (13, 17)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2559, (23, 27)), '*CHI:\tmake a cake with eggs [>] .\n'), ((2568, (12, 16)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2568, (27, 31)), '*CHI:\tneed <eggs to make a cake> [>] .\n'), ((2633, (17, 22)), '*MOT:\twhat is it Honey ?\n'), ((2637, (30, 34)), '*CHI:\twell (.) do we have any eggs ?\n'), ((2644, (6, 11)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2644, (41, 45)), "*MOT:\tHoney we don't have time to make a cake tonight .\n"), ((2654, (27, 31)), "*MOT:\tso Brook doesn't eat cake .\n"), ((2716, (6, 16)), "*CHI:\tMcDonald's ?\n"), ((2732, (6, 16)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2732, (23, 33)), '*MOT:\tWhite fish ocean white fish flavor .\n'), ((2861, (11, 16)), '*MOT:\twhat Honey ?\n'), ((2897, (26, 33)), "*MOT:\tthink that's enough chicken for him ?\n"), ((2975, (56, 61)), '*FAT:\tand could you sit [///] put your fishing rod down Honey .\n'), ((3082, (14, 18)), '*MOT:\tis your milk finished ?\n')]
calculating accuracy and recall
correct labels:
set(['meat', 'mcdonald', 'gum drop', 'eggs', 'chocolate', 'strawberry', 'cake', 'quick', 'chicken', 'biscuits', 'milk', 'white fish'])
predicted labels:
set(['meat', 'eggs', "mcdonald's", 'chocolate', 'honey', 'strawberry', 'white fish', 'cake', 'barbecue', 'chicken', 'biscuits', 'milk'])
file:HSLLD/HV1/MT//ethmt1.cha
precision: 0.75
recall: 0.75
true positives:['biscuits', 'cake', 'chicken', 'chocolate', 'eggs', 'meat', 'milk', 'strawberry', 'white fish']
false positives: ['barbecue', 'honey', "mcdonald's"]
false negatives: ['gum drop', 'mcdonald', 'quick']
# true pos: 9
# false pos: 3
# false neg: 3
HSLLD/HV1/MT//casmt1.cha
loading solution set
milk milk 46
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6f05a8>)
no calories detected for food word
milk milk 46
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bc050>)
no calories detected for food word
popcorn popcorn 429
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bc5a8>)
no calories detected for food word
popcorn popcorn 429
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bc7a0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bcab8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bcd88>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bce60>)
no calories detected for food word
sugar sugar 399
water water 18
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bc488>)
no calories detected for food word
tomatoes tomatoes 213
potatoes potatoes 62
tomatoes tomatoes 213
honey honey 304
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4af560>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bc488>)
no calories detected for food word
tomatoes tomatoes 213
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4af758>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4af830>)
no calories detected for food word
croutons croutons 465
croutons croutons 465
vegetables vegetables 37
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4afe18>)
no calories detected for food word
doughnuts doughnuts 403
corn corn 419
croutons croutons 465
corn corn 419
croutons croutons 465
croutons croutons 465
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6f06c8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4afdd0>)
no calories detected for food word
corn corn 419
crackers crackers 453
duck duck 84
crackers crackers 453
crackers crackers 453
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bc950>)
no calories detected for food word
loading solution set
calculating
set([(641, (33, 41)), (446, (20, 26)), (697, (14, 18)), (176, (37, 42)), (17, (25, 29)), (26, (10, 15)), (73, (10, 17)), (52, (12, 19)), (428, (6, 18)), (689, (46, 51)), (654, (6, 14)), (17, (52, 56)), (354, (6, 14)), (119, (13, 25)), (125, (21, 26)), (440, (6, 14)), (17, (39, 44)), (377, (21, 26)), (437, (6, 14)), (481, (71, 80)), (647, (30, 34)), (52, (24, 36)), (343, (31, 39)), (407, (54, 62)), (364, (32, 40)), (443, (18, 28)), (819, (35, 40)), (677, (36, 44)), (26, (23, 27)), (392, (53, 59)), (819, (49, 54)), (481, (23, 32)), (593, (15, 19))])
[((17, (25, 29)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (39, 44)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (52, 56)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((26, (10, 15)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((26, (23, 27)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((52, (12, 19)), '*BRI:\tI got popcorn and cotton candy .\n'), ((52, (24, 36)), '*BRI:\tI got popcorn and cotton candy .\n'), ((73, (10, 17)), '*BRI:\tthe popcorn was a dollar .\n'), ((119, (13, 25)), '*CHI:\tI love cotton candy .\n'), ((125, (21, 26)), "*MOT:\t<it's> [<] all sugar it's not good for you .\n"), ((176, (37, 42)), "*BRI:\tthe stuff didn't come out like water .\n"), ((343, (31, 39)), "*CHI:\t<hey where's> [<] my xxx tomatoes ?\n"), ((354, (6, 14)), '*CHI:\tpotatoes [>] ?\n'), ((364, (32, 40)), "*MOT:\tno Casey there wasn't any tomatoes left .\n"), ((377, (21, 26)), '*MOT:\tthere was none honey for <the salad> [>] .\n'), ((392, (53, 59)), "*MOT:\tI'll go shopping tomorrow and I'll get you one tomato okay ?\n"), ((407, (54, 62)), "*MOT:\tI know that's one of your favorites right Casey tomatoes ?\n"), ((428, (6, 18)), '*MOT:\tfrench fries .\n'), ((437, (6, 14)), '*BRI:\tcroutons [?] .\n'), ((440, (6, 14)), '*MOT:\tcroutons .\n'), ((443, (18, 28)), "*MOT:\tthey're not vegetables .\n"), ((446, (20, 26)), '*MOT:\tthey go on in salads then .\n'), ((481, (23, 32)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((481, (71, 80)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((593, (15, 19)), '*FAT:\teat your corn Brian .\n'), ((641, (33, 41)), "*FAT:\tyou're going to get in the croutons Brian .\n"), ((647, (30, 34)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((654, (6, 14)), '*FAT:\tcroutons .\n'), ((677, (36, 44)), '*CHI:\t<Brian> [<] will you give the croutons to me ?\n'), ((689, (46, 51)), "*FAT:\tyou know a whole bunch there that's the salad .\n"), ((697, (14, 18)), '*FAT:\teat the corn .\n'), ((819, (35, 40)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n'), ((819, (49, 54)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n')]
set([(641, (33, 41)), (446, (20, 26)), (697, (14, 18)), (176, (37, 42)), (109, (24, 29)), (17, (25, 29)), (727, (39, 47)), (727, (63, 71)), (52, (31, 36)), (26, (10, 15)), (103, (39, 44)), (52, (12, 19)), (689, (46, 51)), (654, (6, 14)), (17, (52, 56)), (354, (6, 14)), (73, (10, 17)), (751, (23, 27)), (481, (23, 32)), (647, (11, 15)), (775, (16, 24)), (79, (21, 26)), (125, (21, 26)), (26, (23, 27)), (17, (39, 44)), (377, (21, 26)), (270, (21, 26)), (431, (11, 16)), (437, (6, 14)), (593, (15, 19)), (647, (30, 34)), (685, (32, 37)), (407, (54, 62)), (119, (20, 25)), (343, (31, 39)), (377, (36, 41)), (364, (32, 40)), (443, (18, 28)), (819, (99, 104)), (819, (49, 54)), (677, (36, 44)), (819, (35, 40)), (440, (6, 14)), (392, (53, 59)), (434, (8, 17)), (770, (48, 56)), (481, (71, 80)), (775, (38, 46))])
[((17, (25, 29)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (39, 44)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((17, (52, 56)), '*CHI:\txxx when they need milk they mix Pepsi in the milk .\n'), ((26, (10, 15)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((26, (23, 27)), '*CHI:\txxx Pepsi in the milk get it ?\n'), ((52, (12, 19)), '*BRI:\tI got popcorn and cotton candy .\n'), ((52, (31, 36)), '*BRI:\tI got popcorn and cotton candy .\n'), ((73, (10, 17)), '*BRI:\tthe popcorn was a dollar .\n'), ((79, (21, 26)), '*BRI:\tand the cotton candy was a dollar .\n'), ((103, (39, 44)), "*MOT:\tyou think you'd be with all that candy .\n"), ((109, (24, 29)), '*CHI:\tI love [!] cotton candy when I go to the circus with the xxx act and everything .\n'), ((119, (20, 25)), '*CHI:\tI love cotton candy .\n'), ((125, (21, 26)), "*MOT:\t<it's> [<] all sugar it's not good for you .\n"), ((176, (37, 42)), "*BRI:\tthe stuff didn't come out like water .\n"), ((270, (21, 26)), '*FAT:\txxx at [?] the apple circus Brian .\n'), ((343, (31, 39)), "*CHI:\t<hey where's> [<] my xxx tomatoes ?\n"), ((354, (6, 14)), '*CHI:\tpotatoes [>] ?\n'), ((364, (32, 40)), "*MOT:\tno Casey there wasn't any tomatoes left .\n"), ((377, (21, 26)), '*MOT:\tthere was none honey for <the salad> [>] .\n'), ((377, (36, 41)), '*MOT:\tthere was none honey for <the salad> [>] .\n'), ((392, (53, 59)), "*MOT:\tI'll go shopping tomorrow and I'll get you one tomato okay ?\n"), ((407, (54, 62)), "*MOT:\tI know that's one of your favorites right Casey tomatoes ?\n"), ((431, (11, 16)), '*MOT:\tin a salad ?\n'), ((434, (8, 17)), '*MOT:\ta vegetable ?\n'), ((437, (6, 14)), '*BRI:\tcroutons [?] .\n'), ((440, (6, 14)), '*MOT:\tcroutons .\n'), ((443, (18, 28)), "*MOT:\tthey're not vegetables .\n"), ((446, (20, 26)), '*MOT:\tthey go on in salads then .\n'), ((481, (23, 32)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((481, (71, 80)), '*CHI:\tit was just like doughnuts like except the xxx really taste like doughnuts they were xxx <they was> [//] [>] and the light was in it [?] .\n'), ((593, (15, 19)), '*FAT:\teat your corn Brian .\n'), ((641, (33, 41)), "*FAT:\tyou're going to get in the croutons Brian .\n"), ((647, (11, 15)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((647, (30, 34)), '*MOT:\t<the corn> [<] eat your corn .\n'), ((654, (6, 14)), '*FAT:\tcroutons .\n'), ((677, (36, 44)), '*CHI:\t<Brian> [<] will you give the croutons to me ?\n'), ((685, (32, 37)), "*MOT:\tyou're the one who wanted salad .\n"), ((689, (46, 51)), "*FAT:\tyou know a whole bunch there that's the salad .\n"), ((697, (14, 18)), '*FAT:\teat the corn .\n'), ((727, (39, 47)), '*CHI:\t<the fire> [<][>] [//] <the fire crackers> [//] the fire crackers were [/] .\n'), ((727, (63, 71)), '*CHI:\t<the fire> [<][>] [//] <the fire crackers> [//] the fire crackers were [/] .\n'), ((751, (23, 27)), "*FAT:\tI didn't have_to duck to follow rockets [?] like you guys .\n"), ((770, (48, 56)), '*FAT:\t<when you see> [/] <when you see two fire crackers [?]> [>] come out of these kids hands [?] +...\n'), ((775, (16, 24)), '*CHI:\t<the fire crackers> [<] the firecrackers were going all over the place <they were firing> [/] they were firing <in the grass> [>] .\n'), ((775, (38, 46)), '*CHI:\t<the fire crackers> [<] the firecrackers were going all over the place <they were firing> [/] they were firing <in the grass> [>] .\n'), ((819, (35, 40)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n'), ((819, (49, 54)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n'), ((819, (99, 104)), '*CHI:\tI guess he was drinking some beers and two beers and he scratched him on his face [?] <three beers> [>] .\n')]
calculating accuracy and recall
correct labels:
set(['tomato', 'honey', 'salad', 'corn', 'potatoes', 'cotton candy', 'vegetables', 'doughnuts', 'french fries', 'sugar', 'water', 'croutons', 'beers', 'pepsi', 'popcorn', 'salads', 'milk', 'tomatoes'])
predicted labels:
set(['tomato', 'honey', 'croutons', 'apple', 'salad', 'corn', 'potatoes', 'vegetables', 'doughnuts', 'candy', 'sugar', 'water', 'vegetable', 'beers', 'pepsi', 'duck', 'popcorn', 'crackers', 'salads', 'milk', 'tomatoes'])
file:HSLLD/HV1/MT//casmt1.cha
precision: 0.761904761905
recall: 0.888888888889
true positives:['beers', 'corn', 'croutons', 'doughnuts', 'honey', 'milk', 'pepsi', 'popcorn', 'potatoes', 'salad', 'salads', 'sugar', 'tomato', 'tomatoes', 'vegetables', 'water']
false positives: ['apple', 'candy', 'crackers', 'duck', 'vegetable']
false negatives: ['cotton candy', 'french fries']
# true pos: 16
# false pos: 5
# false neg: 2
HSLLD/HV1/MT//gilmt1.cha
loading solution set
tea tea 2
tea tea 2
loading solution set
calculating
set([(121, (36, 39)), (90, (29, 32))])
[((90, (29, 32)), '*MOT:\twhat about having some tea ?\n'), ((121, (36, 39)), "*MOT:\tshe's always servin(g) me [!] tea (.) .\n")]
set([(121, (36, 39)), (90, (29, 32))])
[((90, (29, 32)), '*MOT:\twhat about having some tea ?\n'), ((121, (36, 39)), "*MOT:\tshe's always servin(g) me [!] tea (.) .\n")]
calculating accuracy and recall
correct labels:
set(['tea'])
predicted labels:
set(['tea'])
file:HSLLD/HV1/MT//gilmt1.cha
precision: 1.0
recall: 1.0
true positives:['tea']
false positives: []
false negatives: []
# true pos: 1
# false pos: 0
# false neg: 0
HSLLD/HV1/MT//alimt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//alimt1.cha
HSLLD/HV1/MT//paumt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//paumt1.cha
HSLLD/HV1/MT//melmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//melmt1.cha
HSLLD/HV1/MT//diamt1.cha
loading solution set
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f676b00>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f676f80>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f67c098>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f67c4d0>)
no calories detected for food word
mustard mustard 60
corn corn 419
macaroni macaroni 128
pizza pizza 274
pizza pizza 274
water water 18
soup soup 72
soup soup 72
bread bread 186
milk milk 46
honey honey 304
ice cream cone ice cream cone 354
ice cream ice cream 265
cream cream 72
ice cream cone ice cream cone 354
ice cream ice cream 265
cream cream 72
corn corn 419
corn corn 419
corn corn 419
seeds seeds 592
seeds seeds 592
seeds seeds 592
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f676488>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6aa6c8>)
no calories detected for food word
chicken chicken 234
chicken chicken 234
chicken chicken 234
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f698128>)
no calories detected for food word
ice cream cone ice cream cone 354
ice cream ice cream 265
cream cream 72
ice cream cone ice cream cone 354
ice cream ice cream 265
cream cream 72
ice cream cone ice cream cone 354
ice cream ice cream 265
cream cream 72
ice cream cone ice cream cone 354
ice cream ice cream 265
cream cream 72
ice cream cone ice cream cone 354
ice cream ice cream 265
cream cream 72
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f67cf38>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6985a8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f67cdd0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f698710>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6988c0>)
no calories detected for food word
milk milk 46
juice juice 52
loading solution set
calculating
set([(1355, (15, 23)), (1358, (8, 16)), (212, (6, 14)), (692, (29, 34)), (802, (41, 45)), (749, (6, 20)), (232, (6, 11)), (1281, (6, 15)), (771, (6, 21)), (1248, (6, 15)), (746, (6, 14)), (662, (35, 39)), (1284, (6, 15)), (1194, (6, 20)), (700, (6, 10)), (1342, (32, 36)), (930, (50, 54)), (1237, (33, 42)), (753, (6, 20)), (1218, (22, 36)), (935, (16, 23)), (668, (6, 10)), (685, (15, 24)), (1212, (20, 34)), (241, (6, 11)), (1191, (15, 29)), (941, (30, 35)), (927, (11, 15)), (659, (80, 84)), (36, (11, 20)), (1273, (6, 15)), (32, (6, 15)), (1351, (36, 41)), (67, (23, 30)), (938, (6, 13)), (199, (10, 14)), (29, (10, 19)), (941, (17, 24)), (1207, (27, 41)), (811, (63, 67))])
[((29, (10, 19)), '*CHI:\txxx cucumbers .\n'), ((32, (6, 15)), '*MOT:\tcucumbers and what else (.) ?\n'), ((36, (11, 20)), '*CHI:\t&-um cucumbers .\n'), ((67, (23, 30)), '*FAT:\txxx xxx get some mustard come on .\n'), ((199, (10, 14)), '*CHI:\tthe corn [?] .\n'), ((212, (6, 14)), '*CHI:\tmacaroni [!] .\n'), ((232, (6, 11)), '*SIB:\tpizza ?\n'), ((241, (6, 11)), '*CHI:\tpizza .\n'), ((659, (80, 84)), '*CHI:\t<I think> [//] (.) <I> [/] <I> [//] <I had> [//] <I> [//] I had a bowl of soup .\n'), ((662, (35, 39)), "*MOT:\tno you didn't have a bowl of soup you had what ?\n"), ((668, (6, 10)), '*MOT:\ttuna ?\n'), ((685, (15, 24)), '*CHI:\t&-um (.) tuna+fish .\n'), ((692, (29, 34)), '*AUN:\tdid you have it in the bread ?\n'), ((700, (6, 10)), '*AUN:\tmilk [?] ?\n'), ((746, (6, 14)), '*CHI:\tice cone .\n'), ((749, (6, 20)), '*MOT:\tice cream cone .\n'), ((753, (6, 20)), '*CHI:\tice cream cone !\n'), ((771, (6, 21)), '*AUN:\tcorn on the cob .\n'), ((802, (41, 45)), '*MOT:\tno the farm is where they grow the corn .\n'), ((811, (63, 67)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((927, (11, 15)), '*CHI:\tmore meat .\n'), ((930, (50, 54)), "*MOT:\tyou eat some of that and I'll give you more meat Donna [?] .\n"), ((935, (16, 23)), '*CHI:\tsome more chicken .\n'), ((938, (6, 13)), '*CHI:\tchicken .\n'), ((941, (17, 24)), "*MOT:\tthat's not chicken it's steak .\n"), ((941, (30, 35)), "*MOT:\tthat's not chicken it's steak .\n"), ((1191, (15, 29)), '*CHI:\t&-um (.) ice cream cone .\n'), ((1194, (6, 20)), '*MOT:\tice cream cone ?\n'), ((1207, (27, 41)), "*CHI:\tbut I don't want any ice cream cone now .\n"), ((1212, (20, 34)), '*CHI:\tbut I want an ice cream cone .\n'), ((1218, (22, 36)), '*CHI:\tMommy I want an ice cream cone tomorrow .\n'), ((1237, (33, 42)), '*MOT:\tyou [/] you want some more cucumbers ?\n'), ((1248, (6, 15)), '*CHI:\tcucumbers (.) .\n'), ((1273, (6, 15)), '*SIB:\tcucumbers Chi .\n'), ((1281, (6, 15)), '*CHI:\tcucumbers .\n'), ((1284, (6, 15)), '*MOT:\tcucumbers ?\n'), ((1342, (32, 36)), '*MOT:\twould you like a glass of milk now ?\n'), ((1351, (36, 41)), '*MOT:\thow about a glass of &-uh (.) juice ?\n'), ((1355, (15, 23)), '*CHI:\tI want a popsicle .\n'), ((1358, (8, 16)), '*MOT:\ta popsicle ?\n')]
set([(811, (35, 40)), (212, (6, 14)), (692, (29, 34)), (802, (41, 45)), (749, (6, 20)), (232, (6, 11)), (1281, (6, 15)), (1237, (33, 42)), (1248, (6, 15)), (662, (35, 39)), (1284, (6, 15)), (700, (6, 10)), (1342, (32, 36)), (930, (50, 54)), (826, (10, 15)), (753, (6, 20)), (1218, (22, 36)), (935, (16, 23)), (1194, (6, 20)), (1207, (27, 41)), (304, (6, 11)), (1212, (20, 34)), (241, (6, 11)), (1191, (15, 29)), (941, (30, 35)), (927, (11, 15)), (659, (80, 84)), (36, (11, 20)), (1273, (6, 15)), (32, (6, 15)), (1351, (36, 41)), (67, (23, 30)), (938, (6, 13)), (199, (10, 14)), (720, (6, 11)), (771, (6, 10)), (29, (10, 19)), (941, (17, 24)), (818, (14, 19)), (811, (63, 67)), (55, (11, 15))])
[((29, (10, 19)), '*CHI:\txxx cucumbers .\n'), ((32, (6, 15)), '*MOT:\tcucumbers and what else (.) ?\n'), ((36, (11, 20)), '*CHI:\t&-um cucumbers .\n'), ((55, (11, 15)), '*MOT:\tyeah meat ?\n'), ((67, (23, 30)), '*FAT:\txxx xxx get some mustard come on .\n'), ((199, (10, 14)), '*CHI:\tthe corn [?] .\n'), ((212, (6, 14)), '*CHI:\tmacaroni [!] .\n'), ((232, (6, 11)), '*SIB:\tpizza ?\n'), ((241, (6, 11)), '*CHI:\tpizza .\n'), ((304, (6, 11)), '*MOT:\twater wings (.) ?\n'), ((659, (80, 84)), '*CHI:\t<I think> [//] (.) <I> [/] <I> [//] <I had> [//] <I> [//] I had a bowl of soup .\n'), ((662, (35, 39)), "*MOT:\tno you didn't have a bowl of soup you had what ?\n"), ((692, (29, 34)), '*AUN:\tdid you have it in the bread ?\n'), ((700, (6, 10)), '*AUN:\tmilk [?] ?\n'), ((720, (6, 11)), '*FAT:\thoney [?] ?\n'), ((749, (6, 20)), '*MOT:\tice cream cone .\n'), ((753, (6, 20)), '*CHI:\tice cream cone !\n'), ((771, (6, 10)), '*AUN:\tcorn on the cob .\n'), ((802, (41, 45)), '*MOT:\tno the farm is where they grow the corn .\n'), ((811, (35, 40)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((811, (63, 67)), '*MOT:\tbecause they put it [//] the seeds in the ground and the corn comes up (.) .\n'), ((818, (14, 19)), '*CHI:\tbut how seeds come up ?\n'), ((826, (10, 15)), '*CHI:\thow seeds come up ?\n'), ((927, (11, 15)), '*CHI:\tmore meat .\n'), ((930, (50, 54)), "*MOT:\tyou eat some of that and I'll give you more meat Donna [?] .\n"), ((935, (16, 23)), '*CHI:\tsome more chicken .\n'), ((938, (6, 13)), '*CHI:\tchicken .\n'), ((941, (17, 24)), "*MOT:\tthat's not chicken it's steak .\n"), ((941, (30, 35)), "*MOT:\tthat's not chicken it's steak .\n"), ((1191, (15, 29)), '*CHI:\t&-um (.) ice cream cone .\n'), ((1194, (6, 20)), '*MOT:\tice cream cone ?\n'), ((1207, (27, 41)), "*CHI:\tbut I don't want any ice cream cone now .\n"), ((1212, (20, 34)), '*CHI:\tbut I want an ice cream cone .\n'), ((1218, (22, 36)), '*CHI:\tMommy I want an ice cream cone tomorrow .\n'), ((1237, (33, 42)), '*MOT:\tyou [/] you want some more cucumbers ?\n'), ((1248, (6, 15)), '*CHI:\tcucumbers (.) .\n'), ((1273, (6, 15)), '*SIB:\tcucumbers Chi .\n'), ((1281, (6, 15)), '*CHI:\tcucumbers .\n'), ((1284, (6, 15)), '*MOT:\tcucumbers ?\n'), ((1342, (32, 36)), '*MOT:\twould you like a glass of milk now ?\n'), ((1351, (36, 41)), '*MOT:\thow about a glass of &-uh (.) juice ?\n')]
calculating accuracy and recall
correct labels:
set(['steak', 'mustard', 'ice cream cone', 'juice', 'corn', 'popsicle', 'cucumbers', 'meat', 'soup', 'tuna+fish', 'corn on the cob', 'macaroni', 'ice cone', 'chicken', 'tuna', 'bread', 'milk', 'pizza'])
predicted labels:
set(['honey', 'steak', 'meat', 'ice cream cone', 'juice', 'corn', 'cucumbers', 'water', 'soup', 'chicken', 'seeds', 'macaroni', 'mustard', 'bread', 'milk', 'pizza'])
file:HSLLD/HV1/MT//diamt1.cha
precision: 0.8125
recall: 0.722222222222
true positives:['bread', 'chicken', 'corn', 'cucumbers', 'ice cream cone', 'juice', 'macaroni', 'meat', 'milk', 'mustard', 'pizza', 'soup', 'steak']
false positives: ['honey', 'seeds', 'water']
false negatives: ['corn on the cob', 'ice cone', 'popsicle', 'tuna', 'tuna+fish']
# true pos: 13
# false pos: 3
# false neg: 5
HSLLD/HV1/MT//remmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//remmt1.cha
HSLLD/HV1/MT//monmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//monmt1.cha
HSLLD/HV1/MT//seamt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//seamt1.cha
HSLLD/HV1/MT//jermt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jermt1.cha
HSLLD/HV1/MT//brnmt1.cha
loading solution set
salt salt 0
salt salt 0
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4c9b48>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8b4ab8>)
no calories detected for food word
fat fat 900
fat fat 900
onions onions 26
corn corn 419
fish fish 305
water water 18
duck duck 84
water water 18
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4e4ef0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4de368>)
no calories detected for food word
water water 18
water water 18
corn corn 419
rice rice 147
rice rice 147
corn corn 419
rice rice 147
corn corn 419
rice rice 147
loading solution set
calculating
set([(1148, (13, 17)), (1151, (20, 24)), (1233, (24, 28)), (209, (30, 34)), (713, (10, 16)), (1215, (49, 53)), (637, (31, 34)), (719, (6, 10)), (1233, (15, 19)), (187, (13, 17)), (1169, (23, 27)), (184, (32, 36)), (190, (36, 40)), (1215, (40, 44))])
[((184, (32, 36)), "*SIS:\t(.) &-um I'm takin(g) the salt off .\n"), ((187, (13, 17)), '*SIS:\tI hate salt [>] .\n'), ((190, (36, 40)), '*CHI:\t<mommy I drink my> [<] [/] my soda ?\n'), ((209, (30, 34)), '*CHI:\twell Mom I drink all my soda .\n'), ((637, (31, 34)), '*MOT:\tyou know how to eat that fat [//] &-um that meat Brenda xxx .\n'), ((713, (10, 16)), '*MOT:\t<no onions> [<] ?\n'), ((719, (6, 10)), '*MOT:\tcorn .\n'), ((1148, (13, 17)), '*SIS:\tI hate corn .\n'), ((1151, (20, 24)), '*SIS:\tI eat all the rice .\n'), ((1169, (23, 27)), '*MOT:\tlook at all that rice .\n'), ((1215, (40, 44)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1215, (49, 53)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1233, (15, 19)), '*MOT:\teat your rice and corn then .\n'), ((1233, (24, 28)), '*MOT:\teat your rice and corn then .\n')]
set([(1233, (24, 28)), (645, (52, 56)), (915, (20, 25)), (713, (10, 16)), (1215, (49, 53)), (895, (56, 60)), (895, (118, 123)), (1151, (20, 24)), (187, (13, 17)), (1169, (23, 27)), (184, (32, 36)), (1148, (13, 17)), (668, (21, 24)), (895, (106, 110)), (907, (11, 16)), (719, (6, 10)), (1233, (15, 19)), (921, (12, 17)), (637, (50, 54)), (1215, (40, 44)), (912, (14, 22)), (674, (17, 20)), (907, (40, 48))])
[((184, (32, 36)), "*SIS:\t(.) &-um I'm takin(g) the salt off .\n"), ((187, (13, 17)), '*SIS:\tI hate salt [>] .\n'), ((637, (50, 54)), '*MOT:\tyou know how to eat that fat [//] &-um that meat Brenda xxx .\n'), ((645, (52, 56)), '*MOT:\tyou need fat Bren so you know how to eat that meat here .\n'), ((668, (21, 24)), "*CHI:\tI don't eat no fat .\n"), ((674, (17, 20)), '*CHI:\txxx eat no fat .\n'), ((713, (10, 16)), '*MOT:\t<no onions> [<] ?\n'), ((719, (6, 10)), '*MOT:\tcorn .\n'), ((895, (56, 60)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((895, (106, 110)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((895, (118, 123)), '*SIS:\tso me and Carmen just <look out> [//] look at the fish look at the wat(er) and guess what I saw the duck in the water .\n'), ((907, (11, 16)), '*SIS:\tthat water is deep [!] and it had lobsters in it .\n'), ((907, (40, 48)), '*SIS:\tthat water is deep [!] and it had lobsters in it .\n'), ((912, (14, 22)), '*MOT:\tyou saw lobsters ?\n'), ((915, (20, 25)), '*SIS:\t(be)cause the water was green .\n'), ((921, (12, 17)), "*SIS:\tgreen water you can't see .\n"), ((1148, (13, 17)), '*SIS:\tI hate corn .\n'), ((1151, (20, 24)), '*SIS:\tI eat all the rice .\n'), ((1169, (23, 27)), '*MOT:\tlook at all that rice .\n'), ((1215, (40, 44)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1215, (49, 53)), '*MOT:\tput it over here and you eat that rice and corn .\n'), ((1233, (15, 19)), '*MOT:\teat your rice and corn then .\n'), ((1233, (24, 28)), '*MOT:\teat your rice and corn then .\n')]
calculating accuracy and recall
correct labels:
set(['salt', 'corn', 'fat', 'soda', 'rice', 'onions'])
predicted labels:
set(['lobsters', 'meat', 'salt', 'corn', 'fat', 'water', 'duck', 'rice', 'onions', 'fish'])
file:HSLLD/HV1/MT//brnmt1.cha
precision: 0.5
recall: 0.833333333333
true positives:['corn', 'fat', 'onions', 'rice', 'salt']
false positives: ['duck', 'fish', 'lobsters', 'meat', 'water']
false negatives: ['soda']
# true pos: 5
# false pos: 5
# false neg: 1
HSLLD/HV1/MT//todmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//todmt1.cha
HSLLD/HV1/MT//jeamt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jeamt1.cha
HSLLD/HV1/MT//rilmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//rilmt1.cha
HSLLD/HV1/MT//guymt1.cha
loading solution set
rice rice 147
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f54f950>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f54fab8>)
no calories detected for food word
spinach spinach 34
spinach spinach 34
juice juice 52
juice juice 52
loading solution set
calculating
set([(21, (27, 31)), (63, (18, 25)), (38, (20, 24)), (35, (28, 32)), (262, (17, 22)), (139, (36, 42)), (99, (18, 25)), (255, (17, 22))])
[((21, (27, 31)), "*MOT:\tokay you'd like your rice ?\n"), ((35, (28, 32)), '*CHI:\toh gotta look for the meat .\n'), ((38, (20, 24)), '*MOT:\tyou like your meat ?\n'), ((63, (18, 25)), '*CHI:\tPopeye eats spinach .\n'), ((99, (18, 25)), '*MOT:\this [/] his spinach ?\n'), ((139, (36, 42)), '*CHI:\tI had lunch (.) and I had 0an orange in my book bag .\n'), ((255, (17, 22)), '*MOT:\tdrink your juice .\n'), ((262, (17, 22)), '*MOT:\tdrink your juice .\n')]
set([(21, (27, 31)), (63, (18, 25)), (38, (20, 24)), (35, (28, 32)), (262, (17, 22)), (99, (18, 25)), (255, (17, 22))])
[((21, (27, 31)), "*MOT:\tokay you'd like your rice ?\n"), ((35, (28, 32)), '*CHI:\toh gotta look for the meat .\n'), ((38, (20, 24)), '*MOT:\tyou like your meat ?\n'), ((63, (18, 25)), '*CHI:\tPopeye eats spinach .\n'), ((99, (18, 25)), '*MOT:\this [/] his spinach ?\n'), ((255, (17, 22)), '*MOT:\tdrink your juice .\n'), ((262, (17, 22)), '*MOT:\tdrink your juice .\n')]
calculating accuracy and recall
correct labels:
set(['orange', 'juice', 'rice', 'meat', 'spinach'])
predicted labels:
set(['juice', 'rice', 'meat', 'spinach'])
file:HSLLD/HV1/MT//guymt1.cha
precision: 1.0
recall: 0.8
true positives:['juice', 'meat', 'rice', 'spinach']
false positives: []
false negatives: ['orange']
# true pos: 4
# false pos: 0
# false neg: 1
HSLLD/HV1/MT//astmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//astmt1.cha
HSLLD/HV1/MT//jesmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jesmt1.cha
HSLLD/HV1/MT//bramt1.cha
loading solution set
butter butter 499
margarine margarine 717
butter butter 499
butter butter 499
butter butter 499
catsup catsup 101
fish fish 305
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8ad3f8>)
no calories detected for food word
juice juice 52
sauce sauce 29
tartar sauce tartar sauce 211
mayonnaise mayonnaise 231
milk milk 46
juice juice 52
butter butter 499
juice juice 52
beans beans 105
juice juice 52
beans beans 105
juice juice 52
juice juice 52
tomatoes tomatoes 213
sauce sauce 29
tartar sauce tartar sauce 211
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8bba28>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f64d290>)
no calories detected for food word
cake cake 412
fish fish 305
beans beans 105
bread bread 186
fish fish 305
grapes grapes 76
fish fish 305
fish fish 305
fish fish 305
fish fish 305
bear bear 130
milk milk 46
milk milk 46
honey honey 304
fish fish 305
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8bb440>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f65eea8>)
no calories detected for food word
ice cream ice cream 265
cream cream 72
ice cream ice cream 265
cream cream 72
ice cream ice cream 265
cream cream 72
ice cream ice cream 265
cream cream 72
ice cream ice cream 265
cream cream 72
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8bb368>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f633a70>)
no calories detected for food word
fish fish 305
ice cream ice cream 265
cream cream 72
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8bb3b0>)
no calories detected for food word
fish fish 305
water water 18
honey honey 304
cake cake 412
ice cream ice cream 265
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f65a200>)
no calories detected for food word
cream cream 72
milk milk 46
fish fish 305
ice cream ice cream 265
cream cream 72
loading solution set
calculating
set([(454, (20, 25)), (220, (16, 22)), (1537, (20, 33)), (433, (11, 16)), (1413, (52, 56)), (471, (6, 11)), (2121, (14, 23)), (457, (10, 15)), (181, (7, 13)), (725, (17, 22)), (1585, (54, 63)), (477, (14, 19)), (1726, (34, 38)), (271, (15, 26)), (1519, (98, 103)), (159, (16, 22)), (159, (26, 35)), (1713, (81, 90)), (249, (6, 11)), (1562, (15, 24)), (721, (18, 23)), (429, (6, 10)), (1713, (94, 98)), (1573, (53, 62)), (1579, (14, 19)), (461, (20, 25)), (451, (12, 17)), (228, (14, 24)), (830, (21, 31)), (1017, (30, 44)), (1469, (18, 22)), (1524, (21, 26)), (793, (23, 28)), (1713, (57, 62)), (513, (6, 14)), (1593, (9, 14)), (185, (51, 57)), (379, (14, 24)), (1528, (26, 35)), (675, (14, 26)), (1569, (6, 15)), (775, (30, 39)), (373, (39, 51)), (438, (20, 26)), (813, (30, 41)), (169, (6, 12)), (1582, (18, 23))])
[((159, (16, 22)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((159, (26, 35)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((169, (6, 12)), '*GMA:\tbutter please .\n'), ((181, (7, 13)), '*CHI:\t<butter xxx> [>] .\n'), ((185, (51, 57)), "*GMA:\t<oh no> [<] I like <&m> [//] I don't like my butter that has been left open like that thank <you very much> [>] .\n"), ((220, (16, 22)), '*MOT:\t<you want catsup> [<] ?\n'), ((228, (14, 24)), '*MOT:\ton your fish cakes ?\n'), ((249, (6, 11)), '*CHI:\tjuice me [!] me .\n'), ((271, (15, 26)), "*MOT:\t&-um the brown bread's in there .\n"), ((373, (39, 51)), '*MOT:\t<Brad made> [//] helped make the tartar sauce .\n'), ((379, (14, 24)), '*MOT:\tall the mayonnaise in the jar .\n'), ((429, (6, 10)), '*MOT:\tmilk first ?\n'), ((433, (11, 16)), '*MOT:\tthen juice ?\n'), ((438, (20, 26)), "*GMA:\tperhaps I'll <butter your piece> [>] ?\n"), ((451, (12, 17)), '*CHI:\tfirst juice .\n'), ((454, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((457, (10, 15)), '*MOT:\tthe juice first ?\n'), ((461, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((471, (6, 11)), '*CHI:\tjuice please [?] .\n'), ((477, (14, 19)), '*CHI:\t<enough juice> [>] .\n'), ((513, (6, 14)), '*GPA:\ttomatoes ?\n'), ((675, (14, 26)), '*MOT:\toh this tartar sauce (..) +...\n'), ((721, (18, 23)), '*CHI:\tyou gave me candy .\n'), ((725, (17, 22)), '*MOT:\tI gave you candy .\n'), ((775, (30, 39)), '*MOT:\tyou want me to cut your fish cake (.) ?\n'), ((793, (23, 28)), '*MOT:\tdid you eat some beans ?\n'), ((813, (30, 41)), '*MOT:\tyou want me to cut your brown bread ?\n'), ((830, (21, 31)), '*MOT:\tokay I cut one fish stick [?] xxx .\n'), ((1017, (30, 44)), '*GMA:\tlooked like a bunch of <Concord grapes> [>] .\n'), ((1413, (52, 56)), "*CHI:\t<I'm all> [/] I'm all done though I want some milk .\n"), ((1469, (18, 22)), "*MOT:\there's your milk .\n"), ((1519, (98, 103)), "*GMA:\tand <you really [!] shouldn't> [//] you didn't have any dinner you really [!] shouldn't eat candy .\n"), ((1524, (21, 26)), '*GMA:\tyou had enough candy today Lovey .\n'), ((1528, (26, 35)), "*CHI:\tMommy I'm gonna get ice cream .\n"), ((1537, (20, 33)), "*CHI:\tI'm gonna get ice cream bar[!] (.) .\n"), ((1562, (15, 24)), '*MOT:\t<want an ice cream too> [>] .\n'), ((1569, (6, 15)), '*GMA:\tice cream is better .\n'), ((1573, (53, 62)), '*CHI:\tMa I wan(t) (t)a go to the store and get <some ice cream> [>] .\n'), ((1579, (14, 19)), '*GMA:\t<but no candy> [<] .\n'), ((1582, (18, 23)), '*CHI:\tno just [?] candy .\n'), ((1585, (54, 63)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1593, (9, 14)), '*GMA:\tno candy .\n'), ((1713, (57, 62)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (81, 90)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (94, 98)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1726, (34, 38)), '*MOT:\tcome up here and drink your milk (.) .\n'), ((2121, (14, 23)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n')]
set([(454, (20, 25)), (1169, (30, 34)), (220, (16, 22)), (1593, (9, 14)), (1153, (28, 32)), (721, (18, 23)), (1413, (52, 56)), (471, (6, 11)), (1218, (37, 41)), (457, (10, 15)), (1506, (27, 31)), (181, (7, 13)), (1639, (44, 49)), (1599, (30, 34)), (725, (17, 22)), (1713, (94, 98)), (1585, (54, 63)), (477, (14, 19)), (1726, (34, 38)), (1537, (20, 29)), (1519, (98, 103)), (1017, (38, 44)), (159, (16, 22)), (159, (26, 35)), (1713, (81, 90)), (249, (6, 11)), (1562, (15, 24)), (433, (11, 16)), (429, (6, 10)), (830, (21, 25)), (1585, (30, 34)), (1573, (53, 62)), (1579, (14, 19)), (813, (36, 41)), (461, (20, 25)), (2121, (50, 54)), (451, (12, 17)), (1263, (41, 45)), (228, (14, 24)), (1582, (18, 23)), (1164, (22, 26)), (1469, (18, 22)), (1524, (21, 26)), (793, (23, 28)), (1713, (57, 62)), (513, (6, 14)), (185, (51, 57)), (1702, (11, 16)), (379, (14, 24)), (1528, (26, 35)), (1500, (12, 17)), (675, (14, 26)), (1569, (6, 15)), (775, (30, 39)), (373, (39, 51)), (438, (20, 26)), (169, (6, 12)), (2121, (14, 23))])
[((159, (16, 22)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((159, (26, 35)), '*MOT:\t<you want butter or margarine> [>] ?\n'), ((169, (6, 12)), '*GMA:\tbutter please .\n'), ((181, (7, 13)), '*CHI:\t<butter xxx> [>] .\n'), ((185, (51, 57)), "*GMA:\t<oh no> [<] I like <&m> [//] I don't like my butter that has been left open like that thank <you very much> [>] .\n"), ((220, (16, 22)), '*MOT:\t<you want catsup> [<] ?\n'), ((228, (14, 24)), '*MOT:\ton your fish cakes ?\n'), ((249, (6, 11)), '*CHI:\tjuice me [!] me .\n'), ((373, (39, 51)), '*MOT:\t<Brad made> [//] helped make the tartar sauce .\n'), ((379, (14, 24)), '*MOT:\tall the mayonnaise in the jar .\n'), ((429, (6, 10)), '*MOT:\tmilk first ?\n'), ((433, (11, 16)), '*MOT:\tthen juice ?\n'), ((438, (20, 26)), "*GMA:\tperhaps I'll <butter your piece> [>] ?\n"), ((451, (12, 17)), '*CHI:\tfirst juice .\n'), ((454, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((457, (10, 15)), '*MOT:\tthe juice first ?\n'), ((461, (20, 25)), '*GPA:\tyou want some beans ?\n'), ((471, (6, 11)), '*CHI:\tjuice please [?] .\n'), ((477, (14, 19)), '*CHI:\t<enough juice> [>] .\n'), ((513, (6, 14)), '*GPA:\ttomatoes ?\n'), ((675, (14, 26)), '*MOT:\toh this tartar sauce (..) +...\n'), ((721, (18, 23)), '*CHI:\tyou gave me candy .\n'), ((725, (17, 22)), '*MOT:\tI gave you candy .\n'), ((775, (30, 39)), '*MOT:\tyou want me to cut your fish cake (.) ?\n'), ((793, (23, 28)), '*MOT:\tdid you eat some beans ?\n'), ((813, (36, 41)), '*MOT:\tyou want me to cut your brown bread ?\n'), ((830, (21, 25)), '*MOT:\tokay I cut one fish stick [?] xxx .\n'), ((1017, (38, 44)), '*GMA:\tlooked like a bunch of <Concord grapes> [>] .\n'), ((1153, (28, 32)), '*CHI:\tI want (to) go to the fish store .\n'), ((1164, (22, 26)), '*CHI:\tdid you see the fish man go home (.) ?\n'), ((1169, (30, 34)), '*CHI:\tI wan(t) (to) go to the fish store .\n'), ((1218, (37, 41)), '*CHI:\t<we can> [/] we can run to the fish store .\n'), ((1263, (41, 45)), "*MOT:\tBrad should get out his Berenstein Bear [?] [///] oh I'm going (t)a have_to let Ma read it and that'll tell her what thunder is huh ?\n"), ((1413, (52, 56)), "*CHI:\t<I'm all> [/] I'm all done though I want some milk .\n"), ((1469, (18, 22)), "*MOT:\there's your milk .\n"), ((1500, (12, 17)), "*MOT:\t<well Honey> [<] I don't think we should go .\n"), ((1506, (27, 31)), '*CHI:\tyyy I want go to the fish store .\n'), ((1519, (98, 103)), "*GMA:\tand <you really [!] shouldn't> [//] you didn't have any dinner you really [!] shouldn't eat candy .\n"), ((1524, (21, 26)), '*GMA:\tyou had enough candy today Lovey .\n'), ((1528, (26, 35)), "*CHI:\tMommy I'm gonna get ice cream .\n"), ((1537, (20, 29)), "*CHI:\tI'm gonna get ice cream bar[!] (.) .\n"), ((1562, (15, 24)), '*MOT:\t<want an ice cream too> [>] .\n'), ((1569, (6, 15)), '*GMA:\tice cream is better .\n'), ((1573, (53, 62)), '*CHI:\tMa I wan(t) (t)a go to the store and get <some ice cream> [>] .\n'), ((1579, (14, 19)), '*GMA:\t<but no candy> [<] .\n'), ((1582, (18, 23)), '*CHI:\tno just [?] candy .\n'), ((1585, (30, 34)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1585, (54, 63)), '*CHI:\tI wan(t) (t)a go to the fish store and get some ice cream (.) .\n'), ((1593, (9, 14)), '*GMA:\tno candy .\n'), ((1599, (30, 34)), '*CHI:\tMa you wan(t) go to the fish store with me and my Mama ?\n'), ((1639, (44, 49)), '*CHI:\t&-um Mommy I wan(t) (t)a bring my new water gun to the preschool [>] .\n'), ((1702, (11, 16)), '*MOT:\twhat Honey ?\n'), ((1713, (57, 62)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (81, 90)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1713, (94, 98)), "*CHI:\tdo you wan(t) (t)a go to the store and I won't get candy and I'll get just ice cream or cake ?\n"), ((1726, (34, 38)), '*MOT:\tcome up here and drink your milk (.) .\n'), ((2121, (14, 23)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n'), ((2121, (50, 54)), '*MOT:\tkind of ice cream you going (t)a get at the fish store ?\n')]
calculating accuracy and recall
correct labels:
set(['butter', 'fish cakes', 'brown bread', 'catsup', 'tartar sauce', 'cake', 'ice cream bar', 'candy', 'ice cream', 'juice', 'beans', 'concord grapes', 'fish cake', 'fish stick', 'margarine', 'mayonnaise', 'milk', 'tomatoes'])
predicted labels:
set(['butter', 'water', 'fish cakes', 'catsup', 'tartar sauce', 'fish', 'candy', 'honey', 'juice', 'beans', 'bear', 'grapes', 'fish cake', 'cake', 'margarine', 'mayonnaise', 'ice cream', 'milk', 'tomatoes', 'bread'])
file:HSLLD/HV1/MT//bramt1.cha
precision: 0.7
recall: 0.777777777778
true positives:['beans', 'butter', 'cake', 'candy', 'catsup', 'fish cake', 'fish cakes', 'ice cream', 'juice', 'margarine', 'mayonnaise', 'milk', 'tartar sauce', 'tomatoes']
false positives: ['bear', 'bread', 'fish', 'grapes', 'honey', 'water']
false negatives: ['brown bread', 'concord grapes', 'fish stick', 'ice cream bar']
# true pos: 14
# false pos: 6
# false neg: 4
HSLLD/HV1/MT//geomt1.cha
loading solution set
pumpkin pumpkin 15
pumpkin pumpkin 15
sausage sausage 324
meatballs meatballs 197
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f459f80>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f453290>)
no calories detected for food word
meatballs meatballs 197
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4534d0>)
no calories detected for food word
bacon bacon 309
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f453a28>)
no calories detected for food word
duck duck 84
duck duck 84
pepper pepper 27
salt salt 0
duck duck 84
egg egg 357
duck duck 84
duck duck 84
cookie cookie 507
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f3b4128>)
no calories detected for food word
cookie cookie 507
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f3b42d8>)
no calories detected for food word
cookie cookie 507
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f453b48>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f453e18>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4538c0>)
no calories detected for food word
gums gums 332
turtle turtle 89
turtle turtle 89
turtle turtle 89
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4597a0>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f459680>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f459d88>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f459098>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f459638>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f459680>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f445b90>)
no calories detected for food word
turtle turtle 89
turtle turtle 89
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f3b4128>)
no calories detected for food word
turtle turtle 89
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f453560>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f453f80>)
no calories detected for food word
loading solution set
calculating
set([(98, (18, 25)), (1048, (52, 56)), (1343, (9, 12)), (944, (8, 12)), (2963, (46, 54)), (121, (21, 30)), (2419, (58, 64)), (951, (49, 53)), (25, (6, 13)), (111, (14, 18)), (102, (25, 34)), (142, (27, 37)), (2433, (24, 30)), (987, (28, 32)), (2441, (48, 55)), (1801, (37, 41)), (22, (6, 13)), (118, (17, 21)), (1523, (17, 21)), (2437, (36, 44)), (909, (22, 30)), (2428, (46, 52)), (2555, (18, 22)), (2934, (8, 16)), (984, (14, 20)), (182, (52, 57))])
[((22, (6, 13)), '*CHI:\tpumpkin .\n'), ((25, (6, 13)), '*MOT:\tpumpkin ?\n'), ((98, (18, 25)), '*CHI:\t(.) is that sausage ?\n'), ((102, (25, 34)), "*MOT:\tno that's xxx [//] meatballs .\n"), ((111, (14, 18)), '*CHI:\tis that meat ?\n'), ((118, (17, 21)), "*MOT:\tyes that's meat .\n"), ((121, (21, 30)), '*CHI:\tis this [!] &m meatballs ?\n'), ((142, (27, 37)), '*CHI:\tGrandma [?] can make hamburgers ?\n'), ((182, (52, 57)), '*CHI:\twith [/] with the &t toy [/] toy bakin(g) [=? bacon] .\n'), ((909, (22, 30)), '*CHI:\t(..) I want the meatball .\n'), ((944, (8, 12)), '*CHI:\ta duck .\n'), ((951, (49, 53)), '*MOT:\t<did he take> [<] a little [!] bite of the duck ?\n'), ((984, (14, 20)), '*CHI:\tand put pepper on her ?\n'), ((987, (28, 32)), '*CHI:\t<and (.) and> [/] and salt on her ?\n'), ((1048, (52, 56)), '*MOT:\t<you had better be hungry to eat a whole> [>] duck huh ?\n'), ((1343, (9, 12)), '*CHI:\t++ egg [<] [?] .\n'), ((1523, (17, 21)), '*CHI:\the ate the duck alive .\n'), ((1801, (37, 41)), '*CHI:\t&-um [/] &-um the wolf ate the duck .\n'), ((2419, (58, 64)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2428, (46, 52)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2433, (24, 30)), "*MOT:\twhy'd he drop the cookie ?\n"), ((2437, (36, 44)), '*CHI:\t<when he> [/] when he saw the cupcakes ?\n'), ((2441, (48, 55)), '*MOT:\toh because he decided he wanted to have a cupcake instead ?\n'), ((2555, (18, 22)), '*MOT:\tyou got two gums and anything else ?\n'), ((2934, (8, 16)), '*MOT:\ta meatball you dropped on the floor &=laughs .\n'), ((2963, (46, 54)), '*MOT:\t(.) we had to step on the rest of it [= meatball] .\n')]
set([(2811, (11, 18)), (98, (18, 25)), (1048, (52, 56)), (2744, (40, 47)), (2838, (54, 60)), (2757, (14, 21)), (2844, (16, 22)), (1343, (9, 12)), (2802, (20, 27)), (944, (8, 12)), (2963, (46, 54)), (121, (21, 30)), (2419, (58, 64)), (2761, (28, 35)), (2713, (44, 50)), (951, (49, 53)), (2428, (21, 28)), (2765, (29, 36)), (111, (14, 18)), (25, (6, 13)), (102, (25, 34)), (2838, (22, 28)), (142, (27, 37)), (2433, (24, 30)), (2419, (28, 36)), (987, (28, 32)), (2891, (18, 24)), (2441, (48, 55)), (1801, (37, 41)), (22, (6, 13)), (118, (17, 21)), (1523, (17, 21)), (2722, (40, 46)), (2437, (36, 44)), (2891, (29, 35)), (2824, (49, 56)), (2838, (33, 39)), (909, (22, 30)), (2428, (46, 52)), (2555, (18, 22)), (2533, (55, 60)), (2934, (8, 16)), (984, (14, 20)), (182, (52, 57)), (2734, (20, 26)), (2886, (28, 35))])
[((22, (6, 13)), '*CHI:\tpumpkin .\n'), ((25, (6, 13)), '*MOT:\tpumpkin ?\n'), ((98, (18, 25)), '*CHI:\t(.) is that sausage ?\n'), ((102, (25, 34)), "*MOT:\tno that's xxx [//] meatballs .\n"), ((111, (14, 18)), '*CHI:\tis that meat ?\n'), ((118, (17, 21)), "*MOT:\tyes that's meat .\n"), ((121, (21, 30)), '*CHI:\tis this [!] &m meatballs ?\n'), ((142, (27, 37)), '*CHI:\tGrandma [?] can make hamburgers ?\n'), ((182, (52, 57)), '*CHI:\twith [/] with the &t toy [/] toy bakin(g) [=? bacon] .\n'), ((909, (22, 30)), '*CHI:\t(..) I want the meatball .\n'), ((944, (8, 12)), '*CHI:\ta duck .\n'), ((951, (49, 53)), '*MOT:\t<did he take> [<] a little [!] bite of the duck ?\n'), ((984, (14, 20)), '*CHI:\tand put pepper on her ?\n'), ((987, (28, 32)), '*CHI:\t<and (.) and> [/] and salt on her ?\n'), ((1048, (52, 56)), '*MOT:\t<you had better be hungry to eat a whole> [>] duck huh ?\n'), ((1343, (9, 12)), '*CHI:\t++ egg [<] [?] .\n'), ((1523, (17, 21)), '*CHI:\the ate the duck alive .\n'), ((1801, (37, 41)), '*CHI:\t&-um [/] &-um the wolf ate the duck .\n'), ((2419, (28, 36)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2419, (58, 64)), '*CHI:\tbecause Kenny saw the cupcakes (.) and he dropped a cookie ?\n'), ((2428, (21, 28)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2428, (46, 52)), '*CHI:\the saw [?] the cupcake and he dropped a cookie .\n'), ((2433, (24, 30)), "*MOT:\twhy'd he drop the cookie ?\n"), ((2437, (36, 44)), '*CHI:\t<when he> [/] when he saw the cupcakes ?\n'), ((2441, (48, 55)), '*MOT:\toh because he decided he wanted to have a cupcake instead ?\n'), ((2533, (55, 60)), '*CHI:\tand [/] and the and they dropped all [/] all the candy .\n'), ((2555, (18, 22)), '*MOT:\tyou got two gums and anything else ?\n'), ((2713, (44, 50)), "*CHI:\t<and [/] and &-uh> [//] and a pretend turtle couldn't get me .\n"), ((2722, (40, 46)), "*MOT:\tand you held on like that and the turtle couldn't get you ?\n"), ((2734, (20, 26)), '*MOT:\twhere was the turtle ?\n'), ((2744, (40, 47)), "*MOT:\toh I was gonna say I didn't think turtles could (.) climb the trees .\n"), ((2757, (14, 21)), '*MOT:\tpretend turtles ?\n'), ((2761, (28, 35)), '*CHI:\tyup those are pretend turtles .\n'), ((2765, (29, 36)), "*MOT:\toh okay (be)cause real turtles can't climb trees .\n"), ((2802, (20, 27)), '*CHI:\t&on only fake turtles can climb up the tree ?\n'), ((2811, (11, 18)), '*MOT:\tfake turtles can do whatever you want them to do .\n'), ((2824, (49, 56)), '*CHI:\tMama I wanna go get (.) some &l nice &tail turtles (.) &wh when we wake up .\n'), ((2838, (22, 28)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2838, (33, 39)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2838, (54, 60)), '*CHI:\t<a nice [?] [!] turtle [/] turtle> [//] &n nice turtle toys !\n'), ((2844, (16, 22)), '*CHI:\tyeah nice turtle (.) things [//] toys .\n'), ((2886, (28, 35)), "*MOT:\twell I don't want any turtles like that .\n"), ((2891, (18, 24)), '*CHI:\t(.) and the turtle [/] turtle is a bum+bum .\n'), ((2891, (29, 35)), '*CHI:\t(.) and the turtle [/] turtle is a bum+bum .\n'), ((2934, (8, 16)), '*MOT:\ta meatball you dropped on the floor &=laughs .\n'), ((2963, (46, 54)), '*MOT:\t(.) we had to step on the rest of it [= meatball] .\n')]
calculating accuracy and recall
correct labels:
set(['sausage', 'cupcakes', 'meat', 'meatballs', 'bacon', 'pepper', 'cupcake', 'gums', 'cookie', 'duck', 'meatball', 'salt', 'egg', 'hamburgers', 'pumpkin'])
predicted labels:
set(['turtle', 'sausage', 'cupcakes', 'meat', 'turtles', 'meatballs', 'bacon', 'pepper', 'candy', 'cupcake', 'gums', 'cookie', 'duck', 'meatball', 'salt', 'egg', 'hamburgers', 'pumpkin'])
file:HSLLD/HV1/MT//geomt1.cha
precision: 0.833333333333
recall: 1.0
true positives:['bacon', 'cookie', 'cupcake', 'cupcakes', 'duck', 'egg', 'gums', 'hamburgers', 'meat', 'meatball', 'meatballs', 'pepper', 'pumpkin', 'salt', 'sausage']
false positives: ['candy', 'turtle', 'turtles']
false negatives: []
# true pos: 15
# false pos: 3
# false neg: 0
HSLLD/HV1/MT//brtmt1.cha
loading solution set
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8e2560>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8e2638>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8e2d88>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8e2ea8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8e2b00>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8e2fc8>)
no calories detected for food word
loading solution set
calculating
set([(240, (6, 10)), (230, (16, 20)), (237, (6, 10))])
[((230, (16, 20)), '*CHI:\twant some meat .\n'), ((237, (6, 10)), '*CHI:\tmeat .\n'), ((240, (6, 10)), '*MOT:\tmeat ?\n')]
set([(178, (11, 16)), (240, (6, 10)), (99, (44, 49)), (104, (45, 50)), (230, (16, 20)), (237, (6, 10))])
[((99, (44, 49)), "*MOT:\tjust leave it in there it'll keep the tonic cold .\n"), ((104, (45, 50)), "*CHI:\t<I can't get the> [//] I can't get the tonic .\n"), ((178, (11, 16)), '*CHI:\tmore tonic .\n'), ((230, (16, 20)), '*CHI:\twant some meat .\n'), ((237, (6, 10)), '*CHI:\tmeat .\n'), ((240, (6, 10)), '*MOT:\tmeat ?\n')]
calculating accuracy and recall
correct labels:
set(['meat'])
predicted labels:
set(['tonic', 'meat'])
file:HSLLD/HV1/MT//brtmt1.cha
precision: 0.5
recall: 1.0
true positives:['meat']
false positives: ['tonic']
false negatives: []
# true pos: 1
# false pos: 1
# false neg: 0
HSLLD/HV1/MT//jacmt1.cha
loading solution set
duck duck 84
duck duck 84
duck duck 84
spaghetti spaghetti 100
loading solution set
calculating
set([(725, (26, 34)), (311, (22, 30)), (329, (34, 43)), (721, (26, 34))])
[((311, (22, 30)), '*MOT:\twant me to make brownies for dessert ?\n'), ((329, (34, 43)), '*MOT:\tdid you eat all of your (.) spaghetti [>] ?\n'), ((721, (26, 34)), "*MOT:\tI'm gonna make some brownies anyway .\n"), ((725, (26, 34)), "*MOT:\tdon't you want some brownies ?\n")]
set([(46, (26, 30)), (218, (26, 30)), (329, (34, 43)), (53, (30, 34))])
[((46, (26, 30)), '*CHI:\t<and the Howard the Duck [/]> [>] .\n'), ((53, (30, 34)), '*CHI:\twas that the Howard the Duck tape ?\n'), ((218, (26, 30)), '*CHI:\twhere is Howard the Duck ?\n'), ((329, (34, 43)), '*MOT:\tdid you eat all of your (.) spaghetti [>] ?\n')]
calculating accuracy and recall
correct labels:
set(['spaghetti', 'brownies'])
predicted labels:
set(['spaghetti', 'duck'])
file:HSLLD/HV1/MT//jacmt1.cha
precision: 0.5
recall: 0.5
true positives:['spaghetti']
false positives: ['duck']
false negatives: ['brownies']
# true pos: 1
# false pos: 1
# false neg: 1
HSLLD/HV1/MT//jusmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//jusmt1.cha
HSLLD/HV1/MT//tammt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//tammt1.cha
HSLLD/HV1/MT//allmt1.cha
loading solution set
butter butter 499
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f55ae60>)
no calories detected for food word
peanut butter peanut butter 590
butter butter 499
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f549170>)
no calories detected for food word
peanut butter peanut butter 590
celery celery 18
celery celery 18
celery celery 18
celery celery 18
butter butter 499
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f549bd8>)
no calories detected for food word
peanut butter peanut butter 590
butter butter 499
goose goose 133
pizza pizza 274
pizza pizza 274
cheese cheese 280
pizza pizza 274
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f656d40>)
no calories detected for food word
pizza pizza 274
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f8d1998>)
no calories detected for food word
pizza pizza 274
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5323f8>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6f0440>)
no calories detected for food word
pizza pizza 274
pizza pizza 274
pizza pizza 274
pizza pizza 274
pizza pizza 274
pizza pizza 274
milk milk 46
sugar sugar 399
sugar sugar 399
sugar sugar 399
crackers crackers 453
milk milk 46
milk milk 46
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4bc9e0>)
no calories detected for food word
crackers crackers 453
milk milk 46
crackers crackers 453
milk milk 46
sugar sugar 399
sugar sugar 399
sugar sugar 399
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4459e0>)
no calories detected for food word
crackers crackers 453
milk milk 46
milk milk 46
ham ham 141
honey honey 304
pizza pizza 274
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f6f0830>)
no calories detected for food word
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f549290>)
no calories detected for food word
pizza pizza 274
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f5499e0>)
no calories detected for food word
pizza pizza 274
macaroni macaroni 128
(<type 'exceptions.ZeroDivisionError'>, ZeroDivisionError('float division by zero',), <traceback object at 0x7fc00f4596c8>)
no calories detected for food word
bacon bacon 309
canadian bacon canadian bacon 146
loading solution set
calculating
set([(1546, (6, 13)), (1585, (25, 32)), (721, (6, 11)), (1578, (10, 17)), (666, (29, 34)), (1161, (18, 23)), (216, (9, 14)), (684, (20, 25)), (235, (64, 69)), (936, (20, 24)), (991, (50, 54)), (137, (51, 57)), (1121, (29, 34)), (1167, (19, 27)), (939, (21, 26)), (1565, (6, 11)), (1045, (16, 24)), (235, (22, 27)), (1552, (6, 11)), (222, (31, 37)), (1149, (26, 31)), (945, (21, 26)), (1045, (29, 33)), (1113, (22, 27)), (628, (24, 29)), (145, (6, 21)), (107, (6, 29)), (247, (25, 30)), (741, (25, 30)), (1048, (7, 23)), (1167, (32, 36)), (1039, (23, 30)), (1540, (6, 11)), (1574, (6, 13)), (1568, (6, 11)), (1592, (13, 27)), (134, (11, 17)), (693, (25, 30)), (213, (10, 15)), (244, (22, 27)), (1571, (10, 17)), (955, (13, 18)), (1020, (24, 28)), (131, (22, 28)), (100, (6, 29)), (141, (19, 32)), (252, (19, 24)), (1180, (35, 39)), (1565, (16, 21)), (1568, (16, 21)), (1237, (30, 33)), (1581, (27, 41)), (991, (37, 45)), (122, (6, 12)), (1048, (28, 32)), (705, (18, 23)), (225, (16, 21))])
[((100, (6, 29)), '*CHI:\tpeanut butter and jelly .\n'), ((107, (6, 29)), '*MOT:\tpeanut butter and jelly ?\n'), ((122, (6, 12)), '*CHI:\tcelery .\n'), ((131, (22, 28)), '*MOT:\tyou cut up some celery .\n'), ((134, (11, 17)), '*CHI:\twith celery ?\n'), ((137, (51, 57)), "*GMA:\t<what d'you@d have> [/] what you have on the celery [!] ?\n"), ((141, (19, 32)), "*MOT:\td'you@d have peanut butter ?\n"), ((145, (6, 21)), '*CHI:\tpean(ut) butter !\n'), ((213, (10, 15)), '*GMA:\tthe pizza [!] .\n'), ((216, (9, 14)), '*CHI:\tmy pizza ?\n'), ((222, (31, 37)), "*GMA:\tit's [///] you smell the cheese [!] (.) .\n"), ((225, (16, 21)), '*GMA:\tthat good pizza ?\n'), ((235, (22, 27)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((235, (64, 69)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((244, (22, 27)), "*GMA:\tthere's no more steak .\n"), ((247, (25, 30)), '*GMA:\tfinish eating your pizza .\n'), ((252, (19, 24)), "*CHI:\tthere's more steak !\n"), ((628, (24, 29)), '*CHI:\tone more piece of steak left [!] .\n'), ((666, (29, 34)), '*GMA:\teat [<] your delicious pizza .\n'), ((684, (20, 25)), '*GMA:\thow about the pizza ?\n'), ((693, (25, 30)), "*GMA:\tthis [!] one's the pizza .\n"), ((705, (18, 23)), '*CHI:\tI call this pizza too .\n'), ((721, (6, 11)), '*CHI:\tpizza .\n'), ((741, (25, 30)), '*CHI:\twho likes this [!] pizza ?\n'), ((936, (20, 24)), '*GFA:\tput some more milk .\n'), ((939, (21, 26)), "*CHI:\tGrandpa that's sugar [?] in there ?\n"), ((945, (21, 26)), '*GFA:\tgonna put some sugar on there too .\n'), ((955, (13, 18)), '*GFA:\tI like sugar on there .\n'), ((991, (37, 45)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((991, (50, 54)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((1020, (24, 28)), '*GMA:\tyou done with the milk ?\n'), ((1039, (23, 30)), '*CHI:\tbut (.) &-um (.) oatmeal in it ?\n'), ((1045, (16, 24)), "*GFA:\tit's just crackers and milk .\n"), ((1045, (29, 33)), "*GFA:\tit's just crackers and milk .\n"), ((1048, (7, 23)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1048, (28, 32)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1113, (22, 27)), '*GFA:\t<can I have the sugar and the spoon> [<] back ?\n'), ((1121, (29, 34)), '*GMA:\tyou already put enough sugar on there (.) .\n'), ((1149, (26, 31)), "*GFA:\tGrandma's trying to sugar me to death here .\n"), ((1161, (18, 23)), "*CHI:\tit's by the jelly !\n"), ((1167, (19, 27)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1167, (32, 36)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1180, (35, 39)), '*MOT:\tshe says she likes them with milk .\n'), ((1237, (30, 33)), '*GMA:\tthe night he was making ham in the oven .\n'), ((1540, (6, 11)), '*CHI:\tpizza .\n'), ((1546, (6, 13)), '*CHI:\tcalzone .\n'), ((1552, (6, 11)), '*CHI:\tsteak .\n'), ((1565, (6, 11)), '*CHI:\tsteak and pizza !\n'), ((1565, (16, 21)), '*CHI:\tsteak and pizza !\n'), ((1568, (6, 11)), '*GFA:\tsteak and pizza ?\n'), ((1568, (16, 21)), '*GFA:\tsteak and pizza ?\n'), ((1571, (10, 17)), '*GMA:\tand calzone [>] .\n'), ((1574, (6, 13)), '*CHI:\tcalzone [<] .\n'), ((1578, (10, 17)), '*GFA:\tand calzone !\n'), ((1581, (27, 41)), "*GMA:\tshe didn't like the <macaroni salad> [>] .\n"), ((1585, (25, 32)), '*MOT:\t<did you like that calzone xxx> [<] ?\n'), ((1592, (13, 27)), "*MOT:\tthat's Canadian bacon .\n")]
set([(721, (6, 11)), (666, (29, 34)), (205, (21, 26)), (1048, (15, 23)), (1161, (18, 23)), (216, (9, 14)), (684, (20, 25)), (235, (64, 69)), (936, (20, 24)), (991, (50, 54)), (137, (51, 57)), (1121, (29, 34)), (1167, (19, 27)), (939, (21, 26)), (1045, (16, 24)), (235, (22, 27)), (1552, (6, 11)), (222, (31, 37)), (1149, (26, 31)), (1045, (29, 33)), (1113, (22, 27)), (628, (24, 29)), (1180, (35, 39)), (122, (6, 12)), (247, (25, 30)), (741, (25, 30)), (107, (24, 29)), (1167, (32, 36)), (1039, (23, 30)), (1540, (6, 11)), (145, (15, 21)), (1568, (6, 11)), (1568, (16, 21)), (1592, (13, 27)), (1446, (34, 39)), (134, (11, 17)), (693, (25, 30)), (213, (10, 15)), (244, (22, 27)), (955, (13, 18)), (1020, (24, 28)), (100, (6, 19)), (107, (6, 19)), (131, (22, 28)), (1565, (6, 11)), (141, (19, 32)), (252, (19, 24)), (1565, (16, 21)), (100, (24, 29)), (1237, (30, 33)), (1581, (27, 41)), (991, (37, 45)), (945, (21, 26)), (1048, (28, 32)), (705, (18, 23)), (225, (16, 21))])
[((100, (6, 19)), '*CHI:\tpeanut butter and jelly .\n'), ((100, (24, 29)), '*CHI:\tpeanut butter and jelly .\n'), ((107, (6, 19)), '*MOT:\tpeanut butter and jelly ?\n'), ((107, (24, 29)), '*MOT:\tpeanut butter and jelly ?\n'), ((122, (6, 12)), '*CHI:\tcelery .\n'), ((131, (22, 28)), '*MOT:\tyou cut up some celery .\n'), ((134, (11, 17)), '*CHI:\twith celery ?\n'), ((137, (51, 57)), "*GMA:\t<what d'you@d have> [/] what you have on the celery [!] ?\n"), ((141, (19, 32)), "*MOT:\td'you@d have peanut butter ?\n"), ((145, (15, 21)), '*CHI:\tpean(ut) butter !\n'), ((205, (21, 26)), "*GMA:\tyou're a silly goose .\n"), ((213, (10, 15)), '*GMA:\tthe pizza [!] .\n'), ((216, (9, 14)), '*CHI:\tmy pizza ?\n'), ((222, (31, 37)), "*GMA:\tit's [///] you smell the cheese [!] (.) .\n"), ((225, (16, 21)), '*GMA:\tthat good pizza ?\n'), ((235, (22, 27)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((235, (64, 69)), "*GMA:\tthere's no more steak so make sure you finish eating your pizza too .\n"), ((244, (22, 27)), "*GMA:\tthere's no more steak .\n"), ((247, (25, 30)), '*GMA:\tfinish eating your pizza .\n'), ((252, (19, 24)), "*CHI:\tthere's more steak !\n"), ((628, (24, 29)), '*CHI:\tone more piece of steak left [!] .\n'), ((666, (29, 34)), '*GMA:\teat [<] your delicious pizza .\n'), ((684, (20, 25)), '*GMA:\thow about the pizza ?\n'), ((693, (25, 30)), "*GMA:\tthis [!] one's the pizza .\n"), ((705, (18, 23)), '*CHI:\tI call this pizza too .\n'), ((721, (6, 11)), '*CHI:\tpizza .\n'), ((741, (25, 30)), '*CHI:\twho likes this [!] pizza ?\n'), ((936, (20, 24)), '*GFA:\tput some more milk .\n'), ((939, (21, 26)), "*CHI:\tGrandpa that's sugar [?] in there ?\n"), ((945, (21, 26)), '*GFA:\tgonna put some sugar on there too .\n'), ((955, (13, 18)), '*GFA:\tI like sugar on there .\n'), ((991, (37, 45)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((991, (50, 54)), '*GFA:\tyou sticking your finger in my crackers and milk for ?\n'), ((1020, (24, 28)), '*GMA:\tyou done with the milk ?\n'), ((1039, (23, 30)), '*CHI:\tbut (.) &-um (.) oatmeal in it ?\n'), ((1045, (16, 24)), "*GFA:\tit's just crackers and milk .\n"), ((1045, (29, 33)), "*GFA:\tit's just crackers and milk .\n"), ((1048, (15, 23)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1048, (28, 32)), '*GFA:\t<saltine crackers and milk> [>] .\n'), ((1113, (22, 27)), '*GFA:\t<can I have the sugar and the spoon> [<] back ?\n'), ((1121, (29, 34)), '*GMA:\tyou already put enough sugar on there (.) .\n'), ((1149, (26, 31)), "*GFA:\tGrandma's trying to sugar me to death here .\n"), ((1161, (18, 23)), "*CHI:\tit's by the jelly !\n"), ((1167, (19, 27)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1167, (32, 36)), "*GFA:\td'you@d like crackers and milk ?\n"), ((1180, (35, 39)), '*MOT:\tshe says she likes them with milk .\n'), ((1237, (30, 33)), '*GMA:\tthe night he was making ham in the oven .\n'), ((1446, (34, 39)), "*MOT:\tnow sit still in Papa's lap honey .\n"), ((1540, (6, 11)), '*CHI:\tpizza .\n'), ((1552, (6, 11)), '*CHI:\tsteak .\n'), ((1565, (6, 11)), '*CHI:\tsteak and pizza !\n'), ((1565, (16, 21)), '*CHI:\tsteak and pizza !\n'), ((1568, (6, 11)), '*GFA:\tsteak and pizza ?\n'), ((1568, (16, 21)), '*GFA:\tsteak and pizza ?\n'), ((1581, (27, 41)), "*GMA:\tshe didn't like the <macaroni salad> [>] .\n"), ((1592, (13, 27)), "*MOT:\tthat's Canadian bacon .\n")]
calculating accuracy and recall
correct labels:
set(['cheese', 'ham', 'macaroni salad', 'sugar', 'jelly', 'oatmeal', 'milk', 'celery', 'peanut butter and jelly', 'calzone', 'saltine crackers', 'crackers', 'steak', 'canadian bacon', 'pean(ut) butter', 'peanut butter', 'pizza'])
predicted labels:
set(['butter', 'goose', 'macaroni salad', 'ham', 'cheese', 'jelly', 'oatmeal', 'sugar', 'celery', 'honey', 'crackers', 'steak', 'canadian bacon', 'milk', 'peanut butter', 'pizza'])
file:HSLLD/HV1/MT//allmt1.cha
precision: 0.8125
recall: 0.764705882353
true positives:['canadian bacon', 'celery', 'cheese', 'crackers', 'ham', 'jelly', 'macaroni salad', 'milk', 'oatmeal', 'peanut butter', 'pizza', 'steak', 'sugar']
false positives: ['butter', 'goose', 'honey']
false negatives: ['calzone', 'pean(ut) butter', 'peanut butter and jelly', 'saltine crackers']
# true pos: 13
# false pos: 3
# false neg: 4
HSLLD/HV1/MT//sopmt1.cha
loading solution set
no solution file found for: solutions/HSLLD/HV1/MT//sopmt1.cha
{'use_pattern_matching': True, 'use_second_column': False, 'wordnet_setting': 'most_common', 'base_accuracy_on_how_many_unique_food_items_detected': True, 'use_wordnet_food_names': True, 'directory_path': 'HSLLD/HV1/MT/', 'only_files_with_solutions': True, 'use_pretrained_Google_embeddings': True, 'use_word2vec_model': False, 'use_wordnet': False, 'use_edit_distance_matching': False, 'pos_tags_setting': 'ark'}
precision: 0.756302521008
recall 0.753138075314
# true pos: 180
# false pos: 58
# false neg: 59
false positives: [['chicken spices', 'honey'], ['meat'], [], ['honey', 'sunshine', 'tea'], ['apple', 'duck', 'grape', 'honey'], ['egg', 'fish', 'lollipops', "mother's"], ['snap'], ['coffee mix', 'diet', 'fruit', 'lettuce lettuce', 'milk juice'], ['pork'], ['cabbage', 'diet', 'egg', 'ham sandwich', 'honey', 'pork', "van's"], ['barbecue', 'honey', "mcdonald's"], ['apple', 'candy', 'crackers', 'duck', 'vegetable'], [], ['honey', 'seeds', 'water'], ['duck', 'fish', 'lobsters', 'meat', 'water'], [], ['bear', 'bread', 'fish', 'grapes', 'honey', 'water'], ['candy', 'turtle', 'turtles'], ['tonic'], ['duck'], ['butter', 'goose', 'honey']]
false negatives: [['brownie', 'chicken', 'coke'], [], [], ['skim milk'], ['popsicle', 'popsicles', 'vitamin'], ['cantaloupe', 'ice cube', 'lollipop', 'tootsie roll'], [], ['(to)matoes', 'cucum(ber)', 'diet dressing', 'diet soda', 'supper'], ['corn on the cob', 'fudgesicle', 'fudgesicles', 'honey+dew', 'ketchup', 'popsicle', 'pork chop'], ['(po)tatoes', 'diet slice', 'diet soda', 'ginger+ale', 'koolaid', 'milk shake', 'nut and honey', 'oats and bran cereal', 'oats and honey', 'popsicles', 'pork chops', 'slim fast', 'soda', 'sodas', 'spice ham sandwich'], ['gum drop', 'mcdonald', 'quick'], ['cotton candy', 'french fries'], [], ['corn on the cob', 'ice cone', 'popsicle', 'tuna', 'tuna+fish'], ['soda'], ['orange'], ['brown bread', 'concord grapes', 'fish stick', 'ice cream bar'], [], [], ['brownies'], ['calzone', 'pean(ut) butter', 'peanut butter and jelly', 'saltine crackers']]
total runtime: 21.7408840656
